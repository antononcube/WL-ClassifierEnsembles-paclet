(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    322920,       5870]
NotebookOptionsPosition[    315508,       5713]
NotebookOutlinePosition[    316341,       5740]
CellTagsIndexPosition[    316260,       5735]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["EnsembleClassify", "ObjectName",
 CellID->79925492,ExpressionUUID->"12216653-c621-41ac-9941-4f52dc738e7d"],

Cell[TextData[{
 Cell["   ", "ModInfo",ExpressionUUID->"fa45f881-62e1-49fa-bf3f-755b0cf408b7"],
 Cell[BoxData[
  RowBox[{
   ButtonBox["EnsembleClassify",
    BaseStyle->"Link",
    ButtonData->
     "paclet:AntonAntonovClassifierEnsembles/ref/EnsembleClassify"], "[", " ", 
   RowBox[{
    StyleBox["cls_Association", "TI"], ",", 
    StyleBox["r_", "TI"], ",", 
    StyleBox["type_.", "TI"]}], " ", "]"}]], "InlineFormula",ExpressionUUID->
  "f9812c64-9d35-4c2b-9d55-d26cf55eb117"],
 "\[LineSeparator]classifies by a classifier ensemble for a record or a list \
of records. The third argument is one of \"Votes\" or \"ProbabilitiesMean\"."
}], "Usage",
 CellChangeTimes->{3.932251495332609*^9},
 CellID->1130464669,ExpressionUUID->"5552bdc8-8803-4a14-b731-614f8e3669e2"],

Cell["XXXX", "Notes",
 CellID->931866874,ExpressionUUID->"93db45d4-8b80-4113-a13a-726fd9a4623a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "See Also",
 Cell[BoxData[
  TemplateBox[{"SeeAlso", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related reference (function) pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "cdf8cafd-1987-408f-b859-4bdbb1e24a7a"]
}], "SeeAlsoSection",
 CellID->288313747,ExpressionUUID->"13637004-b552-4178-8b57-6a7b410fba2b"],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   FrameBox["\<\"XXXX\"\>"],
   "FunctionPlaceholder"]], "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},ExpressionUUID->
  "2b3ed5b7-0aa6-4cec-9124-d53823294470"],
 Cell[BoxData[
  RowBox[{
  Cell[TextData[StyleBox[
   " \[FilledVerySmallSquare] ", "InlineSeparator"]],ExpressionUUID->
    "e2dfc994-0e92-4381-b0c5-bad4a7c7f182"], 
   DynamicModuleBox[{$CellContext`nbobj$$ = NotebookObject[
    "027daaf6-f46e-4dae-8d22-74862f933d26", 
     "a08e1f6e-2e78-49fb-a17a-3b343dc126c9"], $CellContext`cellobj$$ = 
    CellObject[
    "71f49def-7edd-48a4-89a9-0f98274593ee", 
     "009e5040-5fcd-412b-b1ad-a01d5b4b0440"]}, 
    TemplateBox[{
      GraphicsBox[{{
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         CircleBox[{0, 0}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{0, 0.62}, {0, -0.62}}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{-0.62, 0}, {0.62, 0}}]}}, 
       ImagePadding -> {{1., 1.}, {2.4, 1.}}, ImageSize -> 16, 
       PlotRange -> {{-1.06, 1.06}, {-1.06, 1.06}}, 
       BaselinePosition -> (Center -> 
        Center)], $CellContext`nbobj$$, $CellContext`cellobj$$},
     "InlineListingAddButton"],
    Initialization:>($CellContext`nbobj$$ = 
      EvaluationNotebook[]; $CellContext`cellobj$$ = EvaluationCell[])]}]], 
  "InlineListingAddButton",ExpressionUUID->
  "71f49def-7edd-48a4-89a9-0f98274593ee"]
}], "SeeAlso",
 CellID->966038197,ExpressionUUID->"730b6b5e-719e-4554-8918-5bdcfba6ea49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tech Notes",
 Cell[BoxData[
  TemplateBox[{"TechNotes", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Insert links to related tech notes.", "MoreInfoText"], BaseStyle -> 
       "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "296d206d-7720-4e69-9851-b95dfec560a8"]
}], "TechNotesSection",
 CellID->1227605659,ExpressionUUID->"184985db-9a2e-436e-842f-df09186d6e1f"],

Cell["XXXX", "Tutorials",
 CellID->1492914084,ExpressionUUID->"cc3e8fe0-1d55-4bd1-ae0c-d5164d40b461"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "MoreAboutSection",
 CellID->208078240,ExpressionUUID->"d3685d6b-62cd-4a13-9bca-d1a3fb2bfe17"],

Cell["XXXX", "MoreAbout",
 CellID->1067602364,ExpressionUUID->"0d25be76-0e9d-4dac-a58a-8ec58bb7ce4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Links",
 Cell[BoxData[
  TemplateBox[{"RelatedLinks", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related page, including web pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "da875735-5020-4946-9e3e-a2f8bed55f8f"]
}], "RelatedLinksSection",
 CellID->967061063,ExpressionUUID->"d464bbaa-de02-4a97-8b9b-9c72766210e8"],

Cell["XXXX", "RelatedLinks",
 CellID->1239045345,ExpressionUUID->"1dcf08a3-a29e-434b-8748-0dd427f11a1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples Initialization",
 Cell[BoxData[
  TemplateBox[{"ExamplesInitialization", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Input that is to be evaluated before any examples are run, e.g. \
Needs[\[Ellipsis]].", "MoreInfoText"], BaseStyle -> "IFrameBox"]], 
     "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "eed41562-8428-4f5c-8043-94716caf2ac4"]
}], "ExamplesInitializationSection",
 CellID->486188456,ExpressionUUID->"91a1024e-4b6e-4cc6-916e-e6432c67b5c6"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<AntonAntonov`ClassifierEnsembles`\>\"", 
  "]"}]], "ExampleInitialization",
 CellID->194103157,ExpressionUUID->"1d618ff4-9372-426a-bd0f-51cff00a098c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     StyleBox[
      RowBox[{"Basic", " ", "Examples"}], "PrimaryExamplesSection"], 
     ButtonBox[
      RowBox[{
       RowBox[{"More", " ", "Examples"}], " ", "\[RightTriangle]"}],
      BaseStyle->"ExtendedExamplesLink",
      ButtonData:>"ExtendedExamples"]}
   }],
  $Line = 0; Null]], "PrimaryExamplesSection",
 CellID->264099906,ExpressionUUID->"15e115a7-4f9b-4efb-8447-dc77eb46df78"],

Cell["Here is an ensemble classifier:", "ExampleText",
 CellChangeTimes->{{3.9322997707121973`*^9, 3.9322997832678633`*^9}},
 CellID->254785047,ExpressionUUID->"27d171ec-5050-4196-b0bc-2ccfaa2c5a77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"aCLs", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\"\<NearestNeighbors\>\"", "\[Rule]", 
      InterpretationBox[
       RowBox[{
        TagBox["ClassifierFunction",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       ClassifierFunction[<|
        "ExampleNumber" -> 732, "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 3|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f2(f1f3))" -> <|
                 "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                  "NumericalVector"|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.088754, "MaxTrainingMemory" -> 
                    6754240, "DataMemory" -> 81824, "FunctionMemory" -> 63480,
                     "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 13, 29, 0.81086`6.661520866212022}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                MachineLearning`MLProcessor[
                "Threads", <|
                 "Input" -> <|
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                  "Invertibility" -> "Perfect", "StructurePreserving" -> True,
                   "Missing" -> "Allowed"|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {29.41643893442623}, 
                  "StandardDeviation" -> {14.237916921543757`}, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                  "Output" -> <|
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> {
                   RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                    RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                  "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                MachineLearning`MLProcessor[
                "MergeVectors", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                  "Output" -> <|
                   "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                  7619735631186802745|>]}, "Invertibility" -> "Impossible", 
              "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                MachineLearning`MLProcessor[
                "IntegerEncodeNominalVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                  "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                  2833981340056725226, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|
                   "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                  "Key" -> "f1", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> 
           Identity, "Name" -> "class", 
           "Marginal" -> <|
            "died" -> 0.5831062670299727, "survived" -> 
             0.41689373297002724`|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> Automatic, 
         "Model" -> <|
          "NeighborsFunction" -> 
           MachineLearning`PackageScope`NeighborsFunction["Nearest", 
             NearestFunction[
              Hold[
               Nearest[CompressedData["
1:eJwkXHc8V28bFiWJ7ChJ08ooRIgjZYRkpkUhs1QyIyOjVEKURGakyGiRUYeE
NFD0yyyRlT0j6z3Xef+pf+7P7Xqu+7rHM853o/U5Y1tGBgaGVuofZur/eAkv
ywOKvwhLxZK6+8rDZIJ7vnt1RieR1nl4iK+shexO9DF+ONRJnCl0fP7aoJ8s
+iVzPnj1CvXFe/ceX3btIW/1yB1O6m8jdKwfeBws/EKMH+QVy6DsNW3/boT9
GPuSFLeSCeKOt/fPOMr/wcdhqz9S/lmbv4RwUf5b3/JEPIkeJrJDh4ILooKJ
l4JnL2vLNBHteyQnAyn/e90uladT/te0zykcoPw/+3T8Uxrl/5VXU+Ibyr/1
331nylQGCHNT77J4yv+DFuUG4L8UcDoF+A9O/02DfeXHx7+Ax41pomzkczt5
Nrfyzz3Kfr2quAfsg574tsGezYb9ZCaFR/6ib7oqhedr4zKdY92V5Oo5ok4x
+xux79C+KpakPDLjxkH3bZufEW/MZriyKHv94J9NKpT99fC1tllCE2TtgrdA
EIXfN5xBHvzolXLZGFH495TExYCfwHTWgVIKz5eluecmJSpINie9JeBTQPNr
RDJlX1dhvw/rDT1eOw08hQdDSl0p/yKbrgY2vBsigjJG/eD/q2ap+EPKfi6I
p8uAsj8/YiYM/02SbHtIyr/BjcXWfQptxM8FgTDwWan9Zw389xnEhxtT9td5
t+enU/a53OIVwHNmYE/1cd6/RAi3bRri9YYn/Ownih/f8kPF3BQ/733crj+i
7D9yKawE/5wsqg0hCo3kyl9hHEoUP3EnakxYKX5Mlvokgp/nvH4CiG8Q+U5J
nsK/UbPDRIuvmBg2P6kKPA1CO5TBj4LQVKshhaf+LmMp+Iwy9w+7S9nfDdr8
/Oj9PjL8hOAKxJfbu0r9A4Wn23P9EC+FR65jVz3srzAbdDlT9lvb0t5Yn3lI
9Ib2/BdL2Z/h8mWFvYbtXuXVlP2gbE859CC8e7Ui8Isyld1Oca8jfs+l7IN/
VfXratCnr+lMMQ9lf21hlQrWW6vceh/2sjM1wW88Bgjh0n35yJeqzfPT8D+4
bpsl9HN6dbww7Pcq2JeBT+5Hegs2bh/Im+s6uBEvd6//lNOo9T5c2LwG603b
r5uF/DI9uy4C+ox7xykZJN1DOgs/XgF9qmQGvYE+BUcVqoFHNYD0g/9R58BL
8P9q+vzZaZc+MstFNwX6cVcx+phI+T9f6pKN+HZ/FmXJpvix6WBSOEfxIy05
9zaq8jt5/pDGXfCv+Tz8YCpl/+SV/hN9yv62yjo7+M9vZ/cGHtaf7yvSpBtJ
MTbHR8DDvESd8TOFR6w5Igb5W8CqNQL9KNuy/wE/kcp39059nyD8hwIbYB/C
pqsE/cS+jPJHvITr8qyAh28r5+4oCo9+96OZXwdmSBbhT17AI2UQ/hf8jF69
6adH4Sl8evQZ+GkpYn8J/6tUIuMclvQSzht0uwMo+20TqRMPKHvCQVwF+n+n
w5OI+N6N/5sP/ddPK0n7fXtErBM66riT0mdY6JkhbkqfooeJsS2UPqXOFSsh
vwZaG2Y+UnjsTtrLxs72E78jGjfLUvYahzS7mCj79nDzpUKU/V3NbxvAT/8v
+0rwL5syJPl+qpEI3uK9A/wLc304A/7jcz+IId+POqsmAf/PJ6tlYG8S/HR0
qHeB7OMrj0Y9cR31MFhO+Ve/3NEqS/n3G/VSQv5OP3kfjPV6nxfmSX7aQQpZ
hyUDj0Nm3O8VlL3xEx3pHZR9xae+MfgvCwnORLy+NNYJR97rIc2la//4U3hy
Q7NkwQ+rWYEK9Hbj2Xt9xOtBQLce/MtIPCXzVo2Qp6L8P+yg/L+3WSKP+vb6
h/z9jZR/01cXriNe/PmLRiLRwQT7qJn9w+01JJfb/hvAH6Qy9m8mMY90Lbfi
VaXsnVMKLOB/4UjNMayXo/+DhqN5ArmqIaML8RLJOcADvfltMhZBfH9mRqQA
v9Sn2Pewr5oTMbJNnic/h5/bAnvTj6saUyh7cUuFP9Cn1VnNTthztxQrwJ7v
+IEN1QxtpFGUxBq6HrIqXIF+DHfJPYAeHqUcjwef/0jZT9CD8FTHqc2Tk6Tj
YeUw+O8NWa6J+nlAnPMB6m3Nn+2F0MPFR+17TCg9uC9VMD3L1kA+Hqq6ifg6
JxlkoX7mLvmsCPyv3SQSsd5IDpVO+N9gcpfI/FdISmjqRsN/TWW4IW3PJ/AO
esgx43kF/J57/J8hXh3T0T+8LZerf1+ruAb5krbloiTyZWON2ADqlQTj0wrg
V3BaJY31zpnGxDSN9pFv2z+zwv++VUt4Ed+bvs5K4Mfw2wcN+G89mmgAPH15
jr6PC9vJyd8+KsgvRsWxq+inX9IYr8M+SCjnJZ2/D+88hR4ktIUOLSlYor7W
4qIe6uEqIc1C1DeJXs4R1Df1mlVNyK87E3bysFeNfXtbtrWRPDa34h/0o51q
6r5I6UFTfGK3JKWH7Cqx7ajPDK8KN1RQfBbuWRrBJnubDB0V1Ue8xj+GHkG+
WDD5rsb8kDvx7CXwsx7sGoN/t4z8pPvn0gn9kMc7kb9rfIQ3raT0Kclpuk2O
8m/AeWol8L8lrvjD3oevUc7zeSVpoD5dDP0HWHybh94+q0iuBP/H76oZA09o
5y+FbZSeiZV+Vc+DGgkLjj8usHebfT0MvZnm9XuCH2ehz1uAR09f1hl8Bhxf
q7pm2V9CT76VHfEKuHH6Cerzzxu3RTgpfn4fjeGCfez9ZzKI765nNtluLfWk
3xYRAvk7cnilOepPR48sM/L3WMS0B/qju4uVy0H0u/wzQQOrqohnLDXyiFd3
Ducq4Jm60CWEel6z1DoM/pvTYs7Cf0rYaFW8SyvJ+etIIfxHEA3Oyyj/cuyL
blKUfwXlFYdQr6ak1NnLKPthhkrz2EeVZJS/Bh/6V9s68dPod41l5m/4KfwN
2yfT4d+12C0L/qffL5vjtRggrq0q3YB5oKLPRgH210LuG6D+Tx0jvsI+c02K
OvgxVr6fu8/iEbH33PVpOQqPte+CEReFR37koqgwhWfjSrfXsP8Uv+oz4iWo
Uh11haeW3LrkmgX0vFyvbCXysX/7tm7E684F0SbEl0v6bij8Xww++75xbTFx
ftMhLeB59I5VAPo8tL4rCv3FjnF7KvQZ4chM90eZ1g2yz9W6CNmUX3J0v5Y+
Ug3876J/yaKfJr5bb478ajUyvAI8mhISnsLf20mVH5wM4H/No0JN6GfP7bOZ
qCfqO0zXgs8d6Ye3AE8U05YSiQuNZLe5Zivs1TruiCAfvy8bkEW8bgTm30J8
n4W9D5yl4mt+Z5Mrh1cjGTR4ww36/6VobQn7bRUWo9Db+RLLRPCjc6rYmObn
qUYaS1EPwd3tXYL4ttaprcJ8JW/AVytP8fnM8WbKY8r//QsreJdReh6Q5Ogz
8n9N+EjqlUDPNtkKiqiH7DYG1qhXAufX/Af/e3ka2MGPuSWHnSJzJxnO0XoC
+btj1nAb+tE2me4CGcq/YswXHfBf0MPMCDwJDC41u4T/Em1n5+tR/xNje3/z
UPYG3w3S11H2TdJEPvpFlpZbzgNqvTKpF72qbf+Rdx1jLmK9Ofo/ubFeH6t/
KViva+IvFZp/k5RR+BcR41Dxo/rLTlJ6DOs1da/ZxEn5L3e0rUJ/DG5IFET+
SvtrCTBS600NCyWz9LuIpI5lXMhHqz2XXTGf1MT3DCIfW17Gfwc/2hKKm+Mo
PFzB2lEGGl3keR2Laejt+Z8gDuTXXz+JfcAjcOgYP/x/umBcHUbZx/Vt6BYg
iojN1ZdntlN4zq48OoH1JsiYpGC+LWfVXgY9SLoJaQH/QTZLq//yv5NC4nIM
uzBvMEhILaXsszs+K6Ae9ot2ioCfm17njvJQ+BOcfqjNVM6T3j8+XkO8wkum
UxEv9X8Z5ejXmk7XxoFnu0fTGR0Kj4b7T+bu5gWSQ4e9Af2oT/p9F/R5nfdd
AvrX49Hb32HvXTJwD/hFf9/eL7p9hCy/z6IH+yt6qjdh37Q29JQJZc9btzQZ
eLaOO3Hfoezbrj1KGsjsI4dYLQyRX1v/Vd5HvtistLFHvldz6XgiXtZv2tyg
fwtzV3v2xHukf6TFeQVqvavPuUrxUeu1yzCJ3EWt93sdTzz0FuDz4ib0Nipr
4JDgOkZW9MuUgZ/WnPTfqIeC65eOIr7cJn6K6L+GWeU7P1F4kk+Z7vvX3EXc
79zChn70fOvsM/RHn3uEJ/L9k+d/P6DP7kzvn/DPkvpEyqi8jyy7baYBvUny
TP3EeiM1Do2iniTMux4HnnchRnPAf+jkpzNP6ztIxiiRXOC/8lMshR94jv1l
VKLwxMv0h0M/ldMs0TsoPC9Gf3S+Lagg234Vt0APHhIKrzEfVrNefQc9OL+8
6wk8Kz+oWMG/+5fecakzeSSXtloy6sMje7Xn2O803F4+jvhax3CT4NMvtjmW
npfWh7Ps9BwlKsRe9MF+9TZ5DeD/clohF/Z7m50NEC9em34LAwqP9de/ws8C
+siiv8yViG9EXv4a+C+ePqEBe5au8t+oPy+U8qrYKb1tP7MkdszkAdnjdnoC
/It0XojnoPA3cG07KkLhjxh67I/6ue1N22fUf9HvKp38a4fIb7IexsCjZHFZ
DnjemLuuQ76wrwh5Bb1ZmOUpMVP+GUwS0/oy68mC1p6PyMf427Gf0R8/PgnX
Qz7W9FdsRb4EZKXGwr+Ap2Ncwv0U4p5gzWnk4265ZC7ov7N7hhV6Nrspk4H1
bnnbfECOWi/PrPaKsm2NpNBhZRvgD80xebmawu8gLBOEfpcYm7IU+jnRpsgg
SeFZLeSUM282RBZfsghDftkqmfGDn9au+Rr4V2ZjtAeev3FzysjfSy0F8TxG
DcT53SlF9H6c4LbEes/7s9mjnh86cNEG8d2uLfgF9mzDwS0dKU3E9+03SPi3
0i6+C/zhzP8Fo94q7X79CnhW7Vl27hKFf6DPg3/Pbkb1M73696G3GVXxn+D/
9j8uX+xHbmdtkIT/EUMJuj5fYVaQ63pVQP5UGpgDP68aeUXgn8Fziy/8bzv0
bxH8D5f7/1ig/GfY7XRU6ftOBvsf7Qf/fPzblZEvkZteaGN+25o18hb6z/Oq
KId/laxTay5/oObD9FYn+P988OlWrHe/+6rDqA9PLNaVAg/DugxP6Fny5GeD
ny86yN8Fo4lYL0tFzAjmt+YtMyXILxOLjQfp85zSW3oyFP+9e5fJSo9Rec/F
Ew48a8IfmaNfbxGwPg09LDow8QB/QL9HBvA38Fk4TC+pIo791r0JvSnclvbD
vCqnzZUI/2bSa44jXkOPJ+5CP5zGKdrWz0bIFRWp55Hv/EvZm1HPXy7+IWCf
vC78EvC3l6/LwXol3B7v4FqyQPj4xA1gHphYxZEHfoJFbjkBj2uCpBXweFTd
/slB4XfaFhUv9vsVuTmHOQLxWiavNcKO+VM6Wx3zZy7jGnp/Gt+6NhR6uO/h
6FhQPUEu14wwBB6ZnOAN4DN2xWdRWj9Ob68Azz3ZuWrgP15SZLv7YzvposZk
hPomFZaYh3zh7yeqOSg8fOaNEdD/UF2tDvrXkohnYjU19eTRbmMl8FP3wzId
/Lz53jsHPfxqcZmH/8Ydc9nwf9i/7rli0lL1wfQlpzE/W7N6Pwb+qGv8qpsp
/G3hW7cCv/WgsgnwZyT6O9twdJEnbn60R37N6MVKY347z7T11HbKXsSyyAt6
ZvlRIHycwiPlxCR+T3WGGHnjEo35wfdzqTcDZf9k8vHJDZR930a1tfD/KOAl
fb403UNai1knk2/3uBTCf4XlARvUT1+NaGnU2x7eO47A73JVKgz27ft42sf/
TRFCvuV/EK/JRwNW6Ed7nKucMK/uPruDE/Ei/62VT6bwiGcYZrn1/yUZhZSC
oE/BHL1q8G/8qU4f/K8+1X8b+FN/3O2uouy3PFSbEllYIOoXf09j3tjQmMO+
BPVQ07UL888SgVJaD67Meq3ClB60evZOhTWlEDZjLanIl1MHF+l6KLWFRwR6
K4k4+gn9QiE7PamQ8r/svlVn0MNRwr2+5yrwm/2Nfg/8JSMmb7C/84iIUEP9
l2vWG8Z6WxkOXZJrmyKvBrePAP+KDXNtiG+Dy5Iw1Fu2Jd/9gb9JJ6EY5xW3
pHgSvw1Qf7/gQBz0w/dAxRb59eDcihzMt/IzZZHwL+28fBP0kO/19o74yw7y
3ulSXtQ3nc1PHJAv10XDCqGf5ghNJ/AvuyN/N+wnJiWeClyl+ovu+EboLbz0
/jXYPw+q0cI8nKnUroN8/LRv00rY808+8zpi3UNm7t2lAftS6Vwh8NPTXCoN
/o9lTPbT5592o9ugt/0f10ceyE0l7SYaG7HejfvfKqGe7DV5exr9i//g0Fus
N2K7SNoWin+u+RebxW5MkKM7ZHnB/43R2PvYX6d8kTkN/ynrI8Lh375k3TXw
abqO4chpgxGC1ZbrGOYZXYHSdeA/yCrdG/zczjTdgfh+nMp98Yzikyl6bXaX
UhuReTXYiz7/vG6SBHvrm8e/Qm9Xp19oYr2X65oSsF5XHn9B/hkm9WjO3mzU
N0F/3tfI310lk6cQ37OmnHbAw3U/Rw/2I2YlBf9y+0ien9LR0MOYXcZy+L8q
tO4BvX/kXWREvoc2zg+rU3gOfSm8LHayk5g0MDcCnvL6zSyw71X2CcQ8dqzJ
7xbyyzeC5KHPo3LN940vZSiVX1rDjPjWTGsugs99XPmd0GdeyP4XiK84Q+wi
6nnjC6JiNKyWaD8YNY14DW8TW0B/Kf4aGo/4Rvj92A1+/jzua9pA8f/UYMLb
PKWDXO7AUY149fROL8d+zZQQTod/o30RqVjvLNvOLOAx64tXsHArJvuKk0sR
r4Ou1s7Qj5tZ3GHo+RSv43bwmbkkxZA+DwnbM7WOM5OoZ2r/jnxk6zp6FPPk
jgeHAlFvkwr3boQeDOp/LF1F4Vnf15AlQPUXHSeL4/Cf2vbWC/sLlks71HCe
oMLBOIv1lt6/+xV6c3E9yPcscpYQYxtMAZ9n8n9JIF+O25x+jHrr3Pr2H+xN
+J/R55/1UYoCfOUTxJ0yVW/EdxtbYyfie/GLz1PYB0c7BaHfzWTe/OJJxavo
q8qVE9N/yZhjyx8Cz44d4kHQ5xell5ehzxkb5YtYr6PY6yrww3h2hu1PwDvy
e59/JOrzlgw+f9TD9RV/7DAP2CjFscPeIqGB3g8yMfLl35huJ4fGt+bCf1nK
BjGs94HVrk3Il4gY52XQz5co8xEXCs9Tc0MXjsN/iCuvww5ivbd2bckHfuGW
SB/o324wzBjx8q5roM8b2XJmDz83KCD3e/xuQHyfs9qHYV4yetXgiHlAlNn8
PfT2QqdyJfQT/vep/+7eIjL5OkM29vvP97AumU7MI29MZRRh/s9SNJsEP2ee
FlfuwH5nd0naWqH7pPd/fzTA56taRfo8efkpfhfMJ9ZLi/cAT+XToVTw4/PY
quL+5R7iavL1Uuw3uZwiO+co/wHblJ6Cn8AneXR/uew5fxzxqumsvsga0Ue2
Js6Fo/8KC+omo/7YGedsBP8v7u2/ATw8G44feEPxs2vFxUdSilQdOdLrDj6r
DrXuBp9s/i63UQ+/l00JQg8H3XfVYr2WmvGR+sO9RD+7VQDy6+WBMRvUZ/5n
04XQW61nNCPwiCclmQNP+R2xX/Ot7eRcZZEY8MxyhxwAniL/pwnQf5llAQPw
qNzSsER/+fR4q2PV70UyKtdyD/yrn7S8A/08v85zFfayrv030V+OcK3LXU7Z
K5zfGhiaNk7cqCbOIr5MS46PIr4d8ztqUB9iJrqCoZ9306/+gc9Hyw7N5ujW
k2ulrpuiX1y7ae4Je+vNh71R37S5HAuxXr8/h4Wgh/UOLi9vrf1LpG2Pt0C9
Kg69dw/5IpekmIb7IC3zY3S/thU+5IT17iNtbF2bp0h+3S8MwB/fq3kZ+KOP
yEsBv2l61WvEN1t9djf8m3xsWX3do4CcHx2OwzyQHOZ2Yp6KL8dgz42dVHwj
a5xbUX9WcCqzoF83/tzUMaA6QpaZxZyHPg/GV9H5tbP+yhH4b72lSd/XzITz
+mO9v/mjDrGcqSHjf+YfBJ60r94KiNftm16VqFezzV4HgP/L8BVenI8179NS
yqtjVN+xP+0w6qGWcudO1De2qDMPoIdb/Dc8UX+SEpbl4n6qsuK4iJV4LVHm
vYkF8b1UefgA8mXVoZop4InQeKMC/319VwSx3l4H2Ve7LOeJ3iNBD4H/B1d2
DPTgM25Lwv/ygwx7YH/HxMQZ+J3YArqWa4wQrY2/xIDncvNF+jxqrlbQG/VZ
q/6FKda7c990H+zlH7aXMrO+Ipc7b6LvW4sT3pxCfklYRrYi399KOXPDPkvt
0Q3Yi944vvS1YxtZftM4jcbTrf4I/SInxtEEetaStuxAvDZeXT9eQtmfXWMg
lOHSRSydMdgO/zEBv69DP70JbHT+/rjHYgQ9s6y5q5ZB8RPMo71mrVIKMZeY
sYD5UPQ6U48AVd+0mv5qb6Limy6Sqgv/jxy62oDHer1vFrf6X8L2xNdm4JkK
+j4DPEH3TW9ivSr886zIr/Lk//phv/S/4D5J+VFSeNtjFehn3clTKTj/tHOo
YMN5SzB7nT3q4Q7B7NIfFJ4sYjjZMbSPfHlc9inqiWyWpg/sE6p7N+O+Q/fc
88PAs2OF32HEyzZq4HeR5Sih036tGfXhkNQFDuih8kdvFfBsNF64DH0+Ht+a
j/MZ7sHhBt0Pi+TExFQB4nWpzvsC+p1GgO9n6E0hVZgL/FtblfkAv9tckrsz
/yKhxZCyiHp4dcUHWcRLdNW/IswPLL4dIdCDI3f0VuCRvLP7Adf8IsH9YWED
8nHjDd9c7F++ycTeRf6Wlduwg5+eK5L0PDD9US70hFYVwUPs+QH9h52SOgL9
f+Rpuw78q3+ENsN/ioy1IurbkPxyi+3kBGE2/+Em9CzfLM6H9WZU5QTDXkFm
2xDW+0TO9LU99mseX1PjD48Quj9zBMD/zqI95djPaiX2r1ek+Py8y6Qa9Sqp
XNV4CPd9L2zaDzU3kjfmrzSiv8f6dXAg3xO1+h9AD4acZxuQX/w3SzjkqPrG
sdFB8LNED1m+YpbevxvlL7piPmGTWaDPS289fmSCeL2/IKMG/IWWKmKDmeOE
xJcdr8HnqNKvaOgzuzxXH+dFqmOlTFjvmoHvt8HnSAinYKlaAhl9KfoZ/PNU
cm5EfrWsEVdAPnpuix6F/aOJswHwv3y2+30ctV/j3i/JhH4dWV4/gvOHWw+F
2HE/OPlQ7A34X/3V7gn8m/q//PVh3wyhtM17C/B8Fl6hinjxHQwuBJ6xk7yh
0IMs8w8B1E/bTcHN7p/6yNxP/wrp+WHR3xbx4ukeKUX/evr63T7w88nkqgnO
E7ZZ3dr+e3kN2edcsBvx3SowdQP1J2W5JF3fePNzNcHPM3bJEuCvjuybre2Z
JC5lk19R/+Pt+1IwT8Y73qP1E5K2YQLr9VLbT+9nc5k+hg4tmyJeGM2Kwv7v
7W0k6r/M4m972LctMaPfh5w7ua0K9v9snHeHk6nEF22jAOjniqB0MfL3T2zZ
FfA5PzI4Su931G6wot6eX263wnxfG3Em4fAeut7qO29CPT+bVeiI+nPzwn01
8MPuc+8JvR+sIz9UXiomy5kCl0NvysFlX3Af+mV8Pgb7NZlrj5VRf4713lxe
TvHzcWMdHz9DJ8ku3vUa9efeILkM9kft2FZupewZ5B7UAM/kjpLXwG+w0jRS
8XIzGcjN8xz8H9DLakf+Gg2Li2O++l0SSe93JEpW0ufhfiJzX9pCU0hvx+2C
wDMo9YgZ58N6kde/Yf55zfbUEfZXWxj5EV/elCzPCJs6wpXfTh/++ZLzO6G3
X1dbhxGv1Ty69PmMw+7Ll+HfUsvX589cO7n8vGwv4vsvQF4f/CSZCvSAn/fL
TnvCv73orD3iW7J716V0+y7CsVSO3t+Jm0+Ygf+JyvZB+F+WwGOK9XbdExAA
nxW/j8//fNdDFEkffQc8/jo3zkFvr+fk+GCvX8p1AParomdiYF/W4XMv9nY7
OZ/mSJ9PntxVuw72/lNb90GfJ9lZ7uD88Pxekhn2milPJ2RGJ4nk/II+6P/H
9+PVyMdlJpEdmE+auTZcRX1e6a03sJXK980nrwm/sqkn2WSb3wLPyXbxWPDD
bbVpG/h3VGEshf91nPERWO8m4SmToKka8mHjuSb6vizCogB4bBPWfMf5nvyJ
J73g0zvKXgr8ex6+u1X23SzBax0kDz3fZj7HhnqrWrjTC/uvrpJt9H3B8ViV
yExKP68VXexXOXeRsppsXqgPYav7H8F/WY+mE/j/tvGKC/JF1N2zFXhidpj6
3OZ8Rf5RtbeH/g/qHzMGflNLhVTUq9IlYXzgM7Jp4SL4ubBEzWS76HuCj/wR
CzwGfiHLUB+iNn/8in56NbLcAfgn/m1NBP4Pk0oLX0TaSKudOxnw3sZ1Rmcp
+pfH58H+3ZTerKurQ2AvF6NgD/+JV0+NLlVLIXljPa2gh9LVv02hnw+Hh3ch
H3+fk55CPTk94SX5H/YvWa5p7MfeE1tTV8SgvyzVcXmJ+jC9OrsE84PQqfcn
Ea+jF6Ml+Kh48XrFSC8ZqyK0v6degP/BuoJO5Evo1WtZ0E/1hku0Plv41tL7
hc+7csLboh8SHpd1af0ky7IpYd5ek6mzBHyWyOc8RHxX/E0awbwRJvXct+oA
o7rbDtcs8GNZuPMb9JO1RuQD9OPiul8F+b7yitMwP4Wn/uaketEHRvUB3ves
4OeKTM/wP6q/ePh/rcX7hK79RCt9vrqkaQXwTNiGVYnPpBB7b/FIoT446zn3
4/xquYOfCs7DLUYWd9H3xQlsaWkUPyvVlx27u4qhtPOt02bwI/xkqRv4cXKJ
LQI/9/ujNeHfVF8hl34f9baPVN/wimzaXnQBenjZ9V8c9HBY3OAF9Hy0avg7
1jtyUckSePRbhNc+UhwgWBOCenDeSHK8lpyl8Msu4dVUoPBsL401gf/M0RZR
6KH7tdpLjtAeUoFVXgP5Qm74Z4v+eC51rgP92k85vgV6bjmSW+dD4d9g/0Mo
qqmRmPpq8wt6jmnWyUK/CA5q2g19bjs3FAj9/MgQmgWesYAx3rT9y9XdX6g2
4T3V1kK9YqyXhTVbGPqcCPjFgfhGVKyLxXp5SfmLhRmjRKD7nhDke9F8E/0e
j0Wt8jf6xee4vY8Qrw/eiSZsVLxSSv7J3l3oJ+Nv3smHHmS7VEjoYXu11DR9
3+15Lw14qreFbIOef8oedznnOkRaZLEFw75WNZzeH8lzq5sh3z8xstL34wof
Oz6An+dOlxu7w2bJ00uT9aFPQSW2P6iH2+YrhcBP8LagUfAjnFVunof5zTxG
U1aridh02fYO+Az0tLeA/3SjOh3ky8jqvn/w/6plyU+sd7TZhXT8WknI5Tzs
hf0T9czz4N+aOdQKejZkX5kLe/bc2EDYhyoWbuhSf0AavZQyAz/f72a/Rz/9
surKFsx7Hy8JiEJvZdMSM+IUP/tql72rPjdApHuaSkE/Di4lmeDn09EHFeBn
0lfyMPy/PctkSr9vWTbTJsfBoB6aP9SBeFVEWq9Bfdv5wO8T8kVU+2oU7Pc9
LuGA/eDKNlZux0IyweigGj2fMPeGI75CN/Onsb/jOZqxDXiMpw6svUjx82zf
yc1SfycI7y/HCOz3l7qfq0O+xJtJ92H+MWn4/h/qW7XC0WTwr1fEfk4t+CHR
7BysIk/ZT/J4deF90Uf/KAPMe8XDWvXQc0JVTDH9HrLMKO9D3hzB76HCCzx3
j1jmQD/zydc0kV/dnuM1qFd+2cuevqXwrEpeOOiZ3UceuW73FfliolIsiftE
aofXJIH3XbsltbDeZ8xx3MCTRfJWyTHUEb/kxiuh/4KxCEbUKzvnLYnIx/aE
qcPQc80dgt4PWh1lufDMp4tMH2Ok56u160/r0Of5Si72iO9/jaZ6wL9f458q
4psUbqOe+aWdZOXQzIU+03ZV1UAPAmHCKdCnukqjNPx36NRNo77xH3FnlS8c
I6pHd4qinnw5ZDUG/mVfhzghXsyx7jXAv03bin5v5rQ++duRH42k2OE/0tAD
t+9HHvi36LSoB55Pjx7eQX5JL3spep7i552T6s92plfk9eTuAeDJMQ2bR75n
uG6Jg/3vXUcK6PpTeJ4P/Jx1HjsheXuUeEwcNQOeaVEBf+BZG6JwFXpY9myS
5rMxz46k+9HmN8HqXNNkzH9iUthPhTnMdeB9ztj+imHwP7iklK7nu7Ol6f1+
7KrWXey130mXU6OSwG+65M5R5Jfaa1tJ8N/83/I2+D/hb9SD9Qp1h3h01XSQ
MotK9H1HAaN4NfQv3lndivy1iJV7hvVeWdPsj/el+ixchYzbG0nBuOw/yMen
txQeIl4rq7iKYb/9fMoq+n55/NWjOcr+QIhh5OHTbeSZo6b6WG+29JvdyEcu
UeF01KsXK34JIF6/7STWYb1ixdrTt24OEfduPh8Ent0nd8VAP998VYpQPz/+
tciEHqYKd8jCvtojq6nCsJWUV/lJ98f1IgpJmB/G3+57i/WarluoQr7UhWWM
wX75hH+R+9cO8sfFgO3gx02wSxL2OYKcjMh3z8ER+v3MQP43el61kNE67yM6
Q+atiN8APLo1r5aDT9uTPeew3rHX6VXgf2PyzCT8R0k8eXnuXBc5JWE+A37c
3xCT4HN3dvsM/D+MCSsGfv5nt06iPnhLB9/e9KaD9OVbcgH2xu/C+aAfCd++
M9Bz3AnOJtRPgWU+iidwfp56LqFmtJJ865VzBPaKR+cEYc/m2RAJ+3vtmifA
Z29M3Qbgr3dk3NLE3ES8ZH/oBP4r5T85Yf45zuzkDf3b/m6Io897t5vL1lP+
L3Katdxp+k0+vPvEGP6H/kkJQ/+XL/5th56lK0t/Af+WWKVnwN+cLdqiLz5A
zMsTK8Dn/EpVRfBzWcCxBes9K6OaSdfDc0HiwJN829z5+7MO8mZf0XPMG7K9
d0Whh+tbzqthv3bg62kb6C3in9qRJLxPcHSequYbIB8YMu8A/34PCXXw+Xo6
+wP4X5AOv4h5ienXc0s9yl7yjPHyidfvSCc3/1WYN+z9B33wvuXTZtlNeP9Q
5baFfq84GDxFv7+6pdG4M8B4iNjB+F0G5y1iQvstkY8ptfWiyEcO1t/0+4cD
wv/50f3xqfDtja0LZIXzL0HUTy3DD/R7+8afLvXQ85jX4//PM1Xn+/soPH4e
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
16A8vou4cLdTAvXZ9GVNIOaZctNH3ZgnvYaT6PmnwL+Xfh/+hZ8U+q7YQDrP
NLNDPzYLnvdRr1LeBubQ9xdMJ+h+4bL5Wzb4j/6RFzvh10pKZP/8gnq4sbG1
hf6e+nZNNubtiUOKKcgvI+cpD9wPvrqpsmN6YpQo4mkMRL8ODNvJjXq+XyLh
EOqtn5PpZdSTibMnKun3eLo7GRxLP5MvbQyPg59Mw5ls8HPV92UY8LiJqAbC
XvGnNX1+LnrJUeikaRPx+otpHurhi81bXgFPXNgvTvSLQ7U9fJg3Bs6sLTbE
93S+bvL6GtPE7C/DAOxHDi9+58H5PK/iq2+4j1tnmCaKeJ1vvZ+G9S7hKJQo
sioiv4Y82gQ9f9RXN4Y+f4mrbkO9umssUEK/v73FJg88e/6rYDsT0E4OXW9j
A35N83ubkb9rf3Yww16qQ7Eb9VlsJNEa89IB7SlBpsV+4s1FZX3w+bic2Qb4
W89pOGCecfXwy8N6j4/eqqb1M/BfidxiP2k1EyICvTkadB5CPtbbFWxFv+ga
Ls8B/y2XnSWbKf9DY8OVDb9+k825LfuAx2xDxHX6vkPNwxr7lyG2FVPAP3PQ
lQf4I+8KM6rlpZDGl03VwE/9l9N60NuxXW/3Yt4oW/7zCOx3xx2RAZ6S8bVK
/7X0EeGdG93p9/m+S1SA587UzAnsf+O8i7ShH9HCcGvwOWRnPBrD10BaH3tC
fz/Fu2JfHPpv9PgZP+jnwq7j2djv6E75luP7xz0+F3PN6xnVTzDssUQ9f71T
nN7vx607qIf4yn2+yQb7PXW9XlI4b/x4Zb3Y2UpyvIVVFvGa3c68G/WWXTKe
GfnFrty7CD71L9hsoL8vTlxxLW20kXgqxzoLPLJPxoOgz8eKf0+C//0WBjQe
HZ/nDejvZ8aYbydr1ZPjFhvU6H408Jo+v+IeS1eD/wW2Z+ugn1gnb32sV8M3
8VrUcB/xYVimDPmrw+CfBr3x8QzuwH6tNnErM/gR5t+4H3j0+WT3b7JrJz3F
e07DPpR8dBj3ufPn7AVxn+snJHQe8f2zX2lKnFpvUP5M383X40QFq+wu+j3n
3ehr0I+zo2A85oErt8QmUQ+drjyWRry6jd6aMfF0EsQNp/3A7xSm9wj94p33
uCn9+wAvVBlg71OVT7/3GBF5sOrY2QqyqdA2HfWzevHQKV4KT997g+Ooh6FT
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
zZjH5//dcclc
                 "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
           20, "ClassPriors" -> {0.5831062670299727, 0.41689373297002724`}, 
           "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UPAOUC0jI9Mooh8ahXSEAMRWEUU=
            "], "DistributionSmoothing" -> 0.5, "Processor" -> 
           MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Calibrator" -> None, "Method" -> 
           "NearestNeighbors", "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "NeighborsNumber" -> <|"Value" -> 20, "Options" -> <||>|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>,
              "NearestMethod" -> <|
              "Value" -> "KDtree", "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Configurations" -> 
           Dataset[<|<|
               "Value" -> "NearestNeighbors", 
                "Options" -> <|
                 "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                  "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                  "NearestMethod" -> <|"Value" -> Automatic|>|>, 
                "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                "EMIterations" -> 
                Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
             TypeSystem`Assoc[
              
              TypeSystem`Struct[{
               "Value", "Options", "NaiveImputer", "EMIterations"}, {
                TypeSystem`Atom[String], 
                TypeSystem`Assoc[
                 TypeSystem`Atom[String], 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
                TypeSystem`UnknownType, TypeSystem`UnknownType}], 
              TypeSystem`Assoc[
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
               TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
           Dataset[<|
             "Configuration" -> {
               "NearestNeighbors", "NeighborsNumber" -> Automatic, 
                "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic},
               "ModelUtility" -> Missing[]|>, 
             TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType}], 
               TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
           "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
         "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
                7168142382301173801|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
                1978735388468315165|>, 
              "f3" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
                9071588231046195481|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 0.134983, 
           "MaxTrainingMemory" -> 9943640, "DataMemory" -> 178408, 
           "FunctionMemory" -> 186160, "LanguageVersion" -> {14.1, 0}, "Date" -> 
           DateObject[{2024, 8, 10, 13, 29, 0.852652`6.683346804246122}, 
             "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
           "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], ",", 
     RowBox[{"\"\<RandomForest\>\"", "\[Rule]", 
      InterpretationBox[
       RowBox[{
        TagBox["ClassifierFunction",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       ClassifierFunction[<|
        "ExampleNumber" -> 732, "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 3|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f2(f1f3))" -> <|
                 "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                  "NumericalVector"|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.044682, "MaxTrainingMemory" -> 318712,
                     "DataMemory" -> 81824, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 13, 29, 0.901592`6.707585038636257}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                MachineLearning`MLProcessor[
                "Threads", <|
                 "Input" -> <|
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                  "Invertibility" -> "Perfect", "StructurePreserving" -> True,
                   "Missing" -> "Allowed"|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {29.41643893442623}, 
                  "StandardDeviation" -> {14.237916921543757`}, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                  "Output" -> <|
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> {
                   RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                    RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                  "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                MachineLearning`MLProcessor[
                "MergeVectors", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                  "Output" -> <|
                   "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                  7619735631186802745|>]}, "Invertibility" -> "Impossible", 
              "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                MachineLearning`MLProcessor[
                "IntegerEncodeNominalVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                  "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                  2833981340056725226, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|
                   "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                  "Key" -> "f1", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> 
           Identity, "Name" -> "class", 
           "Marginal" -> <|
            "died" -> 0.5831062670299727, "survived" -> 
             0.41689373297002724`|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 4, 3, 1, 3, 4, 1, 1, 2, 2, 1, 1, 1,
                  3, 1, 2, 1, 1, 2}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.6228830986978648, -1.0830280661314227`, 
                0.27693474398837115`, 
                0.46750592685665593`, -0.4843605622648024, 0.4675060146696923,
                 0.07084829523239367, 0.8830263206973292, 
                0.039209731056516706`, -0.7328495521695295, \
-0.7328501620209167, 0.9179311284128477, 
                1.9331748285706283`, -0.5938267507374793, 
                0.46750683076365096`, 0.9539039645108982, 
                0.33869587412716484`, 
                1.0573273357898874`, -0.4218021321650629, \
-0.19707719104694843`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, 4}, {15, -10}, {5, 6}, {-2, 
                 7}, {9, 10}, {-3, 8}, {-4, -11}, {-5, -12}, {11, 12}, {
                 13, -13}, {14, -14}, {-6, -15}, {-7, -16}, {16, -17}, {17, 
                 18}, {19, -18}, {-8, -19}, {20, -20}, {-9, -21}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 
                 2, 1, 1, 1, 1, 2, 2, 2, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 4, 2, 4, 6, 3, 1, 3, 1, 3, 2, 2, 3, 3,
                  1, 1, 5, 4, 4, 1, 1, 1, 1, 2, 1, 4, 4, 1, 1, 2, 2, 4, 2, 4, 
                 3, 1, 1, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA+KGJz9a9Se12L/IrWIO2HnRXuJccl9z8fP9L2aUvPIH
8g2KPVoO+L3e/2Gbh9iZ5Y/tBb6cshEN+bh/x+2b1aLzN+wXcHlQvXPRwf0J
7Tlvl76+az8jYtdMvvDX+3dMYlnWADQnYSF37gKg+IN/6r0LgXTHp/yoZS7/
9r/QszjAdO7f/gV7s0o0D7603zDtxnxfoH0cx6u+yShvsm+YzH43oPvefgXp
Z857qh7s1/C4sris+p99wI0A9pbw+/t/iLaazbR6vz/hkixLq065fcNLZk8f
kP5QNQ1vIB3RIdc7Sfra/oCPrO2bEz7Yb4iX0AWp78i5/a4e6K6MA7U9ogdv
769gaF9hvvaq/QZfax6Q/o7cOB9+oL8y1ESZG++82Z+gNeH3hfhb+zXEd7xg
AIoDAKcook4=
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, -19}, {30, 31}, {5, -20}, {6,
                  7}, {8, -21}, {12, 13}, {-1, 9}, {10, -22}, {-2, 
                 11}, {-3, -23}, {14, 15}, {17, 18}, {-4, -24}, {
                 16, -25}, {-5, -26}, {19, -27}, {22, 23}, {-6, 20}, {
                 21, -28}, {-7, -29}, {24, -30}, {-8, 29}, {-9, 25}, {
                 26, -31}, {27, 28}, {-10, -32}, {-11, -33}, {-12, -34}, {-13,
                  32}, {-14, 33}, {-15, -35}, {34, -36}, {35, 36}, {37, 
                 38}, {-16, -37}, {-17, -38}, {-18, -39}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 
                 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 
                 2, 1, 2, 2, 2, 1, 2, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 3, 2, 4, 6, 4, 1, 2, 3, 4, 4, 4, 1,
                  3, 4, 4, 4, 1, 2, 4}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.9867751866936878, -1.0830280661314227`, 
                0.4675078812592419, -0.19707643427206079`, \
-0.43365929771041145`, -0.853362665892921, 
                0.27693584301090857`, -1.193386070991954, -0.7328500127155717,
                 0.46750641820500993`, 0.070848283935245, 0.276935062954065, 
                0.07084840676504334, -0.03312310883394648, \
-0.06492727142553079, -0.4336586451345079, 
                0.17389226323590123`, -0.4336604603175318, \
-0.5898296260731071, -0.9759032256349229, -0.43365985939588514`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {6, -13}, {-1, 
                 10}, {7, 8}, {9, -14}, {-2, -15}, {-3, -16}, {11, 12}, {-4, 
                 13}, {16, -17}, {-5, 14}, {
                 15, -18}, {-6, -19}, {-7, -20}, {-8, 19}, {-9, 
                 20}, {-10, -21}, {-11, 21}, {-12, -22}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 
                 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 4, 4, 1, 3, 1, 4, 4, 2, 1, 3, 1, 1, 2,
                  1, 2, 1, 2, 1, 6, 5, 2, 1, 3, 1, 4, 2, 1, 1, 1, 5, 1, 5, 5, 
                 5, 6, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJwBPQHC/iFib1JlAQAAACYAAABor/EkvU7rv+DrqiASwdu/GLhI8BlCxj/Y
2pVQ6KbGv/ji5lSl690/MBmABiF3/L/YRQw8TrnRP+DBrbsYQsY/CJHp+IBz
57/AX0dQR3Xov6BHAvui690/QCdu3/3R87+AUIQKSOzjv7Dxu2k4rdU/EG8Q
GrFf7T84a4usf3Pnv6BWgxm2Ec+/+BnZIIJz578Ik6iajOLTv2DNY0F0/Nq/
CJIniKyT7z/IoRJSNq3VPyAN9BOcf/4/4Oj8UMqn4z9YJZ0kAGDwP2CvkEwy
I7I/wM/Tgpo677843pwH2iH0v5D1K5DfCO2/GN2m73KWwL9ggT8/rJPvP7Br
mHfKi8Y/WLL236mT7z+IQOPHqZPvP2hvpEeqk+8/WJqVkmKShD9wYtRk7yzh
P6hsvWbZjvs/BjOo8A==
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {-1, -19}, {6, 
                 7}, {8, 9}, {17, -20}, {-2, -21}, {10, 11}, {12, 13}, {14, 
                 15}, {-3, -22}, {-4, -23}, {16, -24}, {-5, -25}, {-6, -26}, {
                 18, -27}, {19, -28}, {-7, -29}, {22, 23}, {28, 29}, {
                 24, -30}, {26, 27}, {-8, 
                 25}, {-9, -31}, {-10, -32}, {-11, -33}, {-12, 
                 30}, {-13, -34}, {31, 32}, {33, -35}, {35, 36}, {
                 34, -36}, {-14, -37}, {-15, -38}, {-16, 37}, {-17, 
                 38}, {-18, -39}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 
                 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 
                 2, 1, 2, 1, 2, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 5, 6, 4, 5, 1, 4, 1, 1, 4, 1, 1, 1, 4,
                  2, 3, 1, 3, 4, 3, 3, 2, 1, 2, 4, 4, 1, 3}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.07084973067207523, 
                0.6228830986978648, -0.8533615864194539, -0.4336592816997582, 
                0.9867760606256164, -0.09902673287024677, \
-0.4336586451345079, -0.41664361652132653`, -1.2205456019706773`, \
-0.4336585737025418, 
                0.18076740780557188`, -0.47883041804511794`, \
-0.5190404014558894, -0.4336604603175318, 0.3386962165636529, 
                0.46750785285866625`, 0.9217679982644835, 
                0.46750675135493047`, 0.276934787055783, -0.06492710227588205,
                 0.46750726633413864`, -0.7328505562622762, \
-1.2599947493017911`, -0.73284927425403, 0.27693590901140386`, 
                0.07084980571195953, 0.011822972107396412`, 
                0.46750635051370937`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, 7}, {
                 14, -15}, {8, -16}, {-1, 9}, {-2, -17}, {-3, 10}, {-4, 11}, {
                 12, -18}, {13, -19}, {-5, -20}, {-6, 15}, {-7, -21}, {
                 18, -22}, {21, -23}, {19, -24}, {20, -25}, {-8, -26}, {22, 
                 23}, {-9, 24}, {-10, -27}, {-11, 25}, {26, 27}, {-12, 
                 28}, {-13, -28}, {-14, -29}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 
                 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 1, 4, 2, 4, 4, 1, 2, 4, 1, 1, 1, 3, 4,
                  3, 1, 2, 2, 4, 1, 1, 1, 1, 1, 3, 2, 2, 3, 1, 3, 2, 2, 3, 2, 
                 6, 6, 3, 4, 1, 6, 1, 1, 1, 5, 1, 1, 1}], 
               "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBhQF6/iFib1JlAQAAAC8AAAAIsir1vE7rv1hg/sqegfG/kNng/RlCxj8w
dTtlgHPnv9jipOpSudE/GKhhoEy50T/o+OxY8U7IPyhDx59/c+e/+BlQ5BbB
278goZ5bjdnGv9j7K1zZs+u/2NqVUOimxr8YjdanoOvdPwDPm9lNudE/gLJu
KKPr3T+o7c77Jfviv1ArNteZOu+/KHZjwoJz57+wOYQbhw+0v6BWgxm2Ec+/
KKTnFez9479wQvBKWtvgv/ioHuLgeNq/UNhQB4RX37+ofdRqy6fjP4BUb7d/
c+e/AGnBr4Fz579IF2D3oevdP+CHxrikM7Q/OKHhLqTr3T+oGgTXmzrvvyA7
HTWCc+e/eBfsyqPr3T9oZl7oOK3VP6CEif3VkoQ/QCBlP3T82r+A3dj5AJ+w
v2DRL8sXwdu/EJQD07EK879gx8pDxJKEP8hhCdClDO2/yIh/ola73r/4rFWE
fdvhv7DNEbCqk+8/EI6chUngxD9wnPh7Q7/cv2j9WbaGneG/Mdnb0Q==
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {34, 35}, {6, -24}, {
                 7, -25}, {-1, -26}, {8, 9}, {10, -27}, {-2, 31}, {11, 
                 12}, {-3, 13}, {-4, 25}, {-5, 14}, {15, 16}, {-6, 17}, {21, 
                 22}, {-7, 18}, {19, -28}, {-8, 
                 20}, {-9, -29}, {-10, -30}, {-11, 23}, {
                 24, -31}, {-12, -32}, {26, -33}, {27, -34}, {28, -35}, {-13, 
                 29}, {30, -36}, {-14, -37}, {-15, 32}, {-16, 
                 33}, {-17, -38}, {36, -39}, {40, 41}, {-18, 37}, {-19, 38}, {
                 39, -40}, {-20, -41}, {42, -42}, {-21, 45}, {43, -43}, {
                 44, -44}, {-22, -45}, {46, -46}, {47, -47}, {-23, -48}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 
                 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
                 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 1, 4, 4, 6, 1, 2, 4, 1, 1, 2, 4, 6, 2,
                  1, 2, 1, 6, 3, 3, 1, 1, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.010044451976783941`, -1.9252955921719437`, 
                0.17389225860979396`, 0.1738929549901027, -0.8533623807157751,
                 1.414084459505263, -0.9759038197665584, -0.4336590702721579, 
                0.2096898166977108, 1.0349389541056269`, 0.33869695845199255`,
                 0.27693631100374905`, -0.8533621630225205, \
-0.7328496545823766, -0.026772611529284118`, -0.7328497310555617, \
-0.5577906202375216, -0.8533620161819844, 
                0.4675062399910619, -0.06492620164507612, \
-1.9958467993820435`, -0.2730622044387463, 
                0.039127912816490196`, -0.07270767300486969}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {-1, -11}, {6, 
                 7}, {8, -12}, {-2, 11}, {9, -13}, {-3, 10}, {-4, -14}, {
                 12, -15}, {13, -16}, {14, 15}, {16, -17}, {-5, 18}, {
                 17, -18}, {-6, -19}, {19, -20}, {-7, -21}, {
                 22, -22}, {-8, -23}, {-9, 23}, {24, -24}, {-10, -25}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 
                 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1}], "RootIndex" -> 1,
                "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 5, 2, 1, 4, 4, 1, 1, 4, 1, 6, 1, 5, 5,
                  2, 3, 3, 2, 1, 1, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 4, 1, 
                 3, 1, 1, 1, 1, 4, 3, 3, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJwBZQGa/iFib1JlAQAAACsAAABAm1WjICOyPwD+mYSo7uM/AJy65jet1T+A
gxhdOhzwv5CkCgwXwdu/qGumNBPB2794OtNIa3bdP0jWDAfiD8M/MAkM1x4j
sj/4V/7V4BjGv8jAv+5hkoQ/IKGeW43Zxr/A4yINKcHpP2BRa46pk+8/+CaI
IYFz57+AEYA+pevdPzD4lc+l690/iIfO+n9z579oR+Nftx/Wv1i88Jrm1P6/
QDaWJKju4z/AEccFTYjTv8BqR0jQ0OC/cO9Cavi/4r9AJ27f/dHzvwCJsVBZ
HPK/OAD03Z7r3T8go3Xl2XnRv2gjXaXMbOe/aFznFAV/8784x+2cpOvdP7jU
9zAjDaG/0HjZTUy50T/APXjyeEeev1jh/cbew8k/cBC566xRyD8Y7a3ctyTH
P4g9cRgGW+Q/qHvBq/905T8IN8qEJiOyP3CLfosCn7C/MJvoRQCfsL8g810+
HBTuv4PJu6M=
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, 
                 6}, {-2, -23}, {-3, 7}, {8, -24}, {9, -25}, {-4, -26}, {12, 
                 13}, {43, -27}, {14, 15}, {32, 33}, {16, 17}, {-5, 31}, {
                 18, -28}, {27, -29}, {19, 20}, {21, 22}, {-6, -30}, {
                 23, -31}, {-7, -32}, {24, -33}, {25, -34}, {-8, 
                 26}, {-9, -35}, {28, 29}, {-10, -36}, {
                 30, -37}, {-11, -38}, {-12, -39}, {-13, 34}, {40, -40}, {-14,
                  35}, {-15, 36}, {37, 38}, {-16, -41}, {-17, 
                 39}, {-18, -42}, {-19, 41}, {-20, 
                 42}, {-21, -43}, {-22, -44}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 
                 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 
                 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 3, 3, 4, 1, 4, 1, 1, 4, 4, 3, 3, 1, 4,
                  2, 4, 4, 6, 1, 3, 4, 1, 3, 2, 4}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.6228830986978648, 
                0.4675077280650535, 0.4675060559516009, 
                0.07084828291384038, -0.13589950831640119`, 
                0.2769350591783577, -1.258350214815918, -1.5055136396380604`, 
                0.27693482010987713`, 0.07084879412342293, 0.467506909619984, 
                0.4675078819480065, 
                1.5523934734396398`, -0.4336591832442229, \
-0.9759038008647272, -0.43365907204461607`, 0.07084865017542119, 
                0.010044545492499599`, -0.24611279989017287`, \
-0.06492718142465526, 
                0.07084885351124737, -0.1431388066610042, \
-0.06492704424808349, -0.9759035135141811, -0.07836204020219018}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {-1, 6}, {12, 
                 13}, {7, 8}, {-2, 9}, {-3, -18}, {10, -19}, {-4, 
                 11}, {-5, -20}, {-6, 14}, {15, -21}, {-7, -22}, {-8, 
                 16}, {-9, -23}, {-10, 19}, {24, 25}, {-11, 20}, {-12, 
                 21}, {-13, 22}, {-14, 
                 23}, {-15, -24}, {-16, -25}, {-17, -26}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 
                 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 
               1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 5, 4, 2, 3, 4, 3, 2, 3, 4, 1, 1, 1, 6,
                  1, 4, 3, 3, 1, 3, 1, 1, 4, 1, 3, 3, 4, 4, 1, 1, 1, 6, 2, 2, 
                 2, 2, 4, 3, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+IJfhM0TCe12J94Nefz0neP7RVcvnyTdDpmv0KK5fps
q/f7JWaLLD69/LH9imvvIoJ3XrQPiPz4ZfHru/YXPvrsqS9+vv/EkQC2U0B5
hcOPDuoqb7J/EVSi7X3r6n6N2T/EKsS+7K/Yvtwq/e6T/RPOVaoe8Hu9f8d9
9pSjQs/2X2jYKgwyb0flvEyQeT/c+b4tANIKix7X9m79sv9CT2CF0PwN+yNu
roidGPxr/wv/T3PlHn3cz1CjXioNdF/F0gfKlXte7t9x+2a1KFBdQ+azJSD9
ETdFxcUP3t7/Y/FqYz+g+Rxfmo6/qXxn/+IWq8PBysv7C767fy+9/cB+xr+n
pXuB7umY2G4xE+jPgs0RzMZrr9on3It6agSkFyxSqDQE0R5PTZWA/iq4k2YB
CocOd95btzKe7wcAK9exlA==
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {33, -22}, {-1, 6}, {13, 
                 14}, {7, -23}, {8, 9}, {-2, 10}, {-3, 12}, {
                 11, -24}, {-4, -25}, {-5, -26}, {15, 16}, {-6, 31}, {
                 17, -27}, {25, -28}, {18, 19}, {20, 21}, {-7, -29}, {-8, 
                 22}, {-9, 24}, {23, -30}, {-10, -31}, {-11, -32}, {-12, 
                 26}, {-13, 27}, {-14, 28}, {-15, 29}, {
                 30, -33}, {-16, -34}, {-17, 32}, {-18, -35}, {-19, 34}, {
                 35, -36}, {36, -37}, {37, -38}, {38, 
                 39}, {-20, -39}, {-21, -40}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 
                 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
                 2, 2, 1, 1, 2, 1, 2, 2, 1}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 3, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 3,
                  3, 5, 3, 3, 4, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.010044550513895856`, 
                0.6142330139110204, -0.43366023976920554`, 
                0.27693628615536436`, 
                0.27693609793808305`, -0.205460646672337, \
-1.0830280661314227`, 0.46750617522488147`, 
                0.46750640225573115`, -1.1723842471713546`, \
-1.4346334434421664`, 0.27693598065683345`, 
                0.2769360899224993, -0.06492704751718037, 0.4675062170055426, 
                0.6228822933994342, 0.4675071598271705, 0.4675076723471454, 
                0.2769360115539823, 0.04521426778346649}, "Children" -> 
               RawArray["Integer16",{{2, -12}, {3, -13}, {-1, 4}, {5, 6}, {
                 7, -14}, {-2, 20}, {8, 9}, {-3, 10}, {12, 13}, {
                 11, -15}, {-4, -16}, {14, -17}, {17, -18}, {-5, 15}, {-6, 
                 16}, {-7, -19}, {-8, 18}, {-9, 19}, {-10, -20}, {-11, -21}}],
                "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 
                 2, 2, 1, 2, 1, 2, 2, 1, 2, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 4, 6, 1, 4, 1, 2, 4, 1, 1, 4, 4, 2, 3,
                  3, 1, 1, 2, 3, 1, 1, 2, 6, 3, 2, 2, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.6228830900071785, -0.4336593641434612, 
                0.010044550513895856`, -0.17696861204941317`, 
                0.27693479882155536`, 1.1000961173062258`, 
                0.3386974225040289, -0.4336590965202234, -0.9391865752353539, \
-0.10057509511750906`, 0.27693468235373997`, 0.2769346715100989, 
                0.33869654893071255`, 
                0.6142331770281144, -0.06492661941781541, \
-0.7652632518607279, -0.47831483435834654`, -0.732848985930687, 
                0.46750644199379243`, -0.16728808935763761`, \
-1.0482480135103032`, -0.7328508168270131, -0.42165883381105873`, \
-0.06492686434381367, -0.9759031182065794, -0.7328494978307409, \
-0.4336599227890532}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {-1, 6}, {
                 7, -16}, {-2, -17}, {8, 9}, {10, 11}, {-3, 20}, {-4, -18}, {
                 12, -19}, {13, -20}, {14, -21}, {15, 16}, {17, 
                 18}, {-5, -22}, {-6, -23}, {-7, 
                 19}, {-8, -24}, {-9, -25}, {-10, 23}, {25, 26}, {-11, 
                 24}, {-12, -26}, {-13, 27}, {-14, -27}, {-15, -28}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 
                 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{2, 6, 5, 2, 3, 3, 1, 5, 1, 3, 6, 4, 3, 1,
                  2, 1, 1, 3, 4, 4, 1, 3, 4}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.975903251619914, \
-0.4216585507061601, 0.9867751866936878, 0.33869654893071255`, 
                0.4675060559516009, 
                0.46750678988839267`, -1.2205456019706773`, 
                0.6228815197768558, -0.670406617545324, 
                0.46750614359264286`, -0.8533623983977714, 0.2769360188627741,
                 0.46750657179326227`, -1.8584461530541319`, \
-0.7328492403480427, -1.3590067945787716`, 
                0.809415220732439, -0.06492676517700346, -0.07836208071589013,
                 0.0708491759647486, -0.06407311173606611, \
-0.06492617618422514, 0.17389247437200672`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, -14}, {4, 5}, {6, 7}, {18, 
                 19}, {8, 9}, {-2, 17}, {10, 11}, {15, -15}, {-3, -16}, {
                 12, -17}, {13, -18}, {14, -19}, {-4, -20}, {-5, 
                 16}, {-6, -21}, {-7, -22}, {-8, 20}, {-9, -23}, {-10, 
                 21}, {-11, 22}, {-12, 23}, {-13, -24}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 
                 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 4, 2, 6, 4, 2, 6, 6, 5, 1, 6, 2, 5, 4,
                  4, 3, 1, 2, 1, 1, 3, 3, 1, 4, 1, 1, 1, 5}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.07084850871621573, -0.43365890102175486`, 
                0.33869740401457893`, -0.8533617087743046, \
-0.4336586857587603, -0.9759031862908518, -0.8533618237097222, \
-0.8533628643892719, 
                0.622882606007745, -1.930155263405867, -0.8533618197565387, \
-0.7328492084200686, 0.8048291497217539, 0.2769344283646853, 
                0.2769348214704235, -0.0649274279947879, 0.531251128900303, 
                0.33869711412558656`, -0.2730622044387463, 0.640594913007285, 
                0.4675077941136605, -0.06492703106648079, \
-0.029355449690584484`, 0.1738916758793012, 1.5201865524974476`, 
                0.039127912816490196`, -1.8264375835266815`, 
                0.9867753516475855}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, -16}, {-2,
                  6}, {7, 8}, {-3, -17}, {-4, 9}, {-5, -18}, {12, 13}, {-6, 
                 28}, {-7, -19}, {14, 15}, {16, -20}, {19, 20}, {17, 
                 18}, {-8, -21}, {-9, -22}, {21, 22}, {
                 27, -23}, {-10, -24}, {-11, 23}, {24, 25}, {-12, -25}, {
                 26, -26}, {-13, -27}, {-14, -28}, {-15, -29}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 
                 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 4, 2, 1, 4, 3, 1, 3, 3, 1, 2, 1, 1, 1,
                  3, 2, 3, 4, 4, 2, 3, 2, 3, 1, 3, 4, 2, 1, 1, 2, 2, 4, 4, 2, 
                 2, 1, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.9867752040476727, -0.4336591758052153, -0.9759031182065794, \
-1.4351541239032208`, 0.17389210857392268`, 
                0.467506908340261, -1.4700567577118608`, -0.06492702012219964,
                 0.46750695170241396`, -0.47831483435834654`, \
-0.7328503447299122, 
                0.813090571885617, -0.034397539921824816`, \
-0.029632158909821765`, 0.4675071183430748, -0.7328488641417312, 
                0.46750726930762054`, 0.2769362505722901, 
                0.27693589403906893`, -0.975904598097391, 
                0.4675076723471454, -0.7328507312708457, 0.6142333469999874, 
                0.005914294665262443, 0.4675066535657795, 
                0.07084975414040007, -0.7328503890570062, \
-0.06776716461368626, -0.4170593206811133, -0.7328502092219482, \
-0.7328499325718862, 0.27693494474728153`, 0.2769360193836352, 
                0.3386975740030316, -0.7328507437223726, 0.7394879712125588, 
                0.540869885077977}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 25}, {5, 6}, {-3, 
                 7}, {8, 9}, {-4, -23}, {10, 11}, {-5, 15}, {-6, 
                 12}, {-7, -24}, {13, -25}, {-8, 14}, {-9, -26}, {-10, 16}, {
                 17, -27}, {-11, 18}, {19, -28}, {20, -29}, {-12, 21}, {-13, 
                 22}, {23, -30}, {-14, 24}, {-15, -31}, {26, 27}, {-16, 28}, {
                 35, -32}, {29, 30}, {31, -33}, {-17, 33}, {-18, 
                 32}, {-19, -34}, {34, -35}, {-20, -36}, {36, -37}, {-21, 
                 37}, {-22, -38}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 
                 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
                 1, 2, 2, 2, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 3, 3, 6, 1, 2, 1, 2, 2, 3, 3, 1, 3,
                  1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.986775179899686, -1.4055035965028804`, 0.46750694416233607`,
                 0.467506908340261, -0.42165816857226446`, \
-1.5429388948426777`, -0.7328493164482319, 
                0.18427302793644063`, -0.7328496667248041, \
-0.7328503372344892, -0.06492702012219964, 
                0.4675062148388931, -0.027681836772390667`, 
                0.4675069562978349, -0.2728723776199167, 
                0.5027904934313678, -0.9759031192887155, 1.3031795733150684`, 
                0.04333215606086227, -0.10189820125457238`}, "Children" -> 
               RawArray["Integer16",{{2, -12}, {3, 4}, {5, 6}, {8, 9}, {
                 7, -13}, {-1, -14}, {-2, -15}, {10, -16}, {14, 15}, {-3, 
                 11}, {-4, 12}, {-5, 13}, {-6, -17}, {-7, 16}, {-8, 19}, {-9, 
                 17}, {18, -18}, {-10, -19}, {20, -20}, {-11, -21}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                 2, 1, 2, 2, 1, 2, 1, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> RawArray["Integer16",{6, 4, 4, 3, 1, 1, 1}],
                "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.4216586080567035, \
-0.4336593641434612, 0.17389225860979396`, -0.06492620563300555, 
                0.640594913007285, 1.5201865524974476`, 1.0886153829828924`}, 
               "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, -5}, {4, 5}, {6, -6}, {-2, 
                 7}, {-3, -7}, {-4, -8}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{2, 6, 3, 6, 3, 1, 3, 5, 6, 6, 2, 4, 1, 3,
                  5, 1, 1, 3, 6, 2, 1, 4, 5, 5, 6, 3, 1, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.9759032188340324, \
-0.4216586952045005, -0.0649266915653125, 
                0.010044493961721274`, -0.06492615078469988, \
-1.2631886689429006`, 0.4675059583903671, 
                0.8048292431857655, -0.8533616890632976, 
                0.0100448781856812, -0.7328499350207629, 
                0.0708494710479014, -1.4346334434421664`, 
                0.46750757075033356`, 
                0.8048296575482574, -0.6978887599875483, -1.4700567577118608`,
                 0.46750616187471383`, -0.8533632153995203, \
-0.7328503974682112, 0.1437892577939237, 0.2769356789711668, 
                0.6228827401878911, 0.9867768722158985, -0.8533632018732877, 
                0.4675060225388865, 0.640594913007285, -0.43365988701484737`},
                "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, -15}, {4, 5}, {-2, -16}, {6,
                  7}, {-3, 8}, {9, 10}, {-4, -17}, {11, -18}, {13, 14}, {-5, 
                 12}, {-6, -19}, {15, 16}, {27, 28}, {17, -20}, {18, 
                 19}, {-7, -21}, {-8, -22}, {20, 21}, {22, -23}, {23, 
                 24}, {-9, -24}, {-10, -25}, {25, -26}, {-11, 
                 26}, {-12, -27}, {-13, -28}, {-14, -29}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 
                 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> RawArray["Integer16",{5, 1, 5, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.986775179899686, -1.0830280661314227`, 0.6228829716890312, 
                0.1738923710070306}, "Children" -> 
               RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {-1, -5}}], 
               "LeafValues" -> RawArray["UnsignedInteger8",{2, 2, 1, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{2, 5, 4, 1, 5, 6, 1, 3, 3, 1, 1, 4, 4, 5,
                  3, 1, 6, 5, 1, 1, 1, 6, 3, 5, 4, 2, 1, 3, 2, 2, 1, 2, 2}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.9759029790363591, 
                0.6228830986978648, 0.2769358307375356, -1.4010280019307348`, 
                0.986776841210486, 0.01004477943772647, -2.006067379130524, 
                0.46750669398505895`, -0.06492712296450631, \
-1.1494113215297954`, -1.4066411939699694`, 0.17389243336126015`, 
                0.07084828291384038, 0.8048293374794646, 0.20129023816553082`,
                 0.13867787718997926`, -0.8533625957938735, 
                0.6228818712597031, -1.944543129621616, -1.6429489379778577`, \
-0.6984176882593198, -0.853363463569039, 0.4675072821412627, 
                0.6228825439945016, 
                0.2769357277389686, -0.7328507070900923, \
-0.09585282610121126, -0.06492709379225092, 
                0.338696326763432, -0.7328489490087842, 
                0.16309470199586018`, -0.7328503468580969, -0.73284939918973},
                "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, 4}, {6, 7}, {-2, 
                 5}, {-3, -22}, {8, 9}, {-4, -23}, {10, 11}, {-5, 26}, {12, 
                 13}, {17, 18}, {-6, -24}, {-7, 14}, {-8, 15}, {
                 16, -25}, {-9, -26}, {19, -27}, {21, 22}, {-10, 
                 20}, {-11, -28}, {-12, -29}, {-13, 23}, {24, 
                 25}, {-14, -30}, {-15, -31}, {-16, 27}, {28, 29}, {-17, 
                 30}, {31, -32}, {-18, -33}, {-19, 32}, {-20, 
                 33}, {-21, -34}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 
                 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 
                 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 5, 4, 1, 1, 3, 4, 5, 1, 3, 3, 6, 1, 3,
                  5, 6, 3, 1, 5, 5, 1, 1, 4, 3, 4, 1, 1, 1}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.0100445645256632, 
                0.6228813253057686, 0.17389225538548292`, -0.3057496280595977,
                 1.37647935656444, 0.4675076515018186, -0.4336589790469749, 
                0.6228827526870964, -0.13225084146351862`, 
                0.46750785230211456`, -0.0649270455242833, \
-0.8533618248437875, -1.4346334434421664`, 0.4675065349595853, 
                0.6228813623753178, -0.8533628482190165, 0.4675060101810966, 
                0.6036215747265734, 0.622882911165739, 0.6228829621618432, 
                1.9061547069002884`, -0.12901926256930119`, \
-0.4336604603175318, 0.2746528866696045, 
                0.07084955112813884, -0.1674477576249198, \
-0.31234720028845686`, 1.8242878011933108`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {6, -17}, {7, 
                 8}, {-1, -18}, {9, 10}, {-2, 20}, {-3, -19}, {11, -20}, {12, 
                 13}, {-4, -21}, {-5, 14}, {15, 16}, {-6, 17}, {18, 
                 19}, {-7, -22}, {-8, -23}, {-9, -24}, {-10, -25}, {23, 
                 24}, {-11, 28}, {-12, 25}, {-13, -26}, {-14, 26}, {
                 27, -27}, {-15, -28}, {-16, -29}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 
                 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 3, 2, 1, 3, 2, 2, 3, 2, 2, 1, 1, 3, 2,
                  1, 1, 4, 3, 2, 3, 4, 1, 3, 1, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.4216585768292216, 
                0.4675076723471454, -0.7328508168270131, -1.777664665376161, 
                0.4675076888519403, -0.732850334401915, -0.732849629649448, 
                0.20129013429141684`, 0.3386967349899739, -0.7328492400997568,
                 0.18076740780557188`, -0.47883041804511794`, \
-0.06492689955433528, -0.7328491599991054, 0.18541213558456526`, 
                0.9171984086590026, -0.43366024081204424`, 
                0.6142336639969646, -0.7328497826366434, 0.6142330139110204, 
                0.2769347680671781, -1.404619704690191, 0.6142320582849949, 
                2.3205863728167504`, 0.2012901573902517}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {6, 7}, {-1, 
                 17}, {-2, 8}, {-3, 9}, {-4, -16}, {10, 11}, {-5, 12}, {-6, 
                 15}, {13, -17}, {-7, 14}, {-8, -18}, {-9, 
                 16}, {-10, -19}, {-11, 18}, {19, -20}, {20, -21}, {
                 21, -22}, {22, -23}, {-12, 
                 23}, {-13, -24}, {-14, -25}, {-15, -26}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 
                 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1}], "RootIndex" -> 
               1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 2, 2, 2, 4, 3, 4, 1, 4, 4, 1, 4, 3, 3,
                  1, 4, 4, 1, 3, 4, 1, 1, 2, 4, 1, 3, 4, 1, 1, 1, 2, 1, 2, 2, 
                 2, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.42165858370961296`, \
-0.7328497202332418, -0.7328503890570062, -0.7328497379263483, 
                0.07084828291384038, 
                0.46750594893883735`, -0.4336590965202234, 
                0.39159309598517966`, 0.27693636299135527`, 
                0.2769358330354632, 0.07870712891945619, 0.2769358148242782, 
                0.4675063915702271, 0.4675076066150874, -1.0068915974190702`, 
                0.2769347825092803, 
                0.27693487707742026`, -1.9269777347906452`, 
                0.20129038562098533`, 
                0.27693601527284173`, -0.4843605622648024, \
-0.5190404014558894, -0.7328489656459629, 
                0.07084916964895083, -1.2205456019706773`, 0.4675078134187389,
                 0.2769346715100989, -0.8385908435385891, \
-0.8079900245339298, -0.598112305563709, -0.7328490891626567, 
                1.6910857049490104`, 0.3386976498819423, 
                0.33869587412716484`, -0.7328489439435844, 
                0.20129001519619583`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 31}, {6, -20}, {-2, 
                 18}, {-3, 7}, {-4, 8}, {9, -21}, {10, -22}, {11, -23}, {12, 
                 13}, {14, -24}, {-5, 17}, {-6, 15}, {-7, 
                 16}, {-8, -25}, {-9, -26}, {19, 20}, {-10, -27}, {21, -28}, {
                 22, 23}, {24, -29}, {-11, -30}, {25, 26}, {-12, -31}, {
                 27, -32}, {-13, 28}, {-14, 29}, {-15, 30}, {-16, -33}, {-17, 
                 32}, {33, -34}, {34, -35}, {35, -36}, {-18, 
                 36}, {-19, -37}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 
                 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 
                 2, 1, 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 2, 2, 1, 1, 2, 3, 1, 1, 4, 2, 4, 1, 2,
                  3, 4, 2, 2, 1, 1, 2, 1, 2, 4, 1, 4, 1, 3, 1, 1, 2, 3, 2, 1, 
                 1, 1, 3, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAuID9SJ8mgdf2gfway6eZfV+f8VN0c7m4uf7A1TWaad8
+7Z/x9Lz6yRe/d8/oXufWSNQnMHudM79wyftM6od5s09/nM/Q1vppU6Hf/sn
qEe0++68aP/hbHJ3E1Bdxq06KzGnY/YXtl8olTb4sd/BINYGpP+D5F3OZa/v
2mu0zRMIBKr/8S39Oki9xsmOPyDa4ai15uEvt+xn3J+efTlqt33HXudpM4Hu
kvh44HuN6Nv9L25VeYDclzBl/iJ55U32DmdtH7FV39nf4Vh/Jwho3oL7v1Mi
uvba77h9s1p0/ob9AutFGBj2Pbf3OBT9lPf2y/0FYmu5G4D6BeoD384DumMC
Y8hO87VX7QWqDefsS/u/X2Fx6dOblRf3T7iU7cqveWo/R4pk5AOQf38+i1vM
ssw+Q0HM8YPGl/0LrG/3bzf8tX8F05w5WivuAMMnc5HFqwf7AQ81uFc=
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 32}, {5, 6}, {7, 
                 8}, {14, 15}, {-3, -20}, {9, 10}, {11, -21}, {
                 12, -22}, {-4, -23}, {-5, 13}, {-6, -24}, {16, -25}, {
                 24, -26}, {17, -27}, {18, -28}, {19, -29}, {20, -30}, {
                 21, -31}, {-7, 22}, {-8, 23}, {-9, -32}, {25, 26}, {-10, 
                 27}, {28, -33}, {-11, -34}, {29, 30}, {-12, -35}, {
                 31, -36}, {-13, -37}, {33, 34}, {35, -38}, {-14, 39}, {-15, 
                 36}, {-16, 37}, {38, -39}, {-17, -40}, {40, 
                 41}, {-18, -41}, {42, -42}, {-19, -43}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 
                 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 
                 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 2, 4, 2, 6, 4, 1, 1, 3, 4, 6, 2, 6, 4,
                  3, 1, 2, 1, 3, 2, 3, 2, 1, 3, 2, 1, 3, 1, 3, 1, 1, 6, 6, 2, 
                 1, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.010044494981569035`, 
                0.3386971109784609, 
                0.17389226001159042`, -0.9759042316782782, \
-0.8533633006692352, -0.43365987803279715`, 
                1.6245581792264723`, -1.8196661349210892`, 
                0.20128975912554647`, 
                0.27693636299135527`, -0.8533615811161654, \
-0.7328495521695295, 0.01004444534305815, 
                0.2769361045141303, -0.06492742687518316, \
-0.5572751960833271, -0.7328497826366434, -0.30901763578920605`, 
                0.6142329299422018, -0.7328504656937289, 
                0.4675076863750931, -0.8543769400999857, -0.243336782186798, 
                0.5408699227330329, -0.9759036211076566, 0.98007626456097, 
                0.4675078379701323, 1.086690807192502, 0.46750715916893215`, 
                0.07199815374081042, -1.1520034993155015`, \
-0.8533617125225312, -0.853361645352865, 
                0.3386957909792687, -0.10093360108177629`, \
-0.2730622044387463, -0.5285914585223157}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {34, 35}, {-1, 6}, {-2, 
                 30}, {7, 8}, {-3, -20}, {9, 10}, {-4, -21}, {11, -22}, {12, 
                 13}, {14, 15}, {29, -23}, {16, -24}, {-5, 26}, {17, 18}, {
                 19, -25}, {-6, 23}, {20, -26}, {21, -27}, {-7, 
                 22}, {-8, -28}, {24, 25}, {-9, -29}, {-10, -30}, {27, 
                 28}, {-11, -31}, {-12, -32}, {-13, -33}, {31, -34}, {-14, 
                 32}, {-15, 33}, {-16, -35}, {-17, 36}, {
                 37, -36}, {-18, -37}, {-19, -38}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
                 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 
                 1, 1, 1, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 2, 2, 1, 2, 1, 1, 1, 1, 2, 4, 1, 1, 2,
                  4, 1, 2, 1, 2, 1, 4, 4, 6, 5, 1, 6, 5, 1, 1, 1, 3, 1, 2, 1, 
                 2, 2, 2}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.8533615811161654, \
-0.9759037406186106, -0.7328505096908513, 
                0.5027904934313678, -0.7328489656459629, 0.3214495452666215, 
                1.304342394805774, -0.17696861204941317`, 
                0.19887817473019576`, -0.732848985930687, 
                0.07084916964895083, -0.17651908921785986`, \
-0.1922254618487227, -0.7328492567308205, 
                0.2769352559149394, -0.5900635229719242, -0.7328506364830067, \
-0.7688793627323749, 0.338697328720698, -1.5434208602281334`, 
                0.07084914883383486, 0.2769348127619602, 
                0.010044917459526279`, 0.8048293661697814, -0.629843773237984,
                 0.010046210671181055`, 0.8048288887675312, 
                0.039127912816490196`, -0.10547192397822958`, \
-1.2520674256184865`, -0.0649259405586694, -1.9950402279585742`, \
-0.7328504431315608, -0.4868048653531991, -0.7328489933505216, \
-0.19707638003802663`, -0.1970766078919579}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {6, 7}, {10, 
                 11}, {8, -21}, {-1, -22}, {-2, 9}, {-3, -23}, {12, -24}, {-4,
                  19}, {13, -25}, {14, -26}, {15, 16}, {17, 
                 18}, {-5, -27}, {-6, -28}, {-7, -29}, {-8, -30}, {-9, 22}, {
                 25, 26}, {-10, 23}, {24, -31}, {-11, -32}, {-12, 27}, {30, 
                 31}, {-13, 28}, {29, -33}, {-14, -34}, {32, 33}, {-15, 
                 37}, {-16, -35}, {-17, 34}, {35, 
                 36}, {-18, -36}, {-19, -37}, {-20, -38}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 
                 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 
                 2, 2, 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{3, 5, 5, 1, 1, 4, 4, 1, 1, 2, 3, 6, 4, 2,
                  1, 4, 4, 1, 4, 1, 4, 3, 2, 3, 3, 3, 2, 2, 1, 1, 4, 4, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.6142324138807282, 
                0.9867751866936878, 0.622882046331001, 0.3910520658809804, 
                0.18541213558456526`, 
                0.27693636299135527`, -0.4336593232917427, 
                0.8150231272091206, -1.0513217244778001`, \
-0.19707649332150323`, 0.614232214145229, -0.8533625171852899, 
                0.276935062954065, 0.3386974094369619, 0.8793604192369937, 
                0.27693482010987713`, -0.18140494494404003`, \
-0.10298214031327813`, 0.07084879763859608, -0.5844551884982359, 
                0.07084933831151319, 0.467506138564207, -0.7328503890570062, 
                0.5408699240589749, 
                0.4675072795752899, -0.06492704198843968, \
-0.19707646331889306`, 0.3386975740030316, 0.5334680089092299, 
                0.39643058901546935`, 0.27693569498048287`, 
                0.2769346552282599, 0.17389219028605107`}, "Children" -> 
               RawArray["Integer16",{{2, -16}, {3, 4}, {5, 6}, {20, 21}, {-1, 
                 7}, {9, -17}, {8, -18}, {-2, -19}, {10, 11}, {12, -20}, {
                 13, -21}, {-3, -22}, {14, -23}, {15, -24}, {16, 17}, {-4, 
                 18}, {-5, 19}, {-6, -25}, {-7, -26}, {22, 23}, {-8, 28}, {-9,
                  24}, {-10, 25}, {-11, -27}, {26, -28}, {-12, 
                 27}, {-13, -29}, {29, -30}, {30, 31}, {-14, -31}, {
                 32, -32}, {33, -33}, {-15, -34}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 
                 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 
                 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 6, 4, 3, 6, 3, 4, 1, 2, 1, 3, 3, 1, 1,
                  3, 1, 1, 2, 3, 3, 1, 1, 3, 2, 5, 1, 1, 1, 3, 1, 4, 2, 2, 1, 
                 1, 1, 1, 2, 1, 3, 2, 1, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQBuIJv2d5m05qsWf45btqv9/r/RNuPvgr6XTMXkAqdM+p
5Y/tFVoXS4DEf9g9WLP09V37jKXXr/nsvGi/wPKyfKnTC/sfwVYrTNZetTcQ
0mieuempPcM/3k0gdSeaTj88CdTfwf0//0PAbfsDWe4eFy482L+AYfe9M0Dx
FRaHRLvXfNivEcJ9InTySfuKkldhpy1P7u8Q+e6xEKhfQZXp12Ig3fF47bEP
+ev3PzCrnxY5dbf9Cc9X2SD9GXpXK82B9la0zOXXPPjS3mHSD/ngwt/7LZRX
FnpffLSfoa30UqfDv/0XfgiuXQA0JyJNzTqh+9j+Bzce/Q4Cuv/Glx8Ms63e
748wbIptKn6+v6JvulnO88v7LbyinO5/+2qvEBieLdpZbr/hwQGxO2IP7DfE
S+jOBKrfocaxpqxq5/4H9vPXMc7fsH+GkbIgSHzDjeP8pUy/7W9cOW7CABQH
AMntvNY=
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {38, 39}, {6, -22}, {14, 
                 15}, {7, 8}, {9, -23}, {11, -24}, {-1, 10}, {-2, -25}, {-3, 
                 12}, {-4, 13}, {-5, -26}, {16, 17}, {23, -27}, {-6, 18}, {
                 20, -28}, {19, -29}, {-7, -30}, {21, 
                 22}, {-8, -31}, {-9, -32}, {24, -33}, {25, -34}, {26, 27}, {
                 28, 29}, {-10, -35}, {-11, -36}, {-12, 30}, {31, 32}, {
                 33, -37}, {35, 36}, {-13, 34}, {-14, -38}, {
                 37, -39}, {-15, -40}, {-16, -41}, {-17, 
                 40}, {-18, -42}, {-19, 41}, {-20, 42}, {
                 43, -43}, {-21, -44}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 
                 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 
                 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 4, 4, 4, 1, 3, 3, 1, 2, 2, 4, 4, 1, 1,
                  2, 1, 1, 3, 6, 2, 1, 1, 3, 3, 6, 1, 1, 6, 2, 1, 4, 2, 4, 3, 
                 2, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.6228830900071785, -0.4336591071148046, 0.07084914404103826, 
                0.2769351099546471, -1.7507547319446228`, 0.6142331139466481, 
                0.46750690991476196`, 0.883093008644579, 
                0.33869753194428665`, -0.7328491463530371, 
                0.07084914402573328, 0.27693479233363805`, 
                2.3205863728167504`, -0.09888558682359527, \
-0.9759031182065794, -1.9258676532906076`, -0.5285914585223157, \
-0.06492725359413365, 0.010045722744494584`, 
                0.3386976454587445, -1.4965938694827479`, -0.9077939093795573,
                 0.46750679177702725`, 0.46750704503388096`, 
                0.010045610209841335`, -0.5590479789349292, \
-1.2599947493017911`, 
                0.010044788213727368`, -0.7328489363902371, \
-0.274914771556364, 0.07084976160575751, -0.7328501926505284, 
                0.2769346906860437, 0.46750745075428357`, 
                0.3386975676534796, -0.06492652276109923}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {-1, 4}, {13, 14}, {5, -19}, {-2,
                  6}, {7, 8}, {9, 10}, {-3, -20}, {11, -21}, {
                 12, -22}, {-4, -23}, {-5, -24}, {15, -25}, {17, 18}, {-6, 
                 16}, {-7, -26}, {19, 20}, {-8, 32}, {21, 22}, {29, -27}, {23,
                  24}, {-9, -28}, {-10, -29}, {-11, 25}, {26, 27}, {
                 28, -30}, {-12, -31}, {-13, -32}, {-14, 30}, {-15, 
                 31}, {-16, -33}, {-17, 33}, {34, -34}, {35, -35}, {
                 36, -36}, {-18, -37}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 
                 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 
                 1, 2, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 3, 2, 3, 5, 3, 4, 1, 3, 1, 1, 4, 4,
                  1, 4, 1, 1, 1, 4}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.9867751866936878, -1.4346334434421664`, 
                0.5408698743277043, -0.7328493103013045, 0.4675071263759758, 
                0.6228829249084527, 
                0.20129013429141684`, -0.43366024081204424`, \
-0.065713055146299, 0.4675071568573723, 
                0.25107488148643187`, -0.670406617545324, 
                0.2769350378191464, -0.4336592297032844, -0.58794597207992, 
                0.2769347910887614, -0.20772292846206186`, \
-0.41362783510216117`, -0.48028457753250287`, 0.17389225538548292`}, 
               "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {20, -13}, {6, 7}, {-1, 
                 8}, {-2, -14}, {-3, -15}, {9, 10}, {-4, 11}, {-5, 
                 12}, {-6, -16}, {-7, 13}, {14, 15}, {-8, 16}, {-9, 
                 17}, {-10, -17}, {18, -18}, {
                 19, -19}, {-11, -20}, {-12, -21}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 
                 2, 2, 1, 2, 2, 1, 2, 1, 2, 1}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 2, 4, 1, 3, 1, 1, 2, 3}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.8048291468621684, -1.2906652458502652`, \
-0.19707656824642217`, 
                0.07084865017542119, -0.09585282610121126, \
-0.06492679085679609, -0.9065765022688446, -1.029348726577675, \
-0.7328505303117199, 0.46750744037704717`}, "Children" -> 
               RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -8}, {-3, 5}, {
                 6, -9}, {-4, 7}, {8, 9}, {-5, -10}, {-6, 10}, {-7, -11}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2}],
                "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 4, 3, 1, 3, 3, 4, 1, 2, 3, 1, 2, 2, 1,
                  4, 1, 5, 5, 5, 6, 6, 1, 5, 6, 1, 1}], "NominalSplits" -> {},
                "NumericalThresholds" -> {-0.8533616754116169, \
-0.4336592403967834, 0.4675078741512695, -0.17696861204941317`, 
                0.4675078770719665, 
                0.4675078450489192, -0.4336591071148046, \
-1.8196661349210892`, -0.19707649332150323`, 
                0.46750724688217904`, -1.9960460811870906`, 
                0.3386972046800141, -0.732849688877014, -0.6613559179844488, 
                0.17389225860979396`, -1.5040184939732928`, 
                0.9867760682422251, 0.9867760181770509, 0.9867758615334532, 
                0.010045488497273228`, -0.8533615997567638, 
                0.6702272507589946, 0.9867753286989256, 0.010044496948824352`,
                 1.0234376363972242`, 0.003951675146995126}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {15, 16}, {-1, -11}, {6, 
                 7}, {8, -12}, {-2, -13}, {9, 10}, {11, -14}, {
                 12, -15}, {-3, -16}, {13, -17}, {-4, 14}, {-5, -18}, {17, 
                 18}, {-6, 24}, {19, -19}, {23, -20}, {20, -21}, {21, 
                 22}, {-7, -22}, {-8, -23}, {-9, -24}, {25, -25}, {
                 26, -26}, {-10, -27}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 
                 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{3, 5, 1, 1, 3, 3, 2, 1, 1, 4, 3, 1, 1, 2,
                  3, 1, 1, 3, 1, 1, 4, 1, 4, 1, 2, 1, 3, 1, 4, 1, 2, 1, 1, 2, 
                 3, 1, 4, 1, 4, 3, 3, 1, 2, 3, 3, 1, 4, 1, 1, 1, 4}], 
               "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJwBpQFa/iFib1JlAQAAADMAAABISsT7y6fjP7COxYqpk+8/wE+VMkL09r/I
K9CZkKb0v7AA5Qfgw8k/cFtsqqDr3T/YHWDvgHPnv1jZqF2RU/q/gMKmRRlF
/7/QZm5SU7nRP0jsGs2g690/UMn+NGhuor849jkg/WPyvwCF3e03rdU/oByl
daDr3T+I+dmw8nuav/DbI2HmS+Q/4MzuuxSfsL8Y88wgoXTmP0gTk1QOI+S/
UJb2NhfB2794RdPFA1vYv5gXfHBOudE/iJI3gZnlwT84GECWmzrvv9AmmL50
eOa/sK5pTsun4z/QluRi/pnxP0gF6oEUwdu/2IZCbXEM8b/oDZEGzjnJv/Bw
/x6K7NW/WJVUTa/r/79ooVqUgHPnv8BP+26g690/4GxBUjR/3L/QcPagNSOy
P+gSG0/cpd6/oMKsQUy50T+Iuk0io+vdP3j90qCi690/6Crny/2Dxr9wajzX
gHPnv0h+W4Hok9E/KBe46ACfsL+IerFGEs1pPyBN6TI3I7I/sEuYeTG41D9o
dYuFS77nP2CAXDsTuEq/4JKNf1G50T+DGuZV
                "], "Children" -> 
               RawArray["Integer16",{{2, -24}, {3, 4}, {5, 6}, {31, 32}, {-1, 
                 7}, {10, 11}, {8, -25}, {9, -26}, {-2, -27}, {12, -28}, {20, 
                 21}, {13, 14}, {-3, -29}, {15, -30}, {16, -31}, {-4, 
                 17}, {-5, 18}, {-6, 19}, {-7, -32}, {-8, -33}, {22, 23}, {-9,
                  24}, {25, 26}, {-10, -34}, {-11, 27}, {30, -35}, {
                 28, -36}, {29, -37}, {-12, -38}, {-13, -39}, {33, -40}, {36, 
                 37}, {-14, 34}, {35, -41}, {-15, -42}, {38, -43}, {42, 43}, {
                 39, -44}, {40, -45}, {41, -46}, {-16, -47}, {44, 45}, {46, 
                 47}, {-17, -48}, {-18, -49}, {-19, 48}, {-20, 50}, {-21, 
                 49}, {-22, -50}, {51, -51}, {-23, -52}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 
                 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 
                 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 
                 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> RawArray["Integer16",{6, 1, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.42165857497139214`, 
                0.6692869918728368, 0.07084918012015551}, "Children" -> 
               RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, -4}}], 
               "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 1}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 3, 6, 1, 5, 5, 3, 6, 2, 1, 1, 3, 2, 1,
                  3, 3, 2, 1, 2, 1, 6, 1, 1, 5, 3, 1, 4, 3, 4, 4, 4, 1, 1, 3, 
                 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.07084971459468692, -0.0649271752209245, 
                0.0100445645256632, -0.8390401839401544, 0.6228830986978648, 
                0.6228829004954308, 0.6142332179754755, 0.01004455073687309, 
                0.3386971079442467, -1.4004713554819368`, \
-0.38350505869210494`, 0.6142320582849949, 
                0.33869597214985836`, -0.4068687647089697, \
-0.06492628443594273, -0.06492620164507612, -0.9759031182065794, \
-1.9258676532906076`, -0.732849629649448, -0.3852697097538704, \
-0.8533619130784675, -2.0040582081750618`, 0.1899925375929601, 
                0.8048293594509754, 0.46750710686502694`, -0.5592503830389752,
                 0.276934577454059, 0.46750786104212283`, 0.2769357346789705, 
                0.2769352508532896, 
                0.27693501795395115`, -0.6640281688924103, \
-0.9077939093795573, -0.06492624772295086, -0.23663440197996644`, \
-0.3462601405078507}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {19, 20}, {-1, 6}, {7, 
                 8}, {-2, -17}, {9, -18}, {15, 16}, {10, 11}, {-3, 
                 12}, {-4, -19}, {13, -20}, {-5, 
                 14}, {-6, -21}, {-7, -22}, {-8, 17}, {-9, 18}, {-10, -23}, {
                 21, 22}, {26, 27}, {23, -24}, {-11, 24}, {-12, -25}, {
                 25, -26}, {-13, -27}, {28, -28}, {34, 35}, {29, -29}, {
                 30, -30}, {31, -31}, {32, -32}, {
                 33, -33}, {-14, -34}, {-15, -35}, {36, -36}, {-16, -37}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 
                 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 
                 2, 2, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 2, 3, 1, 4, 4, 3, 1, 6, 2, 1}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.6228830986978648, -0.7328508168270131, \
-0.06492624772295086, -0.7320311765443934, 0.27693601496115994`, 
                0.07084918012015551, 0.4675064011392638, -0.1748595573119771, 
                0.010044619714079411`, -0.7328503495828143, \
-0.5574595973680827}, "Children" -> 
               RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {5, 6}, {
                 7, -9}, {-4, 8}, {-5, -10}, {9, 10}, {-6, 
                 11}, {-7, -11}, {-8, -12}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
                 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{3, 6, 6, 1, 2, 2, 2, 1, 2, 1, 3, 3, 1, 1,
                  1, 4, 4, 1, 3, 1, 2, 1, 3, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.4675076283859143, -0.4216585768292216, \
-0.42165861933045656`, -1.6112343007768803`, -0.19707655662122492`, \
-0.7328493997832055, -0.7328495847291672, -1.8917602093416992`, \
-0.1970762018256933, -1.4998599580322836`, 
                0.46750690991476196`, -0.06492702012219964, 
                0.5724786448634713, -0.47831483435834654`, \
-1.1512879786697123`, -0.4336602584527922, -0.4336604603175318, \
-0.065713055146299, 0.6142331877808456, 
                0.9140430341402519, -0.9759036265949694, -1.4380837117794396`,
                 0.4675078741512695, -1.2520674256184865`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, 7}, {
                 15, -12}, {-1, 8}, {-2, 10}, {9, -13}, {-3, -14}, {-4, 11}, {
                 12, -15}, {13, -16}, {14, -17}, {-5, -18}, {-6, -19}, {18, 
                 19}, {-7, 23}, {-8, 20}, {21, -20}, {-9, -21}, {
                 22, -22}, {-10, -23}, {24, -24}, {-11, -25}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 
                 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2}], "RootIndex" -> 1,
                "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{1, 5, 4, 6, 4, 4, 5, 3, 3, 1, 2, 2, 1, 1,
                  5, 2, 2, 2, 5, 1, 1, 4, 1, 6, 6, 6, 4, 2, 2, 2, 1, 3, 4, 1, 
                 3, 1, 3, 3, 1, 3, 2, 2, 5, 1, 1, 1, 2, 1}], 
               "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGAwAOIZgv2ppcdu7D/BoLt45eT39hZrXR+JHLy9X+GgT/R+
v9f7Fxxa4+iz86J9wFyn7yB6R0e1y7J3j+0r6pw5zyx/bK/wrNxk0eu79i/0
LA4wnfu3/0bss/WGa6/aKxguUW8ofr6/YTL73YDue/sr3lZcaEr6tL+BcfEb
jYMv7TU2/LJvBsoXBNWknbc8uX+B0w3LRiDf4pjCjuVA8zWiVZkaN97bf4BP
01Fb7cn+GUeeTBcHuoshq7Kg6tzD/R3Rt0NK/tza37Ck9q/ZpBb7C1kHE/cC
3dtwWkJQyumY/YK1v4vqgebNkMj2OwU036FoYwmIz7D7wI+678/tI/gm71sA
dDfDyzs6YP9q8Rud4nxkP0P6ivtSoLhC9Ux/ltWn7RvCYlJAfAaBfr5TQP8+
4FdfZXXzuT2H6tp/IPEXeTtEeMNf7zf4mBw/y+r9/h0TxB21gP7rOLe6QU1t
iz2HdLrj24RF9hzlRgabgzbtlyjad8YcFD68X4Tn1P+zBwDkWMpc
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {6, 7}, {22, 
                 23}, {8, -23}, {9, 10}, {-1, -24}, {11, 12}, {15, 16}, {-2, 
                 13}, {-3, -25}, {14, -26}, {-4, -27}, {17, -28}, {-5, 
                 18}, {-6, -29}, {19, -30}, {-7, 20}, {
                 21, -31}, {-8, -32}, {-9, -33}, {-10, -34}, {-11, -35}, {26, 
                 27}, {28, 29}, {45, -36}, {30, -37}, {42, 43}, {31, -38}, {
                 32, 33}, {34, 35}, {-12, -39}, {36, -40}, {-13, 
                 37}, {-14, -41}, {-15, 38}, {39, -42}, {40, -43}, {-16, 
                 41}, {-17, -44}, {-18, 44}, {-19, -45}, {-20, -46}, {46, 
                 47}, {-21, -47}, {48, -48}, {-22, -49}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
                 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 
                 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{3, 1, 5, 5, 2, 1, 1, 3, 3, 1, 3, 4, 1, 1,
                  4, 6, 5, 5, 3, 1, 2, 1, 4, 1, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.4675079044147319, 
                0.46805660241884306`, 0.6228830986978648, 0.9867751866936878, 
                0.33869735352039365`, -1.0830280661314227`, 
                0.13966753755117955`, 0.20129013429141684`, 
                0.4675062170055426, -1.8858692746296128`, \
-0.06492704751718037, 0.2769361501256036, 
                0.0653024026048944, -1.4965938694827479`, 
                0.17389225860979396`, 0.010045049426129105`, 
                0.9867761291497477, 0.6228813472652623, 0.4675077159112466, 
                0.5027904934313678, -0.9759032188340324, 
                0.15162459407473783`, -0.0783613083534257, \
-0.833584390456938, -0.37572862906067206`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {6, 7}, {16, 
                 17}, {8, 9}, {13, -13}, {-1, 10}, {11, -14}, {-2, -15}, {-3, 
                 12}, {-4, -16}, {14, -17}, {-5, 15}, {-6, -18}, {18, 
                 19}, {-7, -19}, {-8, -20}, {-9, -21}, {
                 22, -22}, {-10, -23}, {23, -24}, {24, -25}, {-11, 
                 25}, {-12, -26}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 
                 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1}], "RootIndex" -> 
               1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 6, 1, 1, 1, 4, 6, 6, 1, 1, 2, 5, 5, 1,
                  5, 3, 1, 5, 1, 1, 3, 4, 2, 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.07085010413485926, 
                0.010044550513895856`, -1.7095944495667457`, \
-0.973582726632193, -0.2730622044387463, -0.43365907204461607`, \
-0.8533618529185434, -0.8533618237097222, 1.9331748285706283`, 
                1.2675634061644683`, 0.3386971361707958, 0.804828958820039, 
                0.6228826016233198, -0.05860981618054989, 
                0.8048294742270974, -0.06492620164507612, \
-1.8563683331405905`, 0.8048291982375506, -1.9543698044546147`, 
                0.1899925375929601, 0.46750776336280175`, 
                0.27693506381308497`, -0.7328495847291672, \
-0.02860672300033018}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {-1, 6}, {-2, 
                 16}, {7, 8}, {9, -13}, {-3, 11}, {10, -14}, {-4, -15}, {12, 
                 13}, {14, -16}, {-5, 15}, {-6, -17}, {-7, -18}, {-8, -19}, {
                 19, -20}, {20, -21}, {-9, -22}, {21, 22}, {
                 23, -23}, {-10, -24}, {-11, 24}, {-12, -25}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
                 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1,
                "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 1, 2, 4, 2, 5, 3, 2, 5, 1, 2, 3, 2, 1,
                  4, 1, 4, 6, 3, 6, 2, 2, 1, 3, 4, 2, 3, 4, 1, 1, 1, 1}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.01004455073687309, -1.0830280661314227`, -0.854376930917919,
                 0.1738923710070306, -0.7328497229246027, 
                0.6228829076317508, -0.06492704751718037, -0.7328498244761636,
                 0.6228830986978648, 0.9511762094916447, -0.9759037643786321, 
                0.6142333547597234, -0.9759037094411172, 
                1.657822762863912, -0.43365912882051605`, -0.66970780223122, 
                0.27693607963776445`, 0.010044504176295016`, 
                0.46750676111863054`, -0.8533628077352828, \
-0.7328492852015067, 0.33869587412716484`, -0.10093360108177629`, 
                0.467507402107985, 0.27693625524583254`, -0.7328501972243009, 
                0.46750654521864954`, 
                0.2769354320699726, -1.3976496499654356`, \
-0.6601009217618294, -0.5880388404022145, 0.1804612373012675}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 22}, {-2, -17}, {6, 
                 7}, {8, 9}, {-3, 16}, {10, -18}, {-4, -19}, {11, 
                 12}, {-5, -20}, {13, 14}, {-6, 15}, {-7, -21}, {-8, -22}, {
                 17, 18}, {19, -23}, {20, -24}, {-9, -25}, {
                 21, -26}, {-10, -27}, {23, -28}, {24, 25}, {26, -29}, {
                 32, -30}, {-11, 27}, {28, -31}, {-12, 29}, {-13, 30}, {-14, 
                 31}, {-15, -32}, {-16, -33}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 
                 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 
                 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 3, 4, 5, 5, 1, 1, 3, 1, 6, 2, 1, 4, 1,
                  4, 3, 1, 3, 2, 3, 2, 3, 3, 3, 4, 2, 3, 1, 1, 3, 3, 2, 1}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.9867751866936878, 
                0.6142330139110204, 0.17389225860979396`, 0.6228817561146487, 
                0.6228818658118618, 
                0.010717730507031523`, -1.8196661349210892`, 
                0.46750762077731123`, 
                0.8817278007436196, -0.8533626825970426, -0.732849629649448, 
                0.1128089538066851, 
                0.070848283935245, -0.04822721027464261, -0.4336602392967359, 
                0.46750656226654286`, -0.689615367832233, 
                0.4675067482173674, -0.7328500756928387, 
                0.46750775407437084`, -0.7328506068625211, 0.4675072285038735,
                 0.46750744779316555`, 
                0.4675060146696923, -0.43365939798990416`, \
-0.9759042058415277, 0.4675071165953275, 0.9480811712847785, 
                0.8473766480760823, -0.06492720401471308, \
-0.06492705931161968, 0.33869753580783346`, 2.3205863728167504`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, -20}, {31, -21}, {-1, 5}, {6,
                  7}, {8, 9}, {10, 11}, {-2, -22}, {-3, -23}, {-4, -24}, {12, 
                 13}, {14, 15}, {-5, 29}, {16, -25}, {-6, 24}, {-7, 17}, {18, 
                 19}, {-8, 20}, {21, -26}, {-9, -27}, {22, -28}, {-10, 
                 23}, {-11, -29}, {-12, 25}, {-13, 26}, {-14, 27}, {
                 28, -30}, {-15, -31}, {-16, 30}, {-17, -32}, {-18, 32}, {
                 33, -33}, {-19, -34}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 
                 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 
                 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 4, 2, 1, 4, 1, 2, 1, 3, 6, 5, 2, 5, 4,
                  4, 1, 4, 2, 3, 5, 2, 1, 1, 2, 4, 1, 3, 1, 1, 2, 2, 4, 1, 1, 
                 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.01004450746021128, -0.4336592403967834, \
-0.7328505562660776, -0.20624407350715357`, -0.4336586451345079, 
                1.9331748285706283`, -0.9759038394291855, -0.5572751960833271,
                 0.4675078134187389, -0.8533627913204871, 
                0.6228827502084906, -0.7328490961402236, 0.6228829136189455, 
                0.07084925934553798, 0.276935281086911, -1.9242918202327441`, 
                0.1738922338584259, -0.1970765641643919, -0.06492702012219964,
                 0.6228829933701387, -0.732849811676977, 
                0.18076740780557188`, -0.5190404014558894, \
-0.7328501049175369, -0.4336604580160124, -1.9941107370293913`, 
                0.5408698275554809, 
                0.4599923133381112, -1.8201845647143582`, \
-0.19707656824642217`, 0.33869587412716484`, 0.27693450543027254`, 
                0.5353923991796581, -0.24458722090388552`, 
                1.0573273357898874`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {25, 26}, {-1, 6}, {-2, 
                 7}, {-3, -20}, {-4, 8}, {9, 10}, {11, -21}, {18, 19}, {12, 
                 13}, {-5, 14}, {15, 16}, {-6, -22}, {-7, -23}, {-8, 
                 17}, {-9, -24}, {-10, -25}, {20, 21}, {22, -26}, {24, -27}, {
                 23, -28}, {-11, -29}, {-12, -30}, {-13, 27}, {-14, 29}, {
                 28, -31}, {-15, -32}, {30, 31}, {-16, -33}, {32, 
                 33}, {-17, -34}, {34, 35}, {-18, -35}, {-19, -36}}], 
               "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 
                 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 
                 1, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 6, 1, 1, 1, 4, 4, 4, 1, 1, 2, 2, 6, 1,
                  1, 2, 2, 4, 4, 1, 3, 1, 1, 1, 1, 3, 3, 4, 2, 3, 1, 2, 1, 4, 
                 2}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.9867752001132555, -0.8533632669897315, 0.10760846345344233`,
                 0.8500716586581589, -1.0177609512523453`, \
-0.43365977453004856`, -0.43365907204461607`, 
                0.2769357319377521, -0.6924443126347182, -0.5829359488351642, \
-0.19707649332150323`, -0.7328495521695295, -0.8533626303740167, \
-1.368687650868134, 
                0.3898689326829765, -0.7328492263401154, -0.7328501080461747, 
                0.27693596614018423`, -0.4336591569961574, \
-0.38055509871363524`, 0.6142320582849949, 1.6567226786290128`, 
                1.40949091310131, 0.7832410137553669, 
                1.3031795733150684`, -0.06492728023823857, 
                0.46750689335523177`, 
                0.17389225860979396`, -0.9759032358370225, \
-0.06492705931161968, -0.2730622044387463, -0.975903140833771, 
                0.640594913007285, 0.276934805763267, 0.33869656828121153`}, 
               "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {28, 29}, {6, 7}, {11, 
                 12}, {-1, 8}, {-2, -20}, {-3, 9}, {-4, 10}, {-5, -21}, {
                 13, -22}, {15, 16}, {-6, 14}, {-7, -23}, {17, 18}, {-8, 
                 26}, {19, -24}, {21, -25}, {20, -26}, {-9, -27}, {-10, 22}, {
                 23, -28}, {24, -29}, {-11, 25}, {-12, -30}, {-13, 
                 27}, {-14, -31}, {30, -32}, {-15, 32}, {
                 31, -33}, {-16, -34}, {-17, 33}, {-18, 34}, {
                 35, -35}, {-19, -36}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
                 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 
                 2, 2, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
               0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 1, 1, 5, 1, 2, 3, 2, 2, 6, 5, 5, 1, 5,
                  2, 4, 2, 1, 3, 6, 5, 6, 4, 4, 1, 1, 1, 1, 4, 2, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {0.07084856597955591, 
                2.290709398146742, -0.9081107522025489, 
                0.8048291610482492, -0.7947408894768984, -0.9759035691923863, 
                0.6142320529037653, -0.9759030539076035, -0.1970764371620215, 
                0.01004450746021128, 0.986775225355836, 
                0.6228813830689637, -1.029348726577675, 
                0.6228814812613193, -0.7328494978307409, 
                0.2769357999826889, -0.7328496999001448, -0.5200400844203292, 
                0.46750647362039244`, -0.8533630505619598, 
                0.8048291497217539, -0.8533619502704921, 0.27693595125079007`,
                 0.2769346705948079, -0.20902379515889247`, 
                0.32374226450445587`, 
                1.6880999199325224`, -0.03153863092460607, 
                0.07084917117195189, 0.33869738573574315`, 
                0.17389242900031499`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, -17}, {9, 10}, {5, -18}, {-1,
                  6}, {-2, 7}, {8, -19}, {-3, -20}, {11, 12}, {14, 15}, {-4, 
                 13}, {-5, -21}, {-6, -22}, {16, 17}, {26, 27}, {18, -23}, {
                 20, 21}, {-7, 19}, {-8, -24}, {-9, 22}, {
                 23, -25}, {-10, -26}, {24, 
                 25}, {-11, -27}, {-12, -28}, {-13, -29}, {28, -30}, {29, 
                 30}, {-14, 31}, {-15, -31}, {-16, -32}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 
                 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 
                 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{4, 1, 1, 6, 6, 3, 3, 1, 1, 6, 5, 5, 6, 1,
                  3, 1, 2, 1, 3, 1, 1, 1, 1, 2, 3, 1, 3, 5, 1, 1, 1, 6, 1, 5, 
                 5, 2, 1, 1, 1, 1, 4, 3, 4, 2, 2, 3}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQA2KH2aGLFZQ32Sds3Vl0PPC2/Qzn+IoMj/f7FZLbFfb5
vd4vEHPfouTPrf0cm6/znV3+2F6i7+Oxk0C6oVki1krmw/4Z96dnX47abX+C
dYvEu0kt9gyP/1isnvzeviFTwwhEGyz3/1YM1F8R3HjB9P+5/Qk9ty6eBup/
0eVr0uD8137HD6tPs63e75/A3emiMu2ZfYS1vtIpoHwA76+1jIs+2Vt4RTnd
//bV/gDr+xmnwt/ar2jhzZqvChR3bmFoKH6+f8HenJ+c8zfsb4jbbbeH48v+
DQxP2R8cPmkf4b99/0qg/T+WRbn5FX3a72C/claA78/9HgXTGXkP/93PcNLt
XCbQvQt23dy1K/L//hvtxYJrgOoDqlZqah58aW9x4rwByHwOu4JjRecu7//x
cvHDCx1Af11+X5Lg+cE+4MYLieqoD/YKbud1/HZetLdg+HJ33uu79gvqe6pM
geG54uiVn01A/R463nNB5mzYUW8JchcAF+DHww==
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {6, 7}, {
                 15, -27}, {8, -28}, {-1, 10}, {-2, 9}, {-3, -29}, {
                 11, -30}, {12, -31}, {13, -32}, {14, -33}, {-4, -34}, {
                 16, -35}, {17, -36}, {18, 19}, {-5, 20}, {-6, 
                 21}, {-7, -37}, {22, -38}, {-8, 23}, {-9, -39}, {26, 
                 27}, {-10, 35}, {28, 29}, {-11, 33}, {-12, 30}, {-13, 32}, {
                 31, -40}, {-14, -41}, {-15, -42}, {-16, 34}, {-17, -43}, {36,
                  37}, {38, 39}, {42, 43}, {-18, 40}, {-19, 
                 41}, {-20, -44}, {-21, -45}, {-22, -46}, {-23, 44}, {-24, 
                 45}, {-25, 46}, {-26, -47}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 
                 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 
                 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 2, 4, 6, 2, 2, 1, 1, 1, 1, 4, 3, 1, 5,
                  6, 2, 3, 4, 4, 4, 1, 1, 3, 3, 3, 4, 1, 4, 1, 1, 1, 1, 1, 4, 
                 1, 1, 4, 4}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> CompressedData["
1:eJwBPQHC/iFib1JlAQAAACYAAAA4wZ2YqZPvP5j3zqGaOu+/KP5Szku50T/4
9ZTHv07rv6i7/EOBc+e/mPcwLoJz578wk0SWJYv8vyiKYDm6YMG/eMHRX0P0
zz9oR+Nftx/Wv2g5KfoRwdu/2DVRBZ/r3T/wCEcZt4XTv3DamyGl7uM/MDN1
DL9O679IophDg3Pnv+hLR9HLp+M/kJrZCYQPtL+4BkElTbnRP8Aov6SND7S/
UCfviZrW+D9wELnrrFHIP0gXYPeh690/eHIzL9zDyT+4dWZIouvdPzC7F/Ic
I7I/2Dla8hl65b+okQcGHyOyP0DNPeIGe9y/6EHFJ23/97/ow3bLbEHtP1hR
crqSF+O/KF5QWm6I2L+IJXbzISOyPzCKzRqu9te/eLpsIq9S+D+4QdPgJiOy
PxCqgAMaQsY/OPOjHw==
                "], "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {33, -21}, {-1, -22}, {6,
                  7}, {8, 9}, {24, 25}, {10, 11}, {-2, -23}, {12, 13}, {21, 
                 22}, {-3, 14}, {-4, 19}, {-5, 15}, {16, -24}, {17, -25}, {
                 18, -26}, {-6, -27}, {20, -28}, {-7, -29}, {-8, -30}, {
                 23, -31}, {-9, -32}, {-10, -33}, {26, 27}, {-11, 28}, {-12, 
                 31}, {29, 30}, {-13, -34}, {-14, -35}, {
                 32, -36}, {-15, -37}, {-16, 34}, {-17, 35}, {-18, 36}, {
                 37, -38}, {-19, 38}, {-20, -39}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 
                 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 
                 1, 1, 1, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
               "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 2, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 3,
                  2, 2, 4, 2, 4, 1, 3, 3, 1, 1, 1, 1, 3, 1, 4}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.986775179899686, -0.9759042267527009, 0.17389225860979396`, 
                1.097000989923389, -1.4346334434421664`, 0.6393909187368472, 
                0.3598629545437029, -0.34762395684114233`, \
-0.802208636767773, -0.17696861204941317`, 0.27693477237826025`, 
                0.6705320696454367, -1.7468818018954266`, 
                0.46750757947821775`, -0.7328495515790916, \
-0.9759031192887155, 0.2769362639901569, 
                0.33869695845199255`, -0.43365977453004856`, 
                0.4211891081495942, 0.4675060146696923, 
                0.5408699233274108, -0.6939307134646624, 1.3384552992228897`, 
                1.0242229515244485`, 
                1.6241589923757473`, -0.06492620164507612, 
                0.640594913007285, -0.4336604580160124}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {27, 28}, {6, -14}, {11, 
                 12}, {7, -15}, {8, -16}, {9, 10}, {-1, -17}, {-2, -18}, {
                 13, -19}, {15, 16}, {-3, 14}, {-4, -20}, {17, 18}, {
                 24, -21}, {19, -22}, {-5, -23}, {20, 21}, {-6, -24}, {-7, 
                 22}, {23, -25}, {-8, -26}, {25, 
                 26}, {-9, -27}, {-10, -28}, {-11, 
                 29}, {-12, -29}, {-13, -30}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 
                 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2}], 
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{6, 3, 4, 3, 4, 1, 1, 1, 1, 4, 4, 1, 1, 1,
                  2, 1, 1, 3, 2, 4, 3, 2, 1, 2, 3, 1, 1, 3, 2, 1, 1, 1, 6, 
                 1}], "NominalSplits" -> {}, 
               "NumericalThresholds" -> {-0.8533615864194539, 
                0.4675067491606608, 0.2769346848827272, -0.06492657887061992, 
                0.27693539802582867`, -1.1533184884862013`, \
-1.1494113215297954`, -0.47831483435834654`, -0.5190404014558894, 
                0.1738919169514428, 
                0.27693636941840527`, -1.2387675025697291`, \
-1.6737318014585902`, -0.5572751960833271, -0.7328503670244189, \
-0.8064437417738022, 0.14653250699969833`, 
                0.5408700925168395, -0.975903443302232, 0.276935062954065, 
                0.6142319961931779, -0.732848985930687, 
                0.07581327646933511, -0.7328505771303817, 
                0.540869747639122, -1.9258676532906076`, 0.31942210652999714`,
                 0.46750671062446214`, 
                0.3386963186304288, -0.2730622044387463, 0.2456823841481499, 
                1.339254037244208, 
                0.01004625909666522, -0.24597090042675762`}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {26, 27}, {6, 7}, {16, 
                 17}, {-1, 8}, {10, 11}, {9, -17}, {-2, -18}, {-3, 12}, {
                 14, -19}, {13, -20}, {-4, -21}, {15, -22}, {-5, -23}, {18, 
                 19}, {-6, -24}, {-7, -25}, {-8, 20}, {21, -26}, {22, 23}, {
                 24, -27}, {-9, -28}, {25, -29}, {-10, -30}, {-11, 28}, {
                 33, -31}, {29, -32}, {30, -33}, {-12, 31}, {-13, 
                 32}, {-14, -34}, {-15, 34}, {-16, -35}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 
                 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
                 2, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
             
             MachineLearning`DecisionTree[<|
              "FeatureIndices" -> 
               RawArray["Integer16",{5, 1, 4, 3, 1, 1, 3, 4, 1, 1, 2, 3, 1, 1,
                  1, 1, 3, 2, 4, 4, 1, 3, 3, 2, 3, 1, 1, 4, 3, 6, 3, 2, 5}], 
               "NominalSplits" -> {}, 
               "NumericalThresholds" -> {
                0.6228830986978648, -1.81824657045399, 0.1738922675591219, 
                0.46750694416233607`, -1.0655378597224878`, \
-1.9946524456557722`, 
                0.5408706563273329, -0.4336598034965169, \
-1.2521326494660627`, -1.4351541239032208`, -0.7328508030375556, 
                0.20129009287173671`, -0.20624407350715357`, 
                0.39159309598517966`, 0.04464333371368484, 0.6059152188351398,
                 0.4675076723471454, -0.9759042221453491, 0.07084840676504334,
                 0.27693547109328565`, -0.23286671691691252`, 
                0.46750677087281334`, -0.06492725612925421, \
-0.7328504729338734, 0.46750771931740553`, 0.3234275642883553, 
                1.655525936701336, 0.27693596614018423`, -0.06492738331035097,
                 0.010044522330012948`, 0.6142333724684681, 
                0.3386957854759012, 0.9867760023160228}, "Children" -> 
               RawArray["Integer16",{{2, 3}, {4, 5}, {30, -16}, {6, -17}, {7, 
                 8}, {-1, -18}, {9, -19}, {13, 14}, {10, -20}, {11, -21}, {-2,
                  12}, {-3, -22}, {-4, 15}, {17, 18}, {-5, 16}, {-6, -23}, {
                 19, 20}, {27, 28}, {21, 22}, {25, -24}, {-7, -25}, {
                 23, -26}, {-8, 24}, {-9, -27}, {-10, 
                 26}, {-11, -28}, {-12, -29}, {29, -30}, {-13, -31}, {31, 
                 32}, {33, -32}, {-14, -33}, {-15, -34}}], "LeafValues" -> 
               RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 
                 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 
                 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>]}, 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], 
           "OOBConfusionMatrix" -> {{0.714860572910599, 0.3280998107520853}, {
            0.28513942708940104`, 0.6719001892479147}}, "Calibrator" -> 
           MachineLearning`CalibratorFunction[
            "TemperatureScaling", <|"Theta" -> 2.141453301109425|>], "Method" -> 
           "RandomForest", "PostProcessor" -> 
           MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "FeatureFraction" -> <|
              "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
             "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
             "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>,
              "Implementation" -> <|
              "Value" -> "Default", "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Configurations" -> 
           Dataset[<|<|
               "Value" -> "RandomForest", 
                "Options" -> <|
                 "FeatureFraction" -> <|"Value" -> Automatic|>, 
                  "LeafSize" -> <|"Value" -> Automatic|>, 
                  "TreeNumber" -> <|"Value" -> Automatic|>, 
                  "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                  "Implementation" -> <|"Value" -> Automatic|>|>, 
                "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                "EMIterations" -> 
                Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
             TypeSystem`Assoc[
              
              TypeSystem`Struct[{
               "Value", "Options", "NaiveImputer", "EMIterations"}, {
                TypeSystem`Atom[String], 
                TypeSystem`Assoc[
                 TypeSystem`Atom[String], 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                TypeSystem`UnknownType, TypeSystem`UnknownType}], 
              TypeSystem`Assoc[
              TypeSystem`UnknownType, TypeSystem`UnknownType, 
               TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
           Dataset[<|
             "Configuration" -> {
               "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
                0.5, "Implementation" -> Automatic}, "ModelUtility" -> 
              Missing[]|>, 
             TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
               TypeSystem`Tuple[{
                 TypeSystem`Atom[String], TypeSystem`AnyType, 
                 TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
           "InputDimension" -> 6, "OutputDimension" -> 1|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
                7168142382301173801|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
                1978735388468315165|>, 
              "f3" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
                9071588231046195481|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 0.213457, 
           "MaxTrainingMemory" -> 616840, "DataMemory" -> 178408, 
           "FunctionMemory" -> 271600, "LanguageVersion" -> {14.1, 0}, "Date" -> 
           DateObject[{2024, 8, 10, 13, 29, 1.066999`6.780739001287596}, 
             "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
           "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], ",", 
     RowBox[{"\"\<LogisticRegression\>\"", "\[Rule]", 
      InterpretationBox[
       RowBox[{
        TagBox["ClassifierFunction",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       ClassifierFunction[<|
        "ExampleNumber" -> 732, "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal"|>, 
                "f2" -> <|"Type" -> "Numerical"|>, 
                "f3" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor[
                   "Transpose", <|"FeatureNumber" -> 3|>], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f2(f1f3))" -> <|
                 "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                  "NumericalVector"|>|>, "Processors" -> {
                MachineLearning`MLProcessor[
                "SynthesizeMissingValues", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Distribution" -> 
                  LearnedDistribution[<|
                    "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.044451, "MaxTrainingMemory" -> 319080,
                     "DataMemory" -> 81824, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 13, 29, 1.115442`6.800021981942899}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "EvaluationStrategy" -> "ModeFinding", 
                  "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                MachineLearning`MLProcessor[
                "Threads", <|
                 "Input" -> <|
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                  "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                  "Invertibility" -> "Perfect", "StructurePreserving" -> True,
                   "Missing" -> "Allowed"|>], 
                MachineLearning`MLProcessor[
                "Standardize", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Mean" -> {29.41643893442623}, 
                  "StandardDeviation" -> {14.237916921543757`}, 
                  "Output" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                MachineLearning`MLProcessor[
                "EmbedNominalVector", <|
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                   "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                  "Output" -> <|
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                  "EmbeddingVectors" -> {
                   RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                    RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                  "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                MachineLearning`MLProcessor[
                "MergeVectors", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                  "Output" -> <|
                   "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                  7619735631186802745|>]}, "Invertibility" -> "Impossible", 
              "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Preprocessor" -> 
              MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                   MachineLearning`MLProcessor["List"], 
                   MachineLearning`MLProcessor[
                   "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
              "Perfect", "StructurePreserving" -> False, "Missing" -> 
              "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Sequence", <|
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Processors" -> {
                MachineLearning`MLProcessor[
                "ToVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                MachineLearning`MLProcessor[
                "IntegerEncodeNominalVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                  "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                  "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                  2833981340056725226, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                
                MachineLearning`MLProcessor[
                "FromVector", <|
                 "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                  "StructurePreserving" -> True, 
                  "Input" -> <|
                   "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                  "Output" -> <|
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                  "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                MachineLearning`MLProcessor[
                "FirstValues", <|
                 "Info" -> <|
                   "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                  "Key" -> "f1", "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> 
           Identity, "Name" -> "class", 
           "Marginal" -> <|
            "died" -> 0.5831062670299727, "survived" -> 
             0.41689373297002724`|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> Automatic, 
         "Model" -> <|
          "LogProbabilitiesFunction" -> 
           LinearLayer[<|
             "Type" -> "Linear", 
              "Arrays" -> <|
               "Weights" -> 
                RawArray["Real32",{{
                  0.5046892166137695, -0.1692856401205063, \
-0.03163857385516167, 
                  2.950413227081299, -1.1390047073364258`, \
-2.362849473953247}}], "Biases" -> 
                RawArray["Real32",{-0.14568713307380676`}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                6, "$InputDimensions" -> {6}|>, 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>,
               "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
             "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Weight" -> {0.3333333333333333, 0.9444444444444444, 
                 0.34444444444444444`, 0.34444444444444444`, 
                 0.34444444444444444`, 0.34444444444444444`, 
                 0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
              "(f2(f1f3))", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Calibrator" -> None, "Method" -> "LogisticRegression", 
           "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
             "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
             "OptimizationMethod" -> <|
              "Value" -> "LBFGS", "Options" -> <||>|>, 
             MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
         "TrainingInformation" -> <|
          "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0,
            "PreprocessingTime" -> 0.107562`5.483203862362301, "LossName" -> 
           "MeanCrossEntropy", "BestModelInformation" -> 
           Dataset[<|
             "MeanCrossEntropy" -> 
              Around[0.4962574708858271, 0.03472977693960391], "Accuracy" -> 
              Around[0.7787074631898112, 0.026855798295200097`], 
              "EvaluationTime" -> 3.6199719017886695`*^-6, "TestSize" -> 146.,
               "ModelMemory" -> 8968., 
              "ModelUtility" -> -0.006389519980167346, "Round" -> 4, 
              "Iteration" -> 49, 
              "Time" -> {
               1.355194`6.5835464636869565, 1.376041`6.5901763676632585}, 
              "TrainingSize" -> 586, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 205490.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.4872201516311726, 0.045838047353706654`], 
                Around[0.5052947901404816, 0.04918526678853702]}, 
              "AccuracyHistory" -> {
                Around[0.7906225159324907, 0.033349111182852886`], 
                Around[0.7667924104471318, 0.034769712787511786`]}, 
              "IterationHistory" -> {35, 49}, 
              "TimeHistory" -> {{
                1.025088`6.46230614305743, 1.046616`6.471332363168294}, {
                1.355194`6.5835464636869565, 1.376041`6.5901763676632585}}, 
              "Configuration" -> {
               "LogisticRegression", "L1Regularization" -> 0, 
                "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
                MaxIterations -> 30}, "FinalTrainingSize" -> 732|>, 
             TypeSystem`Assoc[
              TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
           "Configurations" -> 
           Dataset[<|<|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6920569762271581, 0.004509550772670333], 
                   "Accuracy" -> 
                   Around[0.5000691800013414, 0.040722663730445724`], 
                   "EvaluationTime" -> 3.5620121426502263`*^-6, "TestSize" -> 
                   300, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.32636567600851196`, "Round" -> 1, 
                   "Iteration" -> 1, 
                   "Time" -> {
                    0.205775`5.764937603856489, 0.215967`5.785932389032095}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193,
                    "TrainingMemory" -> 288312, "ExperimentCount" -> 1, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6920569762271581, 0.0031887339314602275`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5000691800013414, 0.028795271671777638`]}, 
                   "IterationHistory" -> {1}, 
                   "TimeHistory" -> {{
                    0.205775`5.764937603856489, 
                    0.215967`5.785932389032095}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6828862951560299, 0.006046025102719747], 
                   "Accuracy" -> 
                   Around[0.5467511435240389, 0.031117594413358925`], 
                   "EvaluationTime" -> 2.40856160820144*^-6, "TestSize" -> 
                   500, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3134925324533755, "Round" -> 2, 
                   "Iteration" -> 9, 
                   "Time" -> {
                    0.312027`5.94573716906463, 0.322488`5.960058552371928}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.00630957344480193, "TrainingMemory" -> 74960, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6828862951560299, 0.004275185349357225]}, 
                   "AccuracyHistory" -> {
                    Around[0.5467511435240389, 0.02200346202389872]}, 
                   "IterationHistory" -> {9}, 
                   "TimeHistory" -> {{
                    0.312027`5.94573716906463, 
                    0.322488`5.960058552371928}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6610294220402555, 0.013147598023831314`], 
                   "Accuracy" -> 
                   Around[0.5653902968835008, 0.02864221583915503], 
                   "EvaluationTime" -> 2.5008066103980715`*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.28316337994413565`, "Round" -> 3, 
                   "Iteration" -> 20, 
                   "Time" -> {
                    0.476323`6.12944654610124, 0.489478`6.141278170343369}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                   "TrainingMemory" -> 95944, "ExperimentCount" -> 1, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6610294220402555, 0.009296755718965972]}, 
                   "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                   "IterationHistory" -> {20}, 
                   "TimeHistory" -> {{
                    0.476323`6.12944654610124, 
                    0.489478`6.141278170343369}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5917078903312463, 0.022214393176938116`], 
                   "Accuracy" -> 
                   Around[0.7668052279343548, 0.03198998598357118], 
                   "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.17588860825329233`, "Round" -> 4, 
                   "Iteration" -> 51, 
                   "Time" -> {
                    1.387271`6.593706301222646, 1.402615`6.598483472563509}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 
                   205509.3333333333, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6096098572484931, 0.02031691458081154], 
                    Around[0.5738059234139993, 0.017257366896755243`]}, 
                   "AccuracyHistory" -> {
                    Around[0.7462470361593463, 0.035780668221151085`], 
                    Around[0.7873634197093633, 0.03364171729308311]}, 
                   "IterationHistory" -> {38, 51}, 
                   "TimeHistory" -> {{
                    1.079458`6.484750742784946, 1.094544`6.490778218123644}, {
                    1.387271`6.593706301222646, 
                    1.402615`6.598483472563509}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.087088182519492*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.5917078903312463, 0.022214393176938116`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 
                  205509.3333333333, "TrainingTime" -> 
                  0.022035399407828043`|>, "Index" -> 1|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.00001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[3.1770521447346085`, 0.3079208203711115], 
                   "Accuracy" -> 
                   Around[0.702149566553167, 0.02378083713448513], 
                   "EvaluationTime" -> 2.6328512733418832`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -1.8683026325032874`, "Round" -> 1, 
                   "Iteration" -> 11, 
                   "Time" -> {
                    0.340134`5.983195039937224, 0.358506`6.006041421965862}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 76848, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[3.1770521447346085`, 0.21773290015293775`]}, 
                   "AccuracyHistory" -> {
                    Around[0.702149566553167, 0.0168155912000873]}, 
                   "IterationHistory" -> {11}, 
                   "TimeHistory" -> {{
                    0.340134`5.983195039937224, 
                    0.358506`6.006041421965862}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5432474902401185, 0.04247326531742843], 
                   "Accuracy" -> 
                   Around[0.7852232554532458, 0.02178985167845728], 
                   "EvaluationTime" -> 2.3528074863823723`*^-6, "TestSize" -> 
                   702, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.09847580982059134, "Round" -> 2, 
                   "Iteration" -> 22, 
                   "Time" -> {
                    0.510335`6.159400347808251, 0.528594`6.1746672227008945}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 80048, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5432474902401185, 0.03003313392508904]}, 
                   "AccuracyHistory" -> {
                    Around[0.7852232554532458, 0.015407751882886215`]}, 
                   "IterationHistory" -> {22}, 
                   "TimeHistory" -> {{
                    0.510335`6.159400347808251, 
                    0.528594`6.1746672227008945}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.49669689169369424`, 0.036903325135733904`], 
                   "Accuracy" -> 
                   Around[0.7825904593549557, 0.025232258357673697`], 
                   "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.008125143729456719, "Round" -> 4, 
                   "Iteration" -> 48, 
                   "Time" -> {
                    1.333364`6.576493718762485, 1.353693`6.58306517666092}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.019952623149688785`, "TrainingMemory" -> 205648., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.48534325958903407`, 0.04771205773901349], 
                    Around[0.5080505237983544, 0.051862901538539244`]}, 
                   "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                   "IterationHistory" -> {40, 48}, 
                   "TimeHistory" -> {{
                    1.117397`6.499752494522984, 
                    1.137373`6.5074479078550675}, {
                    1.333364`6.576493718762485, 
                    1.353693`6.58306517666092}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.087088182519492*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.49669689169369424`, 0.036903325135733904`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 205648., 
                  "TrainingTime" -> 0.03751300863256998|>, "Index" -> 2|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 10000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6929113683883205, 0.0018407910240849604`], 
                   "Accuracy" -> 
                   Around[0.5875401755535886, 0.02550140616636422], 
                   "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3268282798717461, "Round" -> 1, 
                   "Iteration" -> 5, 
                   "Time" -> {
                    0.267085`5.8781944914007, 0.276886`5.893845990857811}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 68976, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929113683883205, 0.0013016358158778048`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                   "IterationHistory" -> {5}, 
                   "TimeHistory" -> {{
                    0.267085`5.8781944914007, 
                    0.276886`5.893845990857811}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.69295341998091, 0.0028248722670656656`], 
                   "Accuracy" -> 
                   Around[0.5000691800013414, 0.040722663730445724`], 
                   "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                   300, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.32717276800021866`, "Round" -> 2, 
                   "Iteration" -> 7, 
                   "Time" -> {
                    0.294773`5.921032694908156, 0.302447`5.932194274553237}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 72288, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.69295341998091, 0.001997486336027948]}, 
                   "AccuracyHistory" -> {
                    Around[0.5000691800013414, 0.028795271671777638`]}, 
                   "IterationHistory" -> {7}, 
                   "TimeHistory" -> {{
                    0.294773`5.921032694908156, 
                    0.302447`5.932194274553237}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6920933486071874, 0.002085865076545491], 
                   "Accuracy" -> 
                   Around[0.5653902968835008, 0.02864221583915503], 
                   "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.32571843624139807`, "Round" -> 3, 
                   "Iteration" -> 30, 
                   "Time" -> {
                    0.639987`6.257716145783599, 0.64941`6.264063965361226}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.00630957344480193, "TrainingMemory" -> 91544, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6920933486071874, 0.0014749293402655137`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                   "IterationHistory" -> {30}, 
                   "TimeHistory" -> {{
                    0.639987`6.257716145783599, 
                    0.64941`6.264063965361226}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6902722542733355, 0.0028716714432324318`], 
                   "Accuracy" -> 
                   Around[0.5847059897625333, 0.08920405560464958], 
                   "EvaluationTime" -> 3.2050388940584644`*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.32331279069259455`, "Round" -> 4, 
                   "Iteration" -> 47, 
                   "Time" -> {
                    1.322151`6.572826051309617, 1.331803`6.575984982339013}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.007943282347242814, "TrainingMemory" -> 
                   205509.3333333333, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6919355980073342, 0.003392526174752993], 
                    Around[0.6886089105393368, 0.003234194404814914]}, 
                   "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`], 
                    Around[0.669317655270652, 0.038785869930437866`]}, 
                   "IterationHistory" -> {32, 47}, 
                   "TimeHistory" -> {{
                    0.659339`6.270653758582702, 0.668545`6.276675638592761}, {
                    1.322151`6.572826051309617, 
                    1.331803`6.575984982339013}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.2050388940584644`*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.6902722542733355, 0.0028716714432324318`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 
                  205509.3333333333, "TrainingTime" -> 
                  0.014934197725661354`|>, "Index" -> 3|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6225133446900297, 0.028919096319404102`], 
                   "Accuracy" -> 
                   Around[0.6958473199147355, 0.023920511178018536`], 
                   "EvaluationTime" -> 2.6475273774900786`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.22840825023263533`, "Round" -> 1, 
                   "Iteration" -> 6, 
                   "Time" -> {
                    0.277861`5.895372587868185, 0.293761`5.919539131413575}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 76912, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6225133446900297, 0.020448889113237567`]}, 
                   "AccuracyHistory" -> {
                    Around[0.6958473199147355, 0.016914355663425515`]}, 
                   "IterationHistory" -> {6}, 
                   "TimeHistory" -> {{
                    0.277861`5.895372587868185, 
                    0.293761`5.919539131413575}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5475941257045043, 0.012796660996985272`], 
                   "Accuracy" -> 
                   Around[0.7818826416999964, 0.012287210886823198`], 
                   "EvaluationTime" -> 2.360245256614679*^-6, "TestSize" -> 
                   634., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.09559225806727922, "Round" -> 2, 
                   "Iteration" -> 26, 
                   "Time" -> {
                    0.579686`6.2147378053448055, 0.598276`6.228446574849425}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 
                   80133.33333333333, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.5459072796666431, 0.02076479870430777], 
                    Around[0.5492809717423656, 0.016022152704283876`]}, 
                   "AccuracyHistory" -> {
                    Around[0.786487199004934, 0.016624533220907244`], 
                    Around[0.7772780843950589, 0.015641321144826872`]}, 
                   "IterationHistory" -> {10, 26}, 
                   "TimeHistory" -> {{
                    0.323526`5.961454181755077, 0.339087`5.981856133505587}, {
                    0.579686`6.2147378053448055, 
                    0.598276`6.228446574849425}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.538153294073969, 0.03768339957874066], "Accuracy" -> 
                   Around[0.776205310563106, 0.024317132497594384`], 
                   "EvaluationTime" -> 2.523790650280906*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.0874460058231401, "Round" -> 3, 
                   "Iteration" -> 18, 
                   "Time" -> {
                    0.436644`6.091672490316597, 0.45592`6.110433637461747}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.015848931924611134`, "TrainingMemory" -> 98488, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.538153294073969, 0.02664618738028981]}, 
                   "AccuracyHistory" -> {
                    Around[0.776205310563106, 0.017194809288060754`]}, 
                   "IterationHistory" -> {18}, 
                   "TimeHistory" -> {{
                    0.436644`6.091672490316597, 
                    0.45592`6.110433637461747}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.4962574708858271, 0.03472977693960391], 
                   "Accuracy" -> 
                   Around[0.7787074631898112, 0.026855798295200097`], 
                   "EvaluationTime" -> 3.6199719017886695`*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.006389519980167346, "Round" -> 4, 
                   "Iteration" -> 49, 
                   "Time" -> {
                    1.355194`6.5835464636869565, 1.376041`6.5901763676632585},
                    "TrainingSize" -> 586, "TrainingTime" -> 
                   0.019952623149688785`, "TrainingMemory" -> 
                   205490.66666666666`, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.4872201516311726, 0.045838047353706654`], 
                    Around[0.5052947901404816, 0.04918526678853702]}, 
                   "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7667924104471318, 0.034769712787511786`]}, 
                   "IterationHistory" -> {35, 49}, 
                   "TimeHistory" -> {{
                    1.025088`6.46230614305743, 1.046616`6.471332363168294}, {
                    1.355194`6.5835464636869565, 
                    1.376041`6.5901763676632585}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.6199719017886695`*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.4962574708858271, 0.03472977693960391], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 
                  205490.66666666666`, "TrainingTime" -> 
                  0.03751300863256998|>, "Index" -> 4|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 100000.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6929901562474444, 0.0018406411619976205`], 
                   "Accuracy" -> 
                   Around[0.5875401755535886, 0.02550140616636422], 
                   "EvaluationTime" -> 2.6328512733418832`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3269418752701829, "Round" -> 1, 
                   "Iteration" -> 12, 
                   "Time" -> {
                    0.359556`6.007311533825328, 0.368707`6.018226376376064}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 68592, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929901562474444, 0.0013015298473796038`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                   "IterationHistory" -> {12}, 
                   "TimeHistory" -> {{
                    0.359556`6.007311533825328, 
                    0.368707`6.018226376376064}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6929834793573587, 0.0009240336897097467], 
                   "Accuracy" -> 
                   Around[0.6442758562091535, 0.06333718384491999], 
                   "EvaluationTime" -> 2.4832509986481783`*^-6, "TestSize" -> 
                   700.6666666666666, "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.3266678112984176, "Round" -> 2, 
                   "Iteration" -> 25, 
                   "Time" -> {
                    0.568817`6.20651756099241, 0.578296`6.21369518185017}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.004668272126026802, "TrainingMemory" -> 
                   71621.33333333333, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6929781470683438, 0.0013068057387066508`], 
                    Around[0.6929888116463736, 0.0013067127014937461`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5821845084937147, 0.018362345593373068`], 
                    Around[0.7063672039245922, 0.017065644390913688`]}, 
                   "IterationHistory" -> {15, 25}, 
                   "TimeHistory" -> {{
                    0.402823`6.056659253013882, 0.411552`6.065969710046173}, {
                    0.568817`6.20651756099241, 
                    0.578296`6.21369518185017}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6929644036602057, 0.00244518386905205], 
                   "Accuracy" -> 
                   Around[0.5125373425074518, 0.03522317662985747], 
                   "EvaluationTime" -> 2.2535743732392292`*^-6, "TestSize" -> 
                   400, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3270791047002767, "Round" -> 3, 
                   "Iteration" -> 17, 
                   "Time" -> {
                    0.427478`6.082458762327516, 0.435567`6.090599962236277}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 90616, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929644036602057, 0.0017290060950546635`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5125373425074518, 0.024906547049903735`]}, 
                   "IterationHistory" -> {17}, 
                   "TimeHistory" -> {{
                    0.427478`6.082458762327516, 
                    0.435567`6.090599962236277}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6926892087394252, 0.0022313739269845777`], 
                   "Accuracy" -> 
                   Around[0.5847059897625333, 0.08920405560464958], 
                   "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.3266204881176653, "Round" -> 4, 
                   "Iteration" -> 50, 
                   "Time" -> {
                    1.377516`6.590641645427314, 1.385804`6.593246804047571}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.00630957344480193, "TrainingMemory" -> 205552., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6928633646500545, 0.003147027781845478], 
                    Around[0.6925150528287958, 0.0031449994676766052`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`], 
                    Around[0.669317655270652, 0.038785869930437866`]}, 
                   "IterationHistory" -> {36, 50}, 
                   "TimeHistory" -> {{
                    1.047757`6.471805564506236, 1.056457`6.475396818554191}, {
                    1.377516`6.590641645427314, 
                    1.385804`6.593246804047571}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.087088182519492*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.6926892087394252, 0.0022313739269845777`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 205552., 
                  "TrainingTime" -> 0.012893455547185712`|>, "Index" -> 5|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 10.|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6593524888116868, 0.011660258082438207`], 
                   "Accuracy" -> 
                   Around[0.5849595027289619, 0.025502732184858448`], 
                   "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.28018392206117015`, "Round" -> 1, 
                   "Iteration" -> 13, 
                   "Time" -> {
                    0.369736`6.019436731978677, 0.382377`6.0340367550459275}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.007943282347242814, "TrainingMemory" -> 74216, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6593524888116868, 0.008245047560477305]}, 
                   "AccuracyHistory" -> {
                    Around[0.5849595027289619, 0.018033154866697824`]}, 
                   "IterationHistory" -> {13}, 
                   "TimeHistory" -> {{
                    0.369736`6.019436731978677, 
                    0.382377`6.0340367550459275}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6330893406010143, 0.015415930996666223`], 
                   "Accuracy" -> 
                   Around[0.5686470558084638, 0.02817794909839063], 
                   "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                   600, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.24086479964641072`, "Round" -> 2, 
                   "Iteration" -> 16, 
                   "Time" -> {
                    0.412567`6.06703948060605, 0.426465`6.081428387896127}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 0.01, 
                   "TrainingMemory" -> 79664, "ExperimentCount" -> 1, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6330893406010143, 0.010900709346046578`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5686470558084638, 0.019924818887401375`]}, 
                   "IterationHistory" -> {16}, 
                   "TimeHistory" -> {{
                    0.412567`6.06703948060605, 
                    0.426465`6.081428387896127}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.49720842042819036`, 0.030379392068506497`], 
                   "Accuracy" -> 
                   Around[0.7858286428745298, 0.02841246554625284], 
                   "EvaluationTime" -> 0.00002906855033175822, "TestSize" -> 
                   130.66666666666666`, "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.006550247971458867, "Round" -> 4, 
                   "Iteration" -> 43, 
                   "Time" -> {
                    1.183117`6.524572688201538, 1.221932`6.538592031770368}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.023842674300353785`, "TrainingMemory" -> 238856., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.5088848869213959, 0.03741375171820714], 
                    Around[0.4855319539349849, 0.04237314461689852]}, 
                   "AccuracyHistory" -> {
                    Around[0.7745584027774206, 0.03432727344725944], 
                    Around[0.7970988829716391, 0.04011530760209069]}, 
                   "IterationHistory" -> {41, 43}, 
                   "TimeHistory" -> {{
                    1.138486`6.507872687946361, 1.158993`6.515625806447872}, {
                    1.183117`6.524572688201538, 
                    1.221932`6.538592031770368}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 0.00002906855033175822, 
                  "MeanCrossEntropy" -> 
                  Around[0.49720842042819036`, 0.030379392068506497`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 238856., 
                  "TrainingTime" -> 0.03772628164393048|>, "Index" -> 6|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.6929980506764756, 0.0018406413129028077`], 
                   "Accuracy" -> 
                   Around[0.5875401755535886, 0.02550140616636422], 
                   "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3269532611062258, "Round" -> 1, 
                   "Iteration" -> 3, 
                   "Time" -> {
                    0.23691`5.8261283862286986, 0.246451`5.843275578184323}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 68760, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929980506764756, 0.001301529954085685]}, 
                   "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                   "IterationHistory" -> {3}, 
                   "TimeHistory" -> {{
                    0.23691`5.8261283862286986, 
                    0.246451`5.843275578184323}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6930012336654148, 0.001042422629433769], 
                   "Accuracy" -> 
                   Around[0.6094522732160219, 0.09793208666065568], 
                   "EvaluationTime" -> 2.458643929969476*^-6, "TestSize" -> 
                   500.66666666666663`, "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.3267275815469759, "Round" -> 2, 
                   "Iteration" -> 29, 
                   "Time" -> {
                    0.629293`6.250397894354723, 0.638673`6.256823550175538}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 
                   71573.33333333333, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6930017644789591, 0.0017287356462208025`], 
                    Around[0.6930007028518703, 0.001306714004894459]}, 
                   "AccuracyHistory" -> {
                    Around[0.5125373425074518, 0.024906547049903735`], 
                    Around[0.7063672039245922, 0.017065644390913688`]}, 
                   "IterationHistory" -> {8, 29}, 
                   "TimeHistory" -> {{
                    0.30349`5.933689379133384, 0.310962`5.944252314360019}, {
                    0.629293`6.250397894354723, 
                    0.638673`6.256823550175538}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6929894233099767, 0.0020553187113957682`], 
                   "Accuracy" -> 
                   Around[0.5653902968835008, 0.02864221583915503], 
                   "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.3270027402789839, "Round" -> 3, 
                   "Iteration" -> 28, 
                   "Time" -> {
                    0.61982`6.243810579193202, 0.628272`6.249692698578043}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.005011872336272719, "TrainingMemory" -> 89992, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929894233099767, 0.0014533297983275442`]}, 
                   "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                   "IterationHistory" -> {28}, 
                   "TimeHistory" -> {{
                    0.61982`6.243810579193202, 
                    0.628272`6.249692698578043}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.6929445306200598, 0.002223313048782563], 
                   "Accuracy" -> 
                   Around[0.5847059897625333, 0.08920405560464958], 
                   "EvaluationTime" -> 3.3229896055974374`*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.3269864532903316, "Round" -> 4, 
                   "Iteration" -> 44, 
                   "Time" -> {
                    1.223787`6.53925082897349, 1.272341`6.55614851563476}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.014747307830429216`, "TrainingMemory" -> 
                   206818.66666666666`, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.6929620326679911, 0.0031441585768911605`], 
                    Around[0.6929270285721285, 0.003144125508049724]}, 
                   "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`], 
                    Around[0.669317655270652, 0.038785869930437866`]}, 
                   "IterationHistory" -> {31, 44}, 
                   "TimeHistory" -> {{
                    0.650423`6.264740883702634, 0.658331`6.269989299464481}, {
                    1.223787`6.53925082897349, 1.272341`6.55614851563476}}|>},
                 "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.3229896055974374`*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.6929445306200598, 0.002223313048782563], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 
                  206818.66666666666`, "TrainingTime" -> 
                  0.02343342409715017|>, "Index" -> 7|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[3.8832619447798185`, 0.3808321681129272], 
                   "Accuracy" -> 
                   Around[0.6988581184442184, 0.024276587918055315`], 
                   "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                   700, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -2.0692499494798855`, "Round" -> 1, 
                   "Iteration" -> 2, 
                   "Time" -> {
                    0.217069`5.788142799031277, 0.235894`5.824261888175419}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 77168, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[3.8832619447798185`, 0.2692890085666261]}, 
                   "AccuracyHistory" -> {
                    Around[0.6988581184442184, 0.017166139940928322`]}, 
                   "IterationHistory" -> {2}, 
                   "TimeHistory" -> {{
                    0.217069`5.788142799031277, 
                    0.235894`5.824261888175419}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5576293209070704, 0.024979096170408763`], 
                   "Accuracy" -> 
                   Around[0.7393579096182332, 0.04728940597103661], 
                   "EvaluationTime" -> 2.68406416415402*^-6, "TestSize" -> 
                   702., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.11800858540866221`, "Round" -> 2, 
                   "Iteration" -> 27, 
                   "Time" -> {
                    0.59961`6.229413860681895, 0.618498`6.242883293111283}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 79984., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.5432401781510674, 0.030031861221410744`], 
                    Around[0.5720184636630734, 0.027843845571499982`]}, 
                   "AccuracyHistory" -> {
                    Around[0.7852232554532458, 0.015407751882886215`], 
                    Around[0.6934925637832207, 0.01733995241536814]}, 
                   "IterationHistory" -> {23, 27}, 
                   "TimeHistory" -> {{
                    0.52963`6.175517570504376, 0.547945`6.190281961843018}, {
                    0.59961`6.229413860681895, 
                    0.618498`6.242883293111283}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5382921785447917, 0.043390189243549114`], 
                   "Accuracy" -> 
                   Around[0.7866783899144293, 0.023897270548369983`], 
                   "EvaluationTime" -> 2.5237906502809062`*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.08978935648403341, "Round" -> 3, 
                   "Iteration" -> 24, 
                   "Time" -> {
                    0.548954`6.191080947448505, 0.567767`6.205715140166979}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.015848931924611134`, "TrainingMemory" -> 98488, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5382921785447917, 0.03068149705108117]}, 
                   "AccuracyHistory" -> {
                    Around[0.7866783899144293, 0.01689792205660198]}, 
                   "IterationHistory" -> {24}, 
                   "TimeHistory" -> {{
                    0.548954`6.191080947448505, 
                    0.567767`6.205715140166979}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.4966987792186036, 0.036904467389576104`], 
                   "Accuracy" -> 
                   Around[0.7825904593549557, 0.025232258357673697`], 
                   "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.008129341439131688, "Round" -> 4, 
                   "Iteration" -> 42, 
                   "Time" -> {
                    1.160111`6.516044538223921, 1.181633`6.524027604707937}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.019952623149688785`, "TrainingMemory" -> 205568., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.4853428234906329, 0.04771208340134462], 
                    Around[0.5080547349465744, 0.05186431568155738]}, 
                   "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                   "IterationHistory" -> {33, 42}, 
                   "TimeHistory" -> {{
                    0.669558`6.277333196933509, 0.689392`6.290011232857989}, {
                    1.160111`6.516044538223921, 
                    1.181633`6.524027604707937}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.087088182519492*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.4966987792186036, 0.036904467389576104`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 205568., 
                  "TrainingTime" -> 0.03751300863256998|>, "Index" -> 8|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.001|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[1.8611144640903488`, 0.17916520215221085`], 
                   "Accuracy" -> 
                   Around[0.702149566553167, 0.02378083713448513], 
                   "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -1.333396301389753, "Round" -> 1, 
                   "Iteration" -> 4, 
                   "Time" -> {
                    0.247482`5.845088610563728, 0.266071`5.876542535366747}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 76912, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[1.8611144640903488`, 0.1266889293944869]}, 
                   "AccuracyHistory" -> {
                    Around[0.702149566553167, 0.0168155912000873]}, 
                   "IterationHistory" -> {4}, 
                   "TimeHistory" -> {{
                    0.247482`5.845088610563728, 
                    0.266071`5.876542535366747}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5431072123552391, 0.04241574780077298], 
                   "Accuracy" -> 
                   Around[0.7852232554532458, 0.02178985167845728], 
                   "EvaluationTime" -> 2.6840641641540205`*^-6, "TestSize" -> 
                   702, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.09820067751785044, "Round" -> 2, 
                   "Iteration" -> 21, 
                   "Time" -> {
                    0.490513`6.1421955154126495, 0.509288`6.158508436812969}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.015848931924611134`, "TrainingMemory" -> 79920, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5431072123552391, 0.02999246289902496]}, 
                   "AccuracyHistory" -> {
                    Around[0.7852232554532458, 0.015407751882886215`]}, 
                   "IterationHistory" -> {21}, 
                   "TimeHistory" -> {{
                    0.490513`6.1421955154126495, 
                    0.509288`6.158508436812969}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5382875401219072, 0.04338159572237159], 
                   "Accuracy" -> 
                   Around[0.7866783899144293, 0.023897270548369983`], 
                   "EvaluationTime" -> 2.5008066103980715`*^-6, "TestSize" -> 
                   582, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.08977773395607114, "Round" -> 3, 
                   "Iteration" -> 34, 
                   "Time" -> {
                    0.690402`6.290647034296558, 0.718581`6.30802072333615}, 
                   "TrainingSize" -> 150, "TrainingTime" -> 
                   0.015848931924611134`, "TrainingMemory" -> 98424, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5382875401219072, 0.03067542051398227]}, 
                   "AccuracyHistory" -> {
                    Around[0.7866783899144293, 0.01689792205660198]}, 
                   "IterationHistory" -> {34}, 
                   "TimeHistory" -> {{
                    0.690402`6.290647034296558, 
                    0.718581`6.30802072333615}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.49669375334240723`, 0.036899219656684024`], 
                   "Accuracy" -> 
                   Around[0.7825904593549557, 0.025232258357673697`], 
                   "EvaluationTime" -> 3.6505123383453134`*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.00811728942492529, "Round" -> 4, 
                   "Iteration" -> 45, 
                   "Time" -> {
                    1.273925`6.556688853956108, 1.298002`6.564820355134661}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.019952623149688785`, "TrainingMemory" -> 
                   206922.66666666666`, "ExperimentCount" -> 2, 
                   "MeanCrossEntropyHistory" -> {
                    Around[0.48534539948875965`, 0.04770987979158447], 
                    Around[0.5080421071960548, 0.05185729440658871]}, 
                   "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                   "IterationHistory" -> {37, 45}, 
                   "TimeHistory" -> {{
                    1.057582`6.475859044027099, 1.078331`6.484297084039249}, {
                    1.273925`6.556688853956108, 
                    1.298002`6.564820355134661}}|>}, 
                "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.6505123383453134`*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.49669375334240723`, 0.036899219656684024`], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 
                  206922.66666666666`, "TrainingTime" -> 
                  0.03751300863256998|>, "Index" -> 9|>, <|
               "Value" -> "LogisticRegression", 
                "Options" -> <|
                 "L1Regularization" -> <|"Value" -> 0|>, 
                  "L2Regularization" -> <|"Value" -> 0.1|>, 
                  "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                  MaxIterations -> <|"Value" -> 30|>|>|> -> <|
               "Experiments" -> {<|
                  "MeanCrossEntropy" -> 
                   Around[0.8183292490011913, 0.06757557159538871], 
                   "Accuracy" -> 
                   Around[0.6998799751310648, 0.023853320021288357`], 
                   "EvaluationTime" -> 2.6475273774900786`*^-6, "TestSize" -> 
                   724, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.5090403646802856, "Round" -> 1, 
                   "Iteration" -> 14, 
                   "Time" -> {
                    0.383407`6.035205031181526, 0.401792`6.055546278843884}, 
                   "TrainingSize" -> 8, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 76912, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8183292490011913, 0.047783144917656395`]}, 
                   "AccuracyHistory" -> {
                    Around[0.6998799751310648, 0.016866844340865838`]}, 
                   "IterationHistory" -> {14}, 
                   "TimeHistory" -> {{
                    0.383407`6.035205031181526, 
                    0.401792`6.055546278843884}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.5346465575134847, 0.03819787334789356], 
                   "Accuracy" -> 
                   Around[0.7853235753258875, 0.02178360333889455], 
                   "EvaluationTime" -> 2.610470985159619*^-6, "TestSize" -> 
                   702, "ModelMemory" -> 8968, 
                   "ModelUtility" -> -0.08118878593382506, "Round" -> 2, 
                   "Iteration" -> 19, 
                   "Time" -> {
                    0.456939`6.111403220411299, 0.475309`6.128521031256609}, 
                   "TrainingSize" -> 30, "TrainingTime" -> 
                   0.012589254117941668`, "TrainingMemory" -> 80048, 
                   "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5346465575134847, 0.027009975271200425`]}, 
                   "AccuracyHistory" -> {
                    Around[0.7853235753258875, 0.015403333639610254`]}, 
                   "IterationHistory" -> {19}, 
                   "TimeHistory" -> {{
                    0.456939`6.111403220411299, 
                    0.475309`6.128521031256609}}|>, <|
                  "MeanCrossEntropy" -> 
                   Around[0.49659421155666605`, 0.03665359166417166], 
                   "Accuracy" -> 
                   Around[0.7825904593549557, 0.025232258357673697`], 
                   "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                   146., "ModelMemory" -> 8968., 
                   "ModelUtility" -> -0.007822313459622476, "Round" -> 4, 
                   "Iteration" -> 46, 
                   "Time" -> {
                    1.299556`6.56533999219793, 1.320664`6.57233733305825}, 
                   "TrainingSize" -> 586, "TrainingTime" -> 
                   0.019952623149688785`, "TrainingMemory" -> 205648., 
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.48550214151878435`, 0.04750226414725013], 
                    Around[0.5076862815945478, 0.05155751150482349]}, 
                   "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                   "IterationHistory" -> {39, 46}, 
                   "TimeHistory" -> {{
                    1.095678`6.491227935080636, 1.116302`6.499326696332829}, {
                    1.299556`6.56533999219793, 1.320664`6.57233733305825}}|>},
                 "PredictedPerformances" -> <|
                 "EvaluationTime" -> 3.087088182519492*^-6, 
                  "MeanCrossEntropy" -> 
                  Around[0.49659421155666605`, 0.03665359166417166], 
                  "ModelMemory" -> 8968., "TrainingMemory" -> 205648., 
                  "TrainingTime" -> 0.03751300863256998|>, "Index" -> 10|>|>, 
             
             TypeSystem`Assoc[
              TypeSystem`Struct[{"Value", "Options"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["LogisticRegression"]], 
                TypeSystem`Assoc[TypeSystem`AnyType, 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
              
              TypeSystem`Struct[{
               "Experiments", "PredictedPerformances", "Index"}, {
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
                 TypeSystem`AnyLength], 
                
                TypeSystem`Struct[{
                 "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                  "TrainingMemory", "TrainingTime"}, {
                  TypeSystem`Atom[Real], TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Atom[Integer]}], 10], <||>], 
           "TrainingSizes" -> {8, 30, 150, 586}, "MaxTrainingSize" -> 732, 
           "PreprocessorEvaluationTime" -> 2.171875*^-6, "PreprocessorMemory" -> 
           97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
           "BaselineLogProbability" -> -0.6792695614395325, "VariableBudget" -> 
           True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
           "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
           "RoundPartitioning" -> 
           Dataset[{<|
              "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
               "ElapsedTimes" -> 0.143472, "ExperimentCounts" -> 10|>, <|
              "TrainingSizes" -> 30, "TimeBudgets" -> 0.19599999999999998`, 
               "ElapsedTimes" -> 0.198022, "ExperimentCounts" -> 14|>, <|
              "TrainingSizes" -> 150, "TimeBudgets" -> 0.27999999999999997`, 
               "ElapsedTimes" -> 0.41225, "ExperimentCounts" -> 7|>, <|
              "TrainingSizes" -> 586, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
               0.401014, "ExperimentCounts" -> 20|>}, 
             TypeSystem`Vector[
              
              TypeSystem`Struct[{
               "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                "ExperimentCounts"}, {
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
         None, "Log" -> <|
          "Example" -> 
           MachineLearning`MLDataset[<|
             "f1" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
                7168142382301173801|>, 
              "f2" -> <|
               "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
                1978735388468315165|>, 
              "f3" -> <|
               "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
                9071588231046195481|>|>, <|
             "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
              0, "RawExample" -> False|>], "TrainingTime" -> 1.443603, 
           "MaxTrainingMemory" -> 26399056, "DataMemory" -> 178408, 
           "FunctionMemory" -> 343824, "LanguageVersion" -> {14.1, 0}, "Date" -> 
           DateObject[{2024, 8, 10, 13, 29, 2.511395`7.152490013883712}, 
             "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
           "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
           "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}]}], "\[RightAssociation]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.93229978502278*^9, 3.932299794018561*^9}},
 CellLabel->"In[10]:=",
 CellID->841268577,ExpressionUUID->"0bf3c5f9-ff0e-47a0-82fb-01a4cbd33560"],

Cell["Here are record classifications with it:", "ExampleText",
 CellChangeTimes->{{3.932299805486699*^9, 3.932299827210026*^9}},
 CellID->1383879596,ExpressionUUID->"86480a43-b3d0-4054-af92-aaf8584449a1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"records", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<3rd\>\"", ",", "7.`", ",", "\"\<male\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<1st\>\"", ",", "58.`", ",", "\"\<female\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<2nd\>\"", ",", "54.`", ",", "\"\<female\>\""}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EnsembleClassify", "[", 
  RowBox[{"aCLs", ",", "records"}], "]"}]}], "Input",
 CellChangeTimes->{{3.932299829508271*^9, 3.932299877070959*^9}, {
  3.932300219788418*^9, 3.9323002331697206`*^9}},
 CellLabel->"In[23]:=",
 CellID->1858688412,ExpressionUUID->"3502df4b-fce3-4e01-944c-cd15498279a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"died\"\>", ",", "\<\"survived\"\>", ",", "\<\"survived\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.932299845095937*^9, 3.93229987744034*^9, 
  3.932300234126356*^9},
 CellLabel->"Out[24]=",
 CellID->1043168489,ExpressionUUID->"9c30d025-6f9a-4dd9-84ab-cf6ea45c1ce0"]
}, Open  ]],

Cell["Here the classifier probabilities are obtained:", "ExampleText",
 CellChangeTimes->{{3.932300154440372*^9, 3.932300238297327*^9}},
 CellID->1897402187,ExpressionUUID->"3dbf52f2-892b-49b5-b5d4-402b21f9b6d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EnsembleClassifierProbabilities", "[", 
  RowBox[{"aCLs", ",", "records"}], "]"}]], "Input",
 CellChangeTimes->{{3.932299829508271*^9, 3.932299877070959*^9}, {
  3.932300122671976*^9, 3.932300140798863*^9}, {3.9323001845119743`*^9, 
  3.932300185233921*^9}, {3.932300242359671*^9, 3.932300244147625*^9}},
 CellLabel->"In[25]:=",
 CellID->1653882606,ExpressionUUID->"7061dbac-2bbe-4980-80d3-806c8748ddc8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"died\"\>", "\[Rule]", "0.7419341296418317`"}], ",", 
     RowBox[{"\<\"survived\"\>", "\[Rule]", "0.25806587035816836`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"died\"\>", "\[Rule]", "0.1490171666037442`"}], ",", 
     RowBox[{"\<\"survived\"\>", "\[Rule]", "0.8509828333962558`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"died\"\>", "\[Rule]", "0.4367339928196741`"}], ",", 
     RowBox[{"\<\"survived\"\>", "\[Rule]", "0.5632660071803258`"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.932300141729065*^9, 3.932300185629951*^9, 
  3.9323002446152153`*^9},
 CellLabel->"Out[25]=",
 CellID->330375356,ExpressionUUID->"811280e2-6874-49b4-8b10-b40010fc0f93"]
}, Open  ]],

Cell["Here the classifier votes are obtained:", "ExampleText",
 CellChangeTimes->{{3.932300154440372*^9, 3.932300173294962*^9}, {
   3.932300252073922*^9, 3.932300254442567*^9}, 3.932300324204403*^9},
 CellID->1047172137,ExpressionUUID->"97a2a240-966b-4b1f-81a2-d9e9a56e05a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EnsembleClassifierVotes", "[", 
  RowBox[{"aCLs", ",", "records"}], "]"}]], "Input",
 CellChangeTimes->{{3.932299829508271*^9, 3.932299877070959*^9}, {
  3.932300122671976*^9, 3.932300140798863*^9}, {3.932300257231493*^9, 
  3.932300260133772*^9}},
 CellLabel->"In[26]:=",
 CellID->1202102332,ExpressionUUID->"4262578a-c5f4-4b62-9352-70c17379325d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"died\"\>", "\[Rule]", "3"}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"survived\"\>", "\[Rule]", "3"}], "\[RightAssociation]"}], 
   ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"survived\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"died\"\>", "\[Rule]", "1"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.932300141729065*^9, 3.932300260507287*^9},
 CellLabel->"Out[26]=",
 CellID->1034390694,ExpressionUUID->"4af26437-117c-4a3e-bbdf-182d8f32f6b2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "More Examples",
 Cell[BoxData[
  TemplateBox[{"MoreExamples", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Extended examples in standardized sections.", "MoreInfoText"], 
       BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "95519474-514a-451e-b97c-d3f93367b07d"]
}], "ExtendedExamplesSection",
 CellTags->"ExtendedExamples",
 CellID->2025905440,ExpressionUUID->"300e00ff-0530-4099-9daa-c04dcb6364d2"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Scope", "ExampleSection",ExpressionUUID->
   "5d154403-0117-4721-9d9c-b471ac166627"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1039506895,ExpressionUUID->"a2e98892-9b49-4210-9ac6-c71d72eaeade"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Generalizations & Extensions", "ExampleSection",ExpressionUUID->
   "551e4f0f-4589-4cd6-b86a-63bf7323f0c2"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1212915920,ExpressionUUID->"8a134c26-437c-40e5-9b1a-6909f29856e3"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Options", "ExampleSection",ExpressionUUID->
   "0008613e-c187-4236-b193-2e4270f69941"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1563090116,ExpressionUUID->"fd94e71e-da0d-4e5d-90e8-1702ef85e42b"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "5f988228-629a-4d81-a0cb-3cdc69a61522"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->688125861,ExpressionUUID->"f531f645-3722-4198-8a81-516a74db4d3f"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "91f27167-f679-4e85-bae0-a31c8ecf51ad"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->1131906732,ExpressionUUID->"0ac6566e-fdd0-45f4-b05e-cd6032570f91"]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell[
  "Applications", "ExampleSection",ExpressionUUID->
   "6a32cc99-631d-422b-a7d3-093646212d6d"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1546299598,ExpressionUUID->"c90001d8-b516-4906-8ba9-c2b19f2c8fa0"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Properties & Relations", "ExampleSection",ExpressionUUID->
   "9f1370cd-61f8-4dde-9baa-ec402ec656f3"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1957731239,ExpressionUUID->"ba973841-5569-42b2-a109-eb9e88544546"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Possible Issues", "ExampleSection",ExpressionUUID->
   "0334c64d-c881-4456-a477-3544d00b85a2"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1991978186,ExpressionUUID->"8fd6d3ed-f74b-4369-93c1-9017943ac0d2"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Interactive Examples", "ExampleSection",ExpressionUUID->
   "bb5c45d9-b082-487f-81d5-d5095372aea2"],
  $Line = 0; Null]], "ExampleSection",
 CellID->2054799019,ExpressionUUID->"35dab112-a199-4d35-ab3c-4385915fa806"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Neat Examples", "ExampleSection",ExpressionUUID->
   "66de8c31-0fff-4a18-be7b-27f87b328fd7"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1322584926,ExpressionUUID->"037a5d99-d068-4752-bf33-1c76757832e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->81621185,ExpressionUUID->"caff3191-6158-41e9-bc1d-8bf186d18c6e"],

Cell[TextData[{
 "New in: ",
 Cell["XX", "HistoryData",
  CellTags->"New",ExpressionUUID->"d5a7f56e-e1d2-45d5-a7e2-4d2db4ae113e"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"425acb26-5e3b-40d3-8c71-e743d0868f76"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "c1e36cf4-f53e-4f81-b506-de2ab8ce8e8a"]
}], "History",
 CellID->1712689509,ExpressionUUID->"22e2aff6-c6e6-4cf3-b31d-c0318b777c77"],

Cell[CellGroupData[{

Cell[TextData[{
 "Categorization",
 Cell[BoxData[
  TemplateBox[{"Metadata", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Metadata such as page URI, context, and type of documentation page.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "7b1d2562-71ea-48fa-b9cf-fd8b2d3f7b17"]
}], "CategorizationSection",
 CellID->301773375,ExpressionUUID->"5366022d-5f95-4750-8d16-c7f0a87c7be7"],

Cell["Symbol", "Categorization",
 CellLabel->"Entity Type",
 CellID->1696223058,ExpressionUUID->"5aa8cd2c-8ce9-4da6-aae2-fb2afddd5b61"],

Cell["AntonAntonov/ClassifierEnsembles", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1351201818,ExpressionUUID->"9f7e0e84-15c3-4532-afec-b348567cd980"],

Cell["AntonAntonov`ClassifierEnsembles`", "Categorization",
 CellLabel->"Context",
 CellID->9388101,ExpressionUUID->"276347c8-dca4-44fd-b731-bd1f427d47bd"],

Cell["AntonAntonov/ClassifierEnsembles/ref/EnsembleClassify", "Categorization",
 CellLabel->"URI",
 CellID->1019507276,ExpressionUUID->"745e4f65-350b-4ebb-91dc-661d5d9d120e"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->694274101,ExpressionUUID->"a850f382-1246-43f4-a7aa-a5fbc7f3e752"],

Cell["XXXX", "Keywords",
 CellID->1386161356,ExpressionUUID->"ff4dd7be-49e0-466e-b8ab-e405149ec118"]
}, Closed]],

Cell[CellGroupData[{

Cell["Syntax Templates", "TemplatesSection",
 CellID->1311307636,ExpressionUUID->"4b1442d1-9579-4268-943c-9dc9bbd85867"],

Cell[BoxData[""], "Template",
 CellLabel->"Additional Function Template",
 CellID->1670252738,ExpressionUUID->"fe604874-0cfc-49c4-b664-ed00c57e2196"],

Cell[BoxData[""], "Template",
 CellLabel->"Arguments Pattern",
 CellID->31533982,ExpressionUUID->"e2009c39-3069-4567-b24c-bf1e071c0eed"],

Cell[BoxData[""], "Template",
 CellLabel->"Local Variables",
 CellID->1710658312,ExpressionUUID->"25077d70-7af3-405d-a400-e5a3a30e2721"],

Cell[BoxData[""], "Template",
 CellLabel->"Color Equal Signs",
 CellID->523183748,ExpressionUUID->"2b6b1280-4e34-439f-85a8-1c6b52b2de5b"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1313, 824},
WindowMargins->{{1062, Automatic}, {Automatic, 102}},
TaggingRules-><|"Paclet" -> "AntonAntonov/ClassifierEnsembles"|>,
CellContext->"Global`",
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "FunctionPageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"132da6f4-0870-4a2d-866e-67da2d76cf08"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ExtendedExamples"->{
  Cell[309668, 5539, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"300e00ff-0530-4099-9daa-c04dcb6364d2",
   CellTags->"ExtendedExamples",
   CellID->2025905440]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ExtendedExamples", 316063, 5728}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 112, 1, 90, "ObjectName",ExpressionUUID->"12216653-c621-41ac-9941-4f52dc738e7d",
 CellID->79925492],
Cell[691, 25, 772, 17, 116, "Usage",ExpressionUUID->"5552bdc8-8803-4a14-b731-614f8e3669e2",
 CellID->1130464669],
Cell[1466, 44, 96, 1, 32, "Notes",ExpressionUUID->"93db45d4-8b80-4113-a13a-726fd9a4623a",
 CellID->931866874]
}, Open  ]],
Cell[CellGroupData[{
Cell[1599, 50, 458, 13, 48, "SeeAlsoSection",ExpressionUUID->"13637004-b552-4178-8b57-6a7b410fba2b",
 CellID->288313747],
Cell[2060, 65, 1653, 42, 27, "SeeAlso",ExpressionUUID->"730b6b5e-719e-4554-8918-5bdcfba6ea49",
 CellID->966038197]
}, Open  ]],
Cell[CellGroupData[{
Cell[3750, 112, 436, 12, 49, "TechNotesSection",ExpressionUUID->"184985db-9a2e-436e-842f-df09186d6e1f",
 CellID->1227605659],
Cell[4189, 126, 101, 1, 22, "Tutorials",ExpressionUUID->"cc3e8fe0-1d55-4bd1-ae0c-d5164d40b461",
 CellID->1492914084]
}, Open  ]],
Cell[CellGroupData[{
Cell[4327, 132, 117, 1, 47, "MoreAboutSection",ExpressionUUID->"d3685d6b-62cd-4a13-9bca-d1a3fb2bfe17",
 CellID->208078240],
Cell[4447, 135, 101, 1, 22, "MoreAbout",ExpressionUUID->"0d25be76-0e9d-4dac-a58a-8ec58bb7ce4b",
 CellID->1067602364]
}, Open  ]],
Cell[CellGroupData[{
Cell[4585, 141, 472, 13, 48, "RelatedLinksSection",ExpressionUUID->"d464bbaa-de02-4a97-8b9b-9c72766210e8",
 CellID->967061063],
Cell[5060, 156, 104, 1, 22, "RelatedLinks",ExpressionUUID->"1dcf08a3-a29e-434b-8748-0dd427f11a1d",
 CellID->1239045345]
}, Open  ]],
Cell[CellGroupData[{
Cell[5201, 162, 530, 14, 86, "ExamplesInitializationSection",ExpressionUUID->"91a1024e-4b6e-4cc6-916e-e6432c67b5c6",
 CellID->486188456],
Cell[5734, 178, 192, 3, 57, "ExampleInitialization",ExpressionUUID->"1d618ff4-9372-426a-bd0f-51cff00a098c",
 CellID->194103157]
}, Open  ]],
Cell[CellGroupData[{
Cell[5963, 186, 442, 12, 88, "PrimaryExamplesSection",ExpressionUUID->"15e115a7-4f9b-4efb-8447-dc77eb46df78",
 CellID->264099906],
Cell[6408, 200, 199, 2, 28, "ExampleText",ExpressionUUID->"27d171ec-5050-4196-b0bc-2ccfaa2c5a77",
 CellID->254785047],
Cell[6610, 204, 298809, 5222, 309, "Input",ExpressionUUID->"0bf3c5f9-ff0e-47a0-82fb-01a4cbd33560",
 CellID->841268577],
Cell[305422, 5428, 205, 2, 28, "ExampleText",ExpressionUUID->"86480a43-b3d0-4054-af92-aaf8584449a1",
 CellID->1383879596],
Cell[CellGroupData[{
Cell[305652, 5434, 722, 17, 79, "Input",ExpressionUUID->"3502df4b-fce3-4e01-944c-cd15498279a8",
 CellID->1858688412],
Cell[306377, 5453, 315, 7, 31, "Output",ExpressionUUID->"9c30d025-6f9a-4dd9-84ab-cf6ea45c1ce0",
 CellID->1043168489]
}, Open  ]],
Cell[306707, 5463, 212, 2, 28, "ExampleText",ExpressionUUID->"3dbf52f2-892b-49b5-b5d4-402b21f9b6d2",
 CellID->1897402187],
Cell[CellGroupData[{
Cell[306944, 5469, 428, 7, 32, "Input",ExpressionUUID->"7061dbac-2bbe-4980-80d3-806c8748ddc8",
 CellID->1653882606],
Cell[307375, 5478, 919, 21, 78, "Output",ExpressionUUID->"811280e2-6874-49b4-8b10-b40010fc0f93",
 CellID->330375356]
}, Open  ]],
Cell[308309, 5502, 276, 3, 28, "ExampleText",ExpressionUUID->"97a2a240-966b-4b1f-81a2-d9e9a56e05a9",
 CellID->1047172137],
Cell[CellGroupData[{
Cell[308610, 5509, 372, 7, 32, "Input",ExpressionUUID->"4262578a-c5f4-4b62-9352-70c17379325d",
 CellID->1202102332],
Cell[308985, 5518, 634, 15, 31, "Output",ExpressionUUID->"4af26437-117c-4a3e-bbdf-182d8f32f6b2",
 CellID->1034390694]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[309668, 5539, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"300e00ff-0530-4099-9daa-c04dcb6364d2",
 CellTags->"ExtendedExamples",
 CellID->2025905440],
Cell[310159, 5554, 242, 5, 40, "ExampleSection",ExpressionUUID->"a2e98892-9b49-4210-9ac6-c71d72eaeade",
 CellID->1039506895],
Cell[310404, 5561, 265, 5, 24, "ExampleSection",ExpressionUUID->"8a134c26-437c-40e5-9b1a-6909f29856e3",
 CellID->1212915920],
Cell[CellGroupData[{
Cell[310694, 5570, 244, 5, 24, "ExampleSection",ExpressionUUID->"fd94e71e-da0d-4e5d-90e8-1702ef85e42b",
 CellID->1563090116],
Cell[310941, 5577, 246, 5, 28, "ExampleSubsection",ExpressionUUID->"f531f645-3722-4198-8a81-516a74db4d3f",
 CellID->688125861],
Cell[311190, 5584, 247, 5, 22, "ExampleSubsection",ExpressionUUID->"0ac6566e-fdd0-45f4-b05e-cd6032570f91",
 CellID->1131906732]
}, Open  ]],
Cell[311452, 5592, 249, 5, 40, "ExampleSection",ExpressionUUID->"c90001d8-b516-4906-8ba9-c2b19f2c8fa0",
 CellID->1546299598],
Cell[311704, 5599, 259, 5, 24, "ExampleSection",ExpressionUUID->"ba973841-5569-42b2-a109-eb9e88544546",
 CellID->1957731239],
Cell[311966, 5606, 252, 5, 24, "ExampleSection",ExpressionUUID->"8fd6d3ed-f74b-4369-93c1-9017943ac0d2",
 CellID->1991978186],
Cell[312221, 5613, 257, 5, 24, "ExampleSection",ExpressionUUID->"35dab112-a199-4d35-ab3c-4385915fa806",
 CellID->2054799019],
Cell[312481, 5620, 250, 5, 24, "ExampleSection",ExpressionUUID->"037a5d99-d068-4752-bf33-1c76757832e6",
 CellID->1322584926]
}, Open  ]],
Cell[CellGroupData[{
Cell[312768, 5630, 109, 1, 88, "MetadataSection",ExpressionUUID->"caff3191-6158-41e9-bc1d-8bf186d18c6e",
 CellID->81621185],
Cell[312880, 5633, 477, 12, 31, "History",ExpressionUUID->"22e2aff6-c6e6-4cf3-b31d-c0318b777c77",
 CellID->1712689509],
Cell[CellGroupData[{
Cell[313382, 5649, 484, 13, 25, "CategorizationSection",ExpressionUUID->"5366022d-5f95-4750-8d16-c7f0a87c7be7",
 CellID->301773375],
Cell[313869, 5664, 135, 2, 42, "Categorization",ExpressionUUID->"5aa8cd2c-8ce9-4da6-aae2-fb2afddd5b61",
 CellID->1696223058],
Cell[314007, 5668, 161, 2, 42, "Categorization",ExpressionUUID->"9f7e0e84-15c3-4532-afec-b348567cd980",
 CellID->1351201818],
Cell[314171, 5672, 155, 2, 42, "Categorization",ExpressionUUID->"276347c8-dca4-44fd-b731-bd1f427d47bd",
 CellID->9388101],
Cell[314329, 5676, 174, 2, 42, "Categorization",ExpressionUUID->"745e4f65-350b-4ebb-91dc-661d5d9d120e",
 CellID->1019507276]
}, Closed]],
Cell[CellGroupData[{
Cell[314540, 5683, 110, 1, 24, "KeywordsSection",ExpressionUUID->"a850f382-1246-43f4-a7aa-a5fbc7f3e752",
 CellID->694274101],
Cell[314653, 5686, 100, 1, 87, "Keywords",ExpressionUUID->"ff4dd7be-49e0-466e-b8ab-e405149ec118",
 CellID->1386161356]
}, Closed]],
Cell[CellGroupData[{
Cell[314790, 5692, 120, 1, 24, "TemplatesSection",ExpressionUUID->"4b1442d1-9579-4268-943c-9dc9bbd85867",
 CellID->1311307636],
Cell[314913, 5695, 149, 2, 87, "Template",ExpressionUUID->"fe604874-0cfc-49c4-b664-ed00c57e2196",
 CellID->1670252738],
Cell[315065, 5699, 136, 2, 87, "Template",ExpressionUUID->"e2009c39-3069-4567-b24c-bf1e071c0eed",
 CellID->31533982],
Cell[315204, 5703, 136, 2, 87, "Template",ExpressionUUID->"25077d70-7af3-405d-a400-e5a3a30e2721",
 CellID->1710658312],
Cell[315343, 5707, 137, 2, 87, "Template",ExpressionUUID->"2b6b1280-4e34-439f-85a8-1c6b52b2de5b",
 CellID->523183748]
}, Closed]]
}, Open  ]]
}
]
*)

