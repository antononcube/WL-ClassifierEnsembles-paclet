(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    941115,      16779]
NotebookOptionsPosition[    933447,      16618]
NotebookOutlinePosition[    934280,      16645]
CellTagsIndexPosition[    934198,      16640]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ResamplingEnsembleClassifier", "ObjectName",
 CellID->1624440531,ExpressionUUID->"682df69d-2ae5-459a-9a25-a4058d20c36f"],

Cell[TextData[{
 Cell["   ", "ModInfo",ExpressionUUID->"f8398630-424d-44ec-a9f2-a7d7e88c6718"],
 Cell[BoxData[
  RowBox[{
   ButtonBox["ResamplingEnsembleClassifier",
    BaseStyle->"Link",
    ButtonData->
     "paclet:AntonAntonovClassifierEnsembles/ref/\
ResamplingEnsembleClassifier"], "[", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"_String", " ", "|", " ", 
        RowBox[{"{", 
         RowBox[{"_String", ",", 
          RowBox[{"_", "?", 
           ButtonBox["NumberQ",
            BaseStyle->"Link"]}]}], "}"}], " ", "|", " ", 
        RowBox[{"{", 
         RowBox[{"_String", ",", 
          RowBox[{"_", "?", 
           ButtonBox["NumberQ",
            BaseStyle->"Link"]}], ",", "_Integer"}], "}"}]}], ")"}], " ", 
      ".."}], "}"}], ",", 
    StyleBox["data_", "TI"]}], " ", "]"}]], "InlineFormula",ExpressionUUID->
  "0754ffcd-d4a5-43d6-8de7-8fe494e7f6ae"],
 "\[LineSeparator]builds an ensemble classifier based on a specification."
}], "Usage",
 CellChangeTimes->{3.9322514915323*^9},
 CellID->1012400206,ExpressionUUID->"7a324f2c-3f89-4f44-ad58-ad75bf0ac7e4"],

Cell["XXXX", "Notes",
 CellID->897327061,ExpressionUUID->"5d80d149-0ab7-44a1-bfbb-624555c4d057"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "See Also",
 Cell[BoxData[
  TemplateBox[{"SeeAlso", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related reference (function) pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "de580a81-1d20-41b7-bf96-352a58fad78b"]
}], "SeeAlsoSection",
 CellID->1745744993,ExpressionUUID->"a19367a0-e6f0-47de-b1bb-cd7e61e2fe66"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["EnsembleClassifierMeasurements",
   BaseStyle->"Link",
   ButtonData->
    "paclet:AntonAntonov/ClassifierEnsembles/ref/\
EnsembleClassifierMeasurements"]], "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},ExpressionUUID->
  "ff065386-82c4-4b65-b20d-9725efc3e611"],
 Cell[BoxData[
  RowBox[{
  Cell[TextData[StyleBox[
   " \[FilledVerySmallSquare] ", "InlineSeparator"]],ExpressionUUID->
    "f328edc4-fe99-4f72-a7eb-57a2eea2ba3e"], 
   DynamicModuleBox[{$CellContext`nbobj$$ = NotebookObject[
    "027daaf6-f46e-4dae-8d22-74862f933d26", 
     "96e41f62-9bf1-49d3-b5b5-f1337eb3852e"], $CellContext`cellobj$$ = 
    CellObject[
    "a21e6952-ca8f-4ff6-abf6-794b2cb41698", 
     "67027753-47ee-4063-be60-258d1eaeda15"]}, 
    TemplateBox[{
      GraphicsBox[{{
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         CircleBox[{0, 0}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{0, 0.62}, {0, -0.62}}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{-0.62, 0}, {0.62, 0}}]}}, 
       ImagePadding -> {{1., 1.}, {2.4, 1.}}, ImageSize -> 16, 
       PlotRange -> {{-1.06, 1.06}, {-1.06, 1.06}}, 
       BaselinePosition -> (Center -> 
        Center)], $CellContext`nbobj$$, $CellContext`cellobj$$},
     "InlineListingAddButton"],
    Initialization:>($CellContext`nbobj$$ = 
      EvaluationNotebook[]; $CellContext`cellobj$$ = EvaluationCell[])]}]], 
  "InlineListingAddButton",ExpressionUUID->
  "a21e6952-ca8f-4ff6-abf6-794b2cb41698"]
}], "SeeAlso",
 CellChangeTimes->{{3.9322971066271667`*^9, 3.932297122010035*^9}},
 CellID->1814512037,ExpressionUUID->"4a3b8eed-5c56-4d77-9973-7742207b08ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tech Notes",
 Cell[BoxData[
  TemplateBox[{"TechNotes", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Insert links to related tech notes.", "MoreInfoText"], BaseStyle -> 
       "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "0b1a043f-612f-45f9-aebf-99a4cb438585"]
}], "TechNotesSection",
 CellID->88534812,ExpressionUUID->"4d939abc-f55d-433e-8fbd-90fbb6c5f0be"],

Cell["XXXX", "Tutorials",
 CellID->1945901560,ExpressionUUID->"617783c5-f947-471b-9b70-27c37fa63543"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "MoreAboutSection",
 CellID->739058757,ExpressionUUID->"f86ea839-7084-4b75-8ce0-f519141be287"],

Cell["XXXX", "MoreAbout",
 CellID->315114651,ExpressionUUID->"ac793388-cd1a-456c-bcca-f7bac316f3d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Links",
 Cell[BoxData[
  TemplateBox[{"RelatedLinks", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related page, including web pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "fefe35ae-b5d5-4b9b-93c3-828767adc678"]
}], "RelatedLinksSection",
 CellID->437265855,ExpressionUUID->"55388d56-8216-4aab-840f-61f76768e3bd"],

Cell["XXXX", "RelatedLinks",
 CellID->438184951,ExpressionUUID->"bd880d1a-a818-4cf6-a6c9-b7e99c89411c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples Initialization",
 Cell[BoxData[
  TemplateBox[{"ExamplesInitialization", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Input that is to be evaluated before any examples are run, e.g. \
Needs[\[Ellipsis]].", "MoreInfoText"], BaseStyle -> "IFrameBox"]], 
     "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "dfc403d5-3690-4d48-8652-46cab75fad47"]
}], "ExamplesInitializationSection",
 CellID->853045894,ExpressionUUID->"5883615e-77a7-46b7-bb52-50a0db6e4856"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<AntonAntonov`ClassifierEnsembles`\>\"", 
  "]"}]], "ExampleInitialization",
 CellID->541513086,ExpressionUUID->"8f41e62c-de78-4405-871a-ad16d4e22542"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     StyleBox[
      RowBox[{"Basic", " ", "Examples"}], "PrimaryExamplesSection"], 
     ButtonBox[
      RowBox[{
       RowBox[{"More", " ", "Examples"}], " ", "\[RightTriangle]"}],
      BaseStyle->"ExtendedExamplesLink",
      ButtonData:>"ExtendedExamples"]}
   }],
  $Line = 0; Null]], "PrimaryExamplesSection",
 CellID->174740416,ExpressionUUID->"7f30db3d-7173-4f1f-bb88-4bdb211453d7"],

Cell["Get training data:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.932251684695414*^9, 3.932251689577181*^9}},
 CellID->657007628,ExpressionUUID->"784edf58-c09f-416e-9c82-2392391f042a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Flatten", "@*", "List"}], ")"}], "@@@", "data"}], ")"}], "[", 
    
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "_Missing", ",", "___"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.932251610569993*^9, 3.932251616668548*^9}},
 CellLabel->"In[1]:=",
 CellID->1250247880,ExpressionUUID->"7b4652bf-4a58-4a5d-a963-a3b8cfa13437"],

Cell["Get testing data:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.9322516920947104`*^9, 3.932251695966352*^9}},
 CellID->2010608312,ExpressionUUID->"f11a7d43-ec7b-4621-8acd-feebcc7ad07e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Flatten", "@*", "List"}], ")"}], "@@@", "data"}], ")"}], "[", 
    
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "_Missing", ",", "___"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.932251610569993*^9, 3.932251616668548*^9}, 
   3.9322516503845587`*^9},
 CellLabel->"In[4]:=",
 CellID->231973877,ExpressionUUID->"48fb692a-9b05-415e-ab1d-db499e31be22"],

Cell["Make nine classifiers using three different methods:", "ExampleText",
 CellChangeTimes->{{3.932296282081286*^9, 3.932296299113987*^9}},
 CellID->1282629811,ExpressionUUID->"f87a376c-b696-4747-bd8f-aefa4b1b2e1f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aCLs", "=", 
   RowBox[{"ResamplingEnsembleClassifier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<NearestNeighbors\>\"", ",", "0.9", ",", "3"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"\"\<RandomForest\>\"", ",", "0.8", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<SupportVectorMachine\>\"", ",", "0.9", ",", "3"}], 
        "}"}]}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"trainingData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", 
         RowBox[{"1", ";;", 
          RowBox[{"-", "2"}]}]}], "\[RightDoubleBracket]"}], "\[Rule]", 
       RowBox[{"trainingData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", 
         RowBox[{"-", "1"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"aCLs", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.706656453867037*^9, 3.706656453968857*^9}, {
  3.706656824951811*^9, 3.7066568767270937`*^9}, {3.706657226786166*^9, 
  3.706657250321175*^9}, {3.7066572913978662`*^9, 3.706657309770399*^9}, {
  3.706658252523445*^9, 3.706658269678029*^9}, {3.706658308963687*^9, 
  3.706658310909718*^9}, {3.706658485458063*^9, 3.706658497561164*^9}, {
  3.70665954210775*^9, 3.706659546911448*^9}, {3.706684896670835*^9, 
  3.706684896676652*^9}, {3.93229633755827*^9, 3.932296433555485*^9}},
 CellLabel->"In[7]:=",
 CellID->1824665387,ExpressionUUID->"44db882e-49b8-40c3-a7c3-3341e33b128e"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.9322966358247643`*^9, 3.932296824510098*^9},
 CellLabel->"Out[8]=",
 CellID->597943489,ExpressionUUID->"7998725e-3c31-40e7-8bb8-aee3175048b8"]
}, Open  ]],

Cell["Display the elements of the ensemble classifier:", "ExampleText",
 CellChangeTimes->{{3.932296435253552*^9, 3.932296439323402*^9}, {
  3.932296515567194*^9, 3.932296531734251*^9}},
 CellID->876245005,ExpressionUUID->"766c0a2e-e1ad-4e06-8375-7f34319ebb89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<GridTableForm\>\"", "]"}], "[", 
  RowBox[{
   RowBox[{"List", "@@@", 
    RowBox[{"Normal", "[", "aCLs", "]"}]}], ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Classifier name\>\"", ",", "\"\<Classifier\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.706656453867037*^9, 3.706656453968857*^9}, {
  3.706656824951811*^9, 3.7066568767270937`*^9}, {3.706657226786166*^9, 
  3.706657250321175*^9}, {3.7066572913978662`*^9, 3.706657309770399*^9}, {
  3.706658252523445*^9, 3.706658269678029*^9}, {3.706658308963687*^9, 
  3.706658310909718*^9}, {3.706658485458063*^9, 3.706658497561164*^9}, {
  3.70665954210775*^9, 3.706659546911448*^9}, {3.706684896670835*^9, 
  3.706684896676652*^9}, {3.93229633755827*^9, 3.9322964953966427`*^9}},
 CellLabel->"In[9]:=",
 CellID->1822858045,ExpressionUUID->"d3e904c5-ac93-4961-870e-b6a7e188f55b"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"#\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Classifier name\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Classifier\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]]},
    {"1", "\<\"NearestNeighbors[1,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.01342446808511}, 
                    "StandardDeviation" -> {14.01537578165701}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.9913109962313575, \
-0.09233053294609067, -0.09368874765244901}, {
                    0.1308811773388, -0.7634892271688112, \
-0.6324194157484261}, {-0.013138727838074585`, -0.6391864146577757, 
                    0.768939595252927}}, 
                    "Precisions" -> {0.983247064456453, 12.108440109797531`, 
                    13.290168150188014`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.000138463680379132, 0.05785107565193958, 
                    0.05412634623984165}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001384636803791339, 0.05785107565193958, 
                    0.05412634623984162}, 
                    "StandardDeviation" -> {1.0004027029513234`, 
                    0.3092847026857574, 0.28001142292178105`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001384636803791339, 0.05785107565193958, 
                    0.05412634623984162}, 
                    "StandardDeviation" -> {1.0004027029513234`, 
                    0.3092847026857574, 0.28001142292178105`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {22.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.047668, "MaxTrainingMemory" -> 295640,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 20.591791`8.06626910533944}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.302062844967532, -2.302062844967532, \
-2.2994146135964892`, -2.0425291550062155`, -2.03192764778708, \
-2.0122631490838616`, -1.9827338594375885`, -1.8387489559005104`, \
-1.8110983210964051`, -1.7467326755392831`, -1.7465387453003198`}, 
                    "LeftBoundary" -> -2.2994146135964892`, "LeftScale" -> 
                    0.0013241156855214875`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.9442149903145864`, 0.19255716778081308`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {30.01342446808511}, 
                 "StandardDeviation" -> {14.01537578165701}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5909090909090909, "survived" -> 0.4090909090909091|>|>,
         "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "NeighborsFunction" -> 
          MachineLearning`PackageScope`NeighborsFunction["Nearest", 
            NearestFunction[
             Hold[
              Nearest[CompressedData["
1:eJwcXHc8V30UNrIyKlIqMgpRiKRCXSWjaFAUKlQoLZsUoY1QVgi9KmXvmVwr
ZRYVIolk773Se5/7D/+cz/k833Oe85zzHfcnevaavgUTAwPDE+oPK/X/bmVh
mMJcM5H3MXSH41Qn0brVm+EC73uyZuexuB+mnYSvVm6wfUMB6dKWO8sR0EGk
XlL5fo2jirRcEcnudKuJKMqRuOb7r5ksiVr7RM28gbTwWHjwkLLfPbUkkJuy
f8+yNs3jwDxxWdlnypnynyQyePwq5V/tqO2NNso/174ZL837jUQlp9EJZuEo
cpuU4jfFKwtEuWK1NOxzub46AI9F51fXVsp+ak3WrBPlf8qKI5aT8t+0d7Xm
Dd8O8mVeSTTweHi1vvWh8FR5v4tRpvAs1z0ppE353/9i8xEmyr/Z838Zp1lH
iav1NW4ulL36o4Yj9yn7HUzp3rsp+xUNQq3A00JufCRB2YdN8Bqe3/GLSJIt
XHCg8Igd3lPpQOHJ5GgX+EXhEd5xbO9lCs89Kf7dWG8cQ0pyNXM32ezQvh7+
fQNV+B5R/h3bTcP2Uf75hC/+cabsZW7OOXBR9qyXRE/cKp8iCubbu5wo/0L+
Hx0uU/4r4i9egX9tI71n7pS9gLNAHPx3j1gc6SsfJLIZVxNY73DEcKg35b+U
U/fSHsp/Seq8AezdXOOL4V++bfCqKt8oIXX2QzjwJ7LIxNpQ/sNNl+chv6ej
l1+/S9lnn4xoQjwNM/uU2RemiQzxeTvEf0rh1lXkq9q54SfiL3vim4k3Zf++
5mDoUsr+SMMXRhaXcaKZW5DfmcLznaX2OfCYKil0qVB4ErQ/mttR9rk5bsXg
T9LiWed21iHyhEDqB1vK/nrdjbp7lP1Mk/R3Vcr+v4O1Fl6UvW7ykpPAwzJy
0Lmku4ccvbJZz/xmMxloVN3pzdlIslwXcCE2B5JreUfkDlD5ej19MmNwfRSZ
d2JdXIJNBymXfKfIgfJ/YUphBvk9tvkGzc+qoPYUW8r/+gjuW8CfqDy3KP85
jYxj8ehHPMcmyJwHlP0Pj77ovZT9xsTI9FuUvd3zTifgYWyaPct1ZpxcdA6c
NaLwDDqfkQSeuUmDBj4Kj7gbkyPw2L16tZmP4s+t0LLtXgadZL9B2pAN5b/n
T5b+Q8q/0dmVFcjXsKOjEOpFdfC4P/CwvxEyWX+9jWQP6LB2pOxnViX9QDzL
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
qMcT15frYb0nzKvOod7n9t7YAPx162TeT7VNEXtZ3h4FnyVmHe+Bz1yppq/U
KP8R7C016I8PRhJ9Yb+c3TB1xCqdlC+xlcZ9R/UguRR67hdLRuE8LdVoVQ7e
C3FxclyAva6V7d8MvUbi8c6NTqh3IlvUGXpoOeirD/2pvx17D/pwrcFMin4v
9M4ly+C+OyF1YmIS8w/XLmEF1O/k+6Zp8EfyU5kI9hcPo/NkYL9WI/u5689B
onFMVAv6sDtvexP2j+bnHihjXp30neHGfaUg8xkV2IetWBlWENdG8lSzJ8C+
UkzODvF8f7zMYC3m+feTYqivIlvVO3iP5F/5WfwJ8wj5euSyE+yfTFq2YR6e
r50QnKPqcZNFhTH48/lAoR/ir+n/92Lu+hLSh1OcG/HvtV1GvzdzH9k7AD3/
XVfdjHhyLgoLgM9HVzf/EuebIc9/fbmAekm3qh1EvSS22NH3j1HpLXugD+eS
U/fCPoDIPrzLp4V0WO19APWuvZrnLeyZ13aeQf869FSfwLy0453pFNa7MvkL
40c5DrXf9iWSwJNUmnIZ9Xt/nftT6HOlGckK/DEf1VPAt20nnD9tP+JOcnUc
/Yp5IPbJnzrov3nt7H7g72LoT8H52IP9fmLfKD57PHPm+d3fTqzf9+A2+HC4
6+wr8Gd3rtUlUdy3HvQshP4oubJNw7+S+OU1m95cIhOGJB9jvQUjx34CP3/7
LzHMG2F1Z5pRv+3E2wrYfy91ao+YbyeZMkUGgceY0bUXfN4yLRQHPuzLt/SC
Pr89PyaLfvH6avGBrMudZFb0GkPU+z5z47fAv5N3qh7+UyfNbFGPv1Xuu+F8
+NzHqYPPO5rJmKSSTuBReHfXm+bbp5XMWK/BrqWB0J+uesfNiKcY2yuNkMEM
wqDGvAf+g3v/vMW8aiopswX1FTt43B16+DvDnt4vf0/WKHl2o5+8+dmVF/aF
t7z04T/wbZEb7Pk4OfcgX/39K2rgf5Wo2PKEjipyXNqcxDwZ9OpQDvTkct2l
LNg//pjRg3njr6HeQfr+Iuty1I4/ndT+//ha1K+knEcw4n/ty8ipY1T8Neo9
U7HeBqMiO1YqPmvJoJx9hV3keGaBKeLp7WnwGfHR7Joug//uEr4RzJMih05f
a6LiI5L6/u4K20YypFlbB3hu3pT4jXzFi24IR3w0Ust6sf8Se5ouLUP5P/kx
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
HT5nsWGeNDumkYx+553zY1yct4RYpyNUhPzaRnqfAh/O7Qrnhr719b2cwvzD
WmeeAXtFnVrr0x1tZCy/FX2/c5VhOyd+z+Hg2GAH/Ac8Ez+N897bfYtJyO+y
Hu2GjOMdZLfQejPU7x2Jx97oX2vexwqBn6qxCz+h/3E/e5cinsVvP1fUW3aS
hv9NjtC/5xA70oP+YmNx5gX9exTfaguhny7BGWbAwyniU5mQvkCSF9c/Rn9v
d72iiP519vtOPeSXe+raL/j/YfybFe/tpRaWWU1eaiG5FZ0twc8XC14HoG8S
1v9dxPx8zEV6GvrwXnRYmH4vbbjAfZGxm5DzNjBCvevaXKjFvBr19L9O8LO/
kLEIfDgsGXCCn4q/UV5/eDrHKPFzRZIS6v0uV7gZ5p9R839CqPfGk0Ys0M8N
Bu2F+P4xoNbY657lAvFWq+sf+LP6jUUD9IRF8Vsd6suMSScW+hBcn7wT3yPv
9d86wi7aQQbfXxeL/DLKZ9H3uYzuu56An4E/+r2wH2k5f5ve7/c8+y7W1UTp
jfIeVcSTm03sOOL5xH1GFnpipveGBH92K/97gP1sz1hmmwFDL7FBLEIF88yU
lM1m9BertU96tKj4nD3//hfqV/zDj8eoL7M9t6R4lPpJlfjb7ojPjo4rvOD/
bg/SnX4Ps3G+C/49ZLlssL8IOuPzVGpXB1kkm/IO+7s14sQo8B9MW/mRvs9V
9CFx/hDJvdEN/Fl1xfGanmM12Sg2txL1uM9C3Zh+zxkuL4D+Xnz/iy3iszFI
pgL3j34bWJ6+jpkkF6/UW8J+SMX7Fuzt9JTp76d8N/Gvor+/zrf5hP6ipsUY
+0enkbQjzimhvg7dlKf3j2TlDDPO/y84va1AfiU8cmNw3rj8+d8NzVy95K+x
KGGst6BVNRPnA3K+5A6sl4MlyhP75frrExsR/8VV4p6ZLxmKqiothmC/frun
Ic4rGD45pkJv4xmLPDCflNkpe9P7I9JwNO93FyG8opIL+bI4un0a+dIVv2uO
/M5aZjVh3qukxlLE572Iwebn1dVkhY7NKcTTPlF5AvbPtvx5hvgk1bm/w/mM
37IMSfp71XHxv9r244RisKwn+BlWw9KG+FwWDRtC/UYNMtO/bzNrML2MneKb
14aHIS7PGYpWPG2YR32ZDY6ooL50W0xZ8Xs48Yn5VthvBpSeob+3PbBNLjwm
upNUzwtpAH8UT1jfh/2a6gfT+J46RPx8NM5z/HiSOmHv3/rpO0nVb7P4PBP6
13eNj03gg/Tasz/Bh6Ny7qHAI9yvEI7vuQbTuRbtTRvJd0c03+C8YmlQLTf0
3EWUf1aZ8m+oIFqHfjESMEZ/nytw4nTeVpMW8qXc50XMM+3KHKawn3hS8wLv
Ww44OJlDH1gkyo/g/Jxx//3yx5pMavv/rbdBPaZfddmE79H0nJiC6O+VeH8r
Ar/JgwR6/9J2YHjRqGGRVG0o4cd62TTtJfAeJmblkBreM9fVfbHF/Pz74yEl
5OtK97iXbkELsVb1qznm7e/vv7NDz2XNLRk5KPuY1Q2M0FuhE9+z6O/H922e
zPg2SBrlXDgMfe55YU/ifH7mheQW8O0z+/Re8NNDNFCGkcpX+YjMulXu80QA
t7gZ7LeZvFDFeWxm2IFL0JPFG8dDoP+RBxcJ1O91Tr4Qm+QJUs7LrgDxtwg3
fYP4L8pq0t+Het4Jt8c88Kb8RhDswz077jLU1xFn9UZZoOeDgiLMmMeqeIue
YR7j4UyRhf7/mQ4NQPz/ecj+6wqoJG9ylBphvj1Q3u0NfVBeNzQN/VRWl/0L
PbHP307fp/MPTX30ia4kG+qi+8G3ALHM16hHo4i+Yl4qPrffb3bHfr9BX4Tu
X3V7eR0+sMwSoUZnrqK+5vbycUKfu5zHk9F/L8s8cMT8eemFXzd+3yPKrrU7
Y3qEiGP1VMR6n7AteY717s4stQL/RXf+q4Re7XkW/xf3U03GM0xfr84T9zSO
2ML/w2iLYcTzojZ/FOJ5evaAL/R8Rl5BZRtlvzT3Csv6vz3EDsfVqxF/GeWT
37DeQoPZUeBxXlbWCfz7j2rQ94/lTsnz64tKSJ2+OD/ojy5r9wjqRWdgkuii
9KdrfFEK/N96ZGEl+uNg0Z/HmhP/SNPlf/eBnxvesubDv7tyxFvE85Pr3T3Y
f7EtWSYFPE6GOj/Gni2Ql6y+HcV6M4Ul+DEvyeWG0++dlC127IL9EbPAFfj9
nz/2TfvdqHmssb8qDPndUyrGCvvBEemnqMfA637bEU/hwOw3xZT9Xu51j6L+
TJMWJ7vZ0I/idkx7QH+uapyj92uhARfvQn+yNhwvRr6eijvb79ibSl5tjGeC
/5TJEgHMV69skm9hHmCo6HmL+wWFCoL+fqTLaXTMNmKSeHU8YxjxjDpllIDf
q1H6mz9N/56AlP4CfT/Ow31anFqve3aQopJTCxmyOXke9SWQ3Uzz5xz301Ds
9z2PbH0JvjXZJo6gvprirGVVmLuJteO+9Pvec/Uva9B/fZf5ZqDeWW+u+gn/
OYx+7rjfXBxNVLFWriJrTLJF6PvQ3dbHMF/VSd4aB/4GyYkXqJc1SWoHgF9e
l7XPoLiSiDpbuxR6XvhtK/29eclQaz/6r7/ybwHEf4vQ2nfYb1bbRGj9J9FL
Tmay0N/b7mMxEkX/9Ujt/72Dwr/wsVQW879dQAXt//S9uWW/zleTaXu36UH/
wwOmt2He+Lta4QLyKx85OIT7L07jDVnQn68v9h6X2/6LTP+b7w8+H7iXPIN5
frvk+TXQkzatZWbI12Iq5z3ki/nljTzvvnpy3fl+Z+T3wnZeN9SLts/BFPDh
ByPLJOK5zZ/3L/AITEsXBf7uIntcfnbR33+1/lgGffgskS+O+BSvu6WA9UbI
nz6B7wu+5jM0rD9bT37KO70G/GQKjo8C/k2CKfT7Pe8K2znsvz78+HYA9eLC
HvpOwLKXvG/9J5o+D5TgcUK9RNYHm+L3AY53RK7G+fZ8tsxx2O8uS9zOGjlB
5j14qQM+PH+bb0H3d67dH1Bfuis9eoCH62WqEr6f3eCfFdK6tYUsqF3/HOut
uvaDBfNtq+HgVuTLVF/fGedRdQzlXViv1j7Oh6+NW4jxgUtz6C+SPHNr0V8W
z6SeQz+SbfkehPrV2/PsPd5X1GgK/hjY3UEwBjQcQr+4Vez1G/k9H+JaCvyn
LOfEoT9LWHTe4fxK3HhowwblDnLZmkO52C/sGs2tRr3cjnp0DPEUl4lVhp63
kqz0+zf5z6efso3Vk+ctiAjUl7nQGynEP2Bp+hfkS3JUmxF8jnDeZ4bfr2OI
DNQPk60mH4q+V0D8t79wHwA/021HXaH/zkn3iujvawrZWvBe2vDT5RKPmjpi
bZb0SZw//Pardkc85TZOv1Ok1jvuOrAV8+fjziL6909exsSv0JLuIO8UHL+A
enk4mWkP/86Z5h8RT/4Do36IT71PnQK+t1L8anakYlkvobJHSAH5Cr95cBf8
825JvIj5842khjP0IYexQwLr/TL+smHlzXFSqkvREvW75hNzLfaP1r+6CVr/
DZZ+xTwg9cmBPh+bkNGbdhlsJowmi0Nhz8uUMI1+KmBoMg372LRv5ZhnGnZO
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
/2UbvjSG+9z/AT897+s=
                "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
          5, "ClassPriors" -> {0.5909090909090909, 0.4090909090909091}, 
          "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UHASUC0jI9MoogcahURCABfLEI0=
           "], "DistributionSmoothing" -> 0.5, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "NearestNeighbors", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "NeighborsNumber" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>,
         "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "NearestNeighbors", 
               "Options" -> <|
                "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "NearestMethod" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "NearestNeighbors", "NeighborsNumber" -> Automatic, 
               "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
             "ModelUtility" -> Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType}], 
              TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
          "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
        "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {22.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
               "ID" -> 9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.088066, 
          "MaxTrainingMemory" -> 2414528, "DataMemory" -> 160184, 
          "FunctionMemory" -> 180016, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 20.628707`8.067046991107837}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"2", "\<\"NearestNeighbors[2,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.166413221884497`}, 
                    "StandardDeviation" -> {14.164796953736037`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924772511095838, 
                    0.07190833668051799, -0.09908631159653214}, \
{-0.12205867051738345`, 0.6440819778251806, -0.7551556705688784}, {
                    0.009517719343027321, 0.7615691675459588, 
                    0.6480137468155}}, 
                    "Precisions" -> {0.9862138138811793, 11.293734193334444`, 
                    16.491689447066264`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037942472`, 0.057344490038971005`,
                     0.04804731888421855}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037943245`, 0.05734449003897112, 
                    0.04804731888421849}, 
                    "StandardDeviation" -> {0.999916822045728, 
                    0.2939680731764311, 0.2773252551478955}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037943245`, 0.05734449003897112, 
                    0.04804731888421849}, 
                    "StandardDeviation" -> {0.999916822045728, 
                    0.2939680731764311, 0.2773252551478955}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {39.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045524, "MaxTrainingMemory" -> 295928,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 20.678059`8.068084753854471}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.908755751630963, -2.908755751630963, \
-2.331906617773246, -2.3140000993956247`, -2.130320949816433, \
-2.0300739486399006`, -1.9889328877953174`, -1.859626624548574, \
-1.8282155593529859`, -1.7896554083648508`, -1.7428707688992453`}, 
                    "LeftBoundary" -> -2.331906617773246, "LeftScale" -> 
                    0.28842456692885854`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.277307584865143, 0.33566896444981004`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.166413221884497`}, 
                 "StandardDeviation" -> {14.164796953736037`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5833333333333334, "survived" -> 0.4166666666666667|>|>,
         "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "NeighborsFunction" -> 
          MachineLearning`PackageScope`NeighborsFunction["Nearest", 
            NearestFunction[
             Hold[
              Nearest[CompressedData["
1:eJwkXHc4V/8Xl70VUZSRFA1SoSiuEslomG2VEDIzWqQiEV/JKpVKJaOMzOa1
JaPsLXske0XG777u7588T895znPer/M6r3Pe437WnHMwsGBkYGB4QP3DSv2V
LEhe6c7WRWTLJX1xuVFPCK8jRn0XG0mdlOXfdp2tJQUU7pEutZ/JpzxSHtz3
O4gvK9hXmjZ1EkPk8Xi3qS4ijveRix1/ATkg3cnaZtZF5F+rmtXxrSNy/xvR
lRaPIv+YX7xlKdRLruezynKj/J9mlEq8R/n3HwnbvBf+z3Puv0P5Xza6pIyT
8r+5o3603quDvPNm/1LE06dyLfou4tFn9FCj7Puuzc3fpuwTlfZ+46DsT6o0
neneV0VuX8g4e5myf+619qI/Zd8+lfPfbspe0qsjD/6jNQur4f+Jtn/VI5Yc
Ism7zQbxb58q+3eRil+/gP1yKxV/uuGTJB/K3plnSIaLsh+P7U+a5Kgih+v+
kq6Uf/W+FQx+lH9Hbe+36pT/wvGdG+wp+4PqZ0YRD2ebZtjZnDqS1Ukm3p3y
r7eupNOG8v9j5e138N/DMJCkReFzd99/kjViUeRNhWVvP7hNEal3D+YjHi8H
fTFHyv5Z8tidFsrewmvurh/lX3WKOYSH8q9dZRxh/6GWVGj7b+/J643kCSfV
y35cdSSf/Nm0yY0hZM67oR2alP8J7Xe2Pyn/fzJ0nxz37SEY0yQG3an4jy+5
2o/8bp4WjQM+M0IWtchv48W7rxE/090NzDcbpsgnHlH7nSh7s8PxDcA/YS7w
5h7KvldHfP0+yr+kYC6HBJXfoWMrT7GEvCVWb0s5fJqKx1d0NZMPFY+fuWj2
EBXP8D6GvYi/qNrnBOLf0OJ9cN+xErLzUq40/L/LS7oIPviu8nwI/9/PkKyX
ka9vGkmIZ+qIxesLDBPEnvD2cvCn/ardBOIJDxQwB3/KpdVPO1D2G7q/WcK/
jzvj2h1JCeSve68Hab49/yAdSNnzf3O5oErZX2Bb0g3+ePC7JMB/1MmooQK1
YSLGVpPNlcLf8LythiWF/2Tc20bgr3RnixrWy7w80IePWu+lx9/Hax90kZ/L
xZ5fovyXODSzBFH+W0wG5cGHC7abRIB/dzfBxk3Zh6SI+5e+ayVs7TdWnqDw
OZrtvNubwueAQkbG8U0hpJruUm/E7x1zNAh8SwibVdSVHSWvhiWLI54Nuo8T
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
                "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
          5, "ClassPriors" -> {0.5833333333333334, 0.4166666666666667}, 
          "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UHASUC0jE+MoogoahdSBAB7/EJI=
           "], "DistributionSmoothing" -> 0.5, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "NearestNeighbors", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "NeighborsNumber" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>,
         "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "NearestNeighbors", 
               "Options" -> <|
                "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "NearestMethod" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "NearestNeighbors", "NeighborsNumber" -> Automatic, 
               "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
             "ModelUtility" -> Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType}], 
              TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
          "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
        "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {39.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.085785, 
          "MaxTrainingMemory" -> 2406072, "DataMemory" -> 160224, 
          "FunctionMemory" -> 180016, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 20.715321`8.068866651121903}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"3", "\<\"NearestNeighbors[3,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {27.98125623100304}, 
                    "StandardDeviation" -> {13.6545454150425}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929782868022977, 
                    0.056580796287496286`, -0.10388809089903768`}, \
{-0.11805375556579933`, 0.5302214037860489, -0.8396002464053722}, {
                    0.007578438888346374, 0.8459691935635862, 
                    0.5331779166520226}}, 
                    "Precisions" -> {0.9868182715591864, 11.480751867420821`, 
                    15.359127422002658`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001384636803791895, 0.08621986997818068, 
                    0.054126346239841625`}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037923103`, 0.08621986997818083, 
                    0.0541263462398416}, 
                    "StandardDeviation" -> {1.0000791442824206`, 
                    0.2907004167319709, 0.2844344475363118}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037923103`, 0.08621986997818083, 
                    0.0541263462398416}, 
                    "StandardDeviation" -> {1.0000791442824206`, 
                    0.2907004167319709, 0.2844344475363118}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045837, "MaxTrainingMemory" -> 296008,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 20.764891`8.06990463943864}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.801468988302024, -2.801468988302024, \
-2.3081356566082754`, -2.2259560806537677`, -2.1384763608289816`, \
-2.079035283905203, -2.00689453695256, -1.8220586640880223`, \
-1.7970631288045815`, -1.748070313118256, -1.7277104056279728`}, 
                    "LeftBoundary" -> -2.3081356566082754`, "LeftScale" -> 
                    0.24666666584687436`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.196460825666895, 0.3132726245924729], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {27.98125623100304}, 
                 "StandardDeviation" -> {13.6545454150425}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5742424242424242, "survived" -> 0.4257575757575758|>|>,
         "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "NeighborsFunction" -> 
          MachineLearning`PackageScope`NeighborsFunction["Nearest", 
            NearestFunction[
             Hold[
              Nearest[CompressedData["
1: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
IZ7HNLMY2Cj8PceEKiy+9pP5Kw/Wwn4va182+Fx+ZNEE+XXaskQJ9XVx7aHN
iE/IOx6/BPshInbpelvg2Wb1SBV8zrut7wL9Yex0NoU+n3q6o+Mdla+Th54M
DzS2EIpLp8yg/0q537MiqfzOJ613NaTya7RWdAvmzysBBQdRX9o9R6+bNM0R
MeyOOshvVZLzZvR3y1Nq9zGfzx3Lb8J8/rFTKwp43K5UrXwv30vumbyiDD4f
/e9oOPTkdOuZ51gv98QwK/ZrK7mi++Ff9at48LobJcT0fePr6C9zEUfl0F+G
r1zT3ULhcYrhFIJebTCWaEE8he3yrkhtnCJC7juvwPlk8dYLYcAzSVS543zy
Ufj+I9i/9K/8QOfr6Z1Iiw+rG0kfy7YzqHde5owOzKs/uEKHEZ++Et5RzFci
htZnmqj4JBJCjWy2feThpI+BdhSeZu9oBfSvCYcv7zZSeGQFJOdw/ny946An
+u98U7pkhtJfYsN49x7USzPL5w7sNwccxS/8pvpFhl6lHfhWVBhQDPwPd63I
vnt9hkj/uUUB+ZL+WlXoQeExPtmvDP7cKHM+hH6RdSHCrYLCs8fDNfgBTwdJ
duT2IF+bXWyqsR9sr1q3Cf1XN+bLCvTr2MKHkrSelJHdypeeE7ZKNa/RX85z
fG8B3zR7f59DvYj4nK+Df7n2fXs3UHyrfmHhrH2uhXwwXSmIemzfdFUC+bpy
pYTev3ATYlbgj7Axn740Zb/hsMjcvVQWjevh29Ygnq+W6N09TeF/xZb/AvHn
deDURb9YMcb4CfEP+eXOPR9wnlwytnwB89L78t0pqMch+8oa4HEfZl8OPQxr
22ID/Fx+ujVDpX3EmD9zPL2feqinAH2L2p4jTvOff6cQ8FQpGjmhX/CHOhen
fu8nNRybTFAvP9IG4mGfyJIxCL55fMlnw37cdr92FvjWOsByIaC8kTT98vgz
5pNa7ouhiGfysVFVaSqev5K+i2A/slYt/jDwj58e4i+sKSHkdR7q4LyUKT69
DfUSUDJm2UTl996Voy/QX+Scdj8hKTzkSaYtatt7yXFy5W3MtxWGQ8ZRlD2n
nOg/Bsp/4UEfddRXmoZ0DdZbMvd+rqCzhfBcSyRjP5LFwXQD8cnPecWJ+Ktp
yxghv52MxdvAt9P2tX9TObqJlOKtAsjXgobOQeQrxm5NKd1flHwOQ09YTJce
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
/pxki7Dtx3pvHz6ZjnjqB7E8hP5891VOQL97dtjqH/BEqXuG50/kkcfdXu8B
foUnhy3RT1cuSflN34eKzSlCD9fnut3A/UXKcqUHkqpfydPv31aiHqt4vVLh
P8zsvwXwYYuF+xLEM3TzsX3clD2PopGby6NSYruU/B3066qn0S7wf3SjxwHE
h/HwyvWIz6vkLVfBt5abHxu75apJy6uXeHAeYh4+wwF9josq+wG9VXPeqQv8
/Yyjd+j3RZtkXl881kduL3wnhnyF5+r8hH5OfXD9APw5fMKqwM8S9mAt+Ebc
SNl4bnKSWPlIZT34qdPO04p5T2GuOBb673pCxRX75UeCIrPw39olE37+wSKZ
/87JC/WiOOj+HfWlnnzXSY6qr5mWJk7w/yZR/R/4JrxvnRT/dBepbH3+K/i5
KzWKGXz4OTx1GngyQj5dBZ+3PdHTb6Tw/B3XjWBk3UFyiPwNQL42RS9cB/6+
fyYd0Nveg1G/0F8Gb81ZID6PSr2LiR/jpLCblh3sxWP6uqBX69/E9sB+uOas
Os4rxnWHNIG/e4lXq6B1HemobFaI+EsIMZmAz1f65mtRX0WNPYo4D8xg2n4N
fGgNHc6Rmu8naoWXXUW/0F7XtBX3BQn5F5q0qfVGWRYfQX95wKLDCzyZ8dFv
fL/VkSdYVu/HftA25rYyzk9SHxy+g3hyBSfogg+im8hsDooPZwdu1289Vkcq
aIcZQg8n5mSUgcegYw/9fi9Wc0QX+cq03bwK9mnt69lSMkoJJd9r77HeZa7b
7BEf776RVVhvz+C/6/R9t4PnKPSnWfg/1ZuTOYTijZ30/F+0T5sb9ipXqkLh
f2Dg8TTWy1prlwt7hciXynIPq8l1X+o5wGdGiQ2i4POS8vJF+C9tUBKNouyP
M66h7993PuN/eJpzipyoTKyi77Ocx78h/jUj17Th/8CCvxL09uhES8MI7tc6
I9+bs86T9iZjLFjv8BoRZnr/yPPuLn0eonZgCOu1YWb8NE3Zv5L76/nYqpe0
vx/KiXlJlj3EB/q87lmTzgoq/mfOMheif6266HcPfHM9ZrlS/rcr4eLPYw//
B7s9CJwn657Zsw7+F3YXlSFfBXe/TgB/4/eXTrqhfeS+wDD6Pdt63RvrcZ4Q
Hlt6HPoswJn3CPzUGLx2HOdpp3usTT+ELtFgjG0whP4EFYd0Q38cbviWtlL6
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
4iJhyKS3DPZfq304Mf8zbHv0GfXCfzfcAfhHl7d74/vfuo4kvpiv44Th1K1t
wPNMV2b6AoWHR0V4Je4vbp52r0S+qpawceB8QyIlLIPv6RgZGHDoF/17mOck
whGfjpNe9uB/bYuSKfbjYaGO9H309rmuNYrR/aT20KpM5Ct1zU4e5Jflrrc+
5iu11YnboZ8SKUL59O/nXByyO31ihvCNzxZG/UoZ3MnC+d6eVXumgL916dd/
0LdTIvXx+H0e4WP5vWPKE+QN9pa9yG+wvNEx6LP4EVFJ1O+U5YfD9PuWaz/o
94R5CXedSjbmkkuZgun92sbvMfTvz1wbcCfBnxopl2zcL4/9+6EBvUreWt25
e/kQsZMgl8E/W5qHLubh+y1sN+jfg6rRN8P5zLKRoTHwh3m5erOmdB1ZlpWr
SL+H8TJXBN/2a/51wzy2ip9vPeL/0PjhSXzvkM396+5fhRDCcSxqhv4edmro
Dua3j5wrjXfR54cDv2G/PLSodAHvmRmE1x13zCU1m4QUEJ8CJi8T5DcuQ2QT
4h8QbvoB/To2/psh8K86uYlIWveXLHfzp99n1hf/iqR/H2PXv1rgSdVyfIv7
l+SSbx8Rn5d2ErP+Xz+SFgJqduh3qwaJfuhhvYnRO/TfLpaf/PTvyVyqu0n/
vop80v6Ka41E0JeQndA3mVfMI/T3yPqH1FBfg8sKXmAei7nDPQE+aLhc+r4s
6jnJXn4jFv43tLAeBR5L7TeasB94f8UT56U+fsJywP81Ocmhm6OaLC/uksV8
leC/Zw7xLy5JcAB/UiW1vXAeUsjYtQH4GWpLeT3vLZK/WPbQ39dEHegqRjzr
2oJNobeqZ+dqof98tUV93/F90DXiiFvjINnKLvgL9tteNfyi3wuxmHvQ7/+d
zK+DP8xV7/jBT59hvwreun6y5td+e+ibX3JzEeaxtM8bS1GPRyROi+I8RKXR
gH5vdvTCTm/OlUOE05ghG+bt0HaSHfiX95VuBX/2hvLdw/592CR1I/DHahz7
mXVkhjT/E+QB/R+fJGegt2VLU9cZUPUo8fReDuafs0k9nrDffIFfvq65lFTM
i2HGfaL7050KmIeLP5iO4PfNMmsD32A+jF6WS79/Xsum7Xlxzwi5zM51Eue3
XBc0QnDfwff980e8t9c6o+oNvrlKbGLG7+3INZF5pnwd5Fef61yYV911/+uG
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
/wM6Sfnp
                "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
          5, "ClassPriors" -> {0.5742424242424242, 0.4257575757575758}, 
          "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UHASUC0TI+MoIgKNQnpBACeJEJg=
           "], "DistributionSmoothing" -> 0.5, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "NearestNeighbors", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "NeighborsNumber" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>,
         "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "NearestNeighbors", 
               "Options" -> <|
                "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "NearestMethod" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "NearestNeighbors", "NeighborsNumber" -> Automatic, 
               "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
             "ModelUtility" -> Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType}], 
              TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
          "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
        "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.085426, 
          "MaxTrainingMemory" -> 2405504, "DataMemory" -> 160272, 
          "FunctionMemory" -> 180016, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 20.801525`8.070670158802614}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"4", "\<\"RandomForest[1,0.8]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["585", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 585, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 585, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.682905811965817`}, 
                    "StandardDeviation" -> {14.466206745073634`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9936470912858275, 
                    0.07295739890123538, -0.08568941547694492}, \
{-0.11211770692142825`, 0.7077035487501067, -0.6975566692973311}, {
                    0.009750783245213836, 0.7027324562250356, 
                    0.7113873889759597}}, 
                    "Precisions" -> {0.987890052721312, 11.517678862968447`, 
                    16.163760029368973`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429267803`, 0.06538142877126399, 
                    0.08167644113240821}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4888356147712292618|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429270123`, 0.06538142877126385, 
                    0.0816764411324082}, 
                    "StandardDeviation" -> {1.0001770281363551`, 
                    0.29379036057571145`, 0.27254609666378826`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429270123`, 0.06538142877126385, 
                    0.0816764411324082}, 
                    "StandardDeviation" -> {1.0001770281363551`, 
                    0.29379036057571145`, 0.27254609666378826`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045299, "MaxTrainingMemory" -> 274952,
                     "DataMemory" -> 67488, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 20.850549`8.071692478244005}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.0568004236307997`, \
-3.0568004236307997`, -3.0082653585520784`, -2.3117782860908473`, \
-2.301900657540487, -2.0559868455955344`, -2.0558017705244853`, \
-1.9277607124148586`, -1.8766159383247365`, -1.8487146771977125`, \
-1.7683904903179242`}, "LeftBoundary" -> -3.0082653585520784`, "LeftScale" -> 
                    0.024267532539360648`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> Around[6.66360454805684, 0.4399653950190841],
                     "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.682905811965817`}, 
                 "StandardDeviation" -> {14.466206745073634`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.0977066308259964, 
                    0.6378918290138245, -0.34778690338134766`}, \
{-0.7989358901977539, 0.4588138163089752, 0.8613548278808594}, {
                    0.4424514174461365, -0.25815823674201965`, 
                    0.6080456972122192}}], 
                   RawArray["Real32",{{0., 
                    0.}, {-0.8340147137641907, -0.15769228339195251`}, \
{-0.0022395034320652485`, 0.621207594871521}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.6030664395229983, "survived" -> 
            0.39693356047700173`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 2, 2, 2, 4, 3, 5, 3, 1, 4, 1, 4, 2, 
                3, 4, 2, 1, 1, 4, 3, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212066588334286, -0.25815815164727063`, 
               0.44245229431770206`, 0.4424519958144377, -0.7989368011186366, 
               0.8613557281189843, 0.4588139776198319, -0.8340141495887892, 
               0.45881393251506664`, 1.6452211919829978`, 
               0.6080453238364818, -1.4380387313201748`, 
               0.7347000384987092, -0.09770730296367702, \
-0.25815832237809166`, 
               0.6080454107417399, -0.7989363131654859, -0.35856448362982585`,
                0.0265314245190523, -0.3477865711441672, 
               0.6378923205530764, -0.6315253601742743, 0.4424511425009112}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -10}, {5, -11}, {-2,
                 6}, {7, -12}, {8, -13}, {9, -14}, {10, -15}, {
                11, -16}, {-3, -17}, {13, 14}, {15, -18}, {17, 18}, {-4, 
                16}, {-5, -19}, {19, -20}, {20, 21}, {-6, -21}, {22, 
                23}, {-7, -22}, {-8, -23}, {-9, -24}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1,
                 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 4, 4, 2, 1, 1, 5, 2, 1, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588138692211672, -0.4181271073513426, -0.34778681698440517`,
                0.8613540837597133, 
               0.44245046992133474`, -1.42087698105607, -0.8410152877644181, \
-0.41812714202422807`, -0.7989358655543812, -0.07901170861101259, \
-0.09770697897812286, 0.018247602800866458`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 7}, {5, -8}, {
                6, -9}, {-3, -10}, {-4, 8}, {9, -11}, {10, 11}, {-5, 
                12}, {-6, -12}, {-7, -13}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2,
                 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 1, 5, 4, 6, 2, 2, 4, 4, 2, 1, 3, 3, 
                4, 1, 3, 3, 3, 1, 4, 1, 1, 4, 6, 6, 2, 3, 1, 1, 5, 1, 3, 4, 4,
                 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770566853918461, 
               0.6212066702907055, -1.6747849305552993`, \
-0.002239053029647279, -0.3477869422531801, -0.15769140680014715`, \
-0.7989367393934979, -0.09770718525714717, -0.3477863289701504, \
-0.34778625650263084`, -0.7989353768942902, 0.3931994345799841, 
               0.45881347243507653`, 0.4588141922856366, 
               0.8613557562463541, -1.2244549791517034`, 0.45881287854528674`,
                0.6378911149334927, 0.45881433551042594`, 1.2602013252972792`,
                0.8613552047798994, -0.8046739129522793, -1.4303318526281696`,
                0.6080466715227217, 0.62120703414422, -0.15769177464609374`, 
               0.4424519598723369, -0.2581591128715486, 
               1.126572451336811, -0.5325141933894555, -0.002239778403158671, \
-0.19009050455994658`, -0.25815736527871147`, 0.6080453114417237, 
               0.6080448909766565, 0.6080447080522484}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 22}, {6, -21}, {-2, 
                15}, {7, 8}, {-3, 9}, {14, -22}, {-4, 10}, {-5, 11}, {12, 
                13}, {-6, -23}, {-7, -24}, {-8, -25}, {16, -26}, {-9, 
                17}, {-10, 18}, {19, 20}, {-11, 21}, {-12, -27}, {-13, -28}, {
                23, 24}, {25, -29}, {26, -30}, {-14, -31}, {27, 28}, {
                29, -32}, {30, 31}, {-15, -33}, {-16, 32}, {33, 
                34}, {-17, -34}, {-18, 35}, {
                36, -35}, {-19, -36}, {-20, -37}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1,
                 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 
                1, 1, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 1, 5, 6, 5, 1, 6, 1, 1, 1, 4, 3, 3, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.34778606467772555`, 
               1.6897735172867954`, -0.002240461044502179, 
               0.6212080139403318, -0.0022399204026992484`, \
-0.8096338912340819, 0.23175779831855747`, 
               0.5020193785135394, -0.009264762985932234, 0.7094177236426127, 
               0.8613539392624832, -0.2581590901753916, -0.2581580333162057, \
-1.5742922321101673`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -9}, {11, 12}, {5, 6}, {7, 
                8}, {-1, -10}, {-2, 9}, {-3, 10}, {-4, -11}, {-5, -12}, {
                13, -13}, {-6, -14}, {-7, 14}, {-8, -15}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1,
                 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 4, 4, 3, 2, 1, 4, 6, 3, 1, 1, 1, 1, 
                1, 1, 2, 5, 2, 6, 4, 5, 1, 6, 1, 6, 5}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770570303809256, \
-0.0022404529224213585`, 0.6080463790098962, 0.8613555216456827, 
               0.45881387667499096`, -0.7989367393934979, \
-0.5710966286353614, -0.34778747507739105`, -0.15769318837182045`, 
               0.4588139776198319, -0.11882843081631467`, \
-0.010398392783724383`, -0.18666969010281398`, -1.43199062648487, \
-0.25411577085595427`, -1.4391261676683005`, 
               0.4424519260773936, -0.8340143564070468, 
               0.44245164993179964`, -0.15769278604307213`, 
               0.6080456825083251, -0.002239149944803946, 
               0.16730807509557621`, 0.621207242221276, -0.2201075724390118, 
               0.6212074005828319, -0.0022392983244887282`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {14, 15}, {6, 
                7}, {-1, -15}, {-2, 8}, {-3, 13}, {-4, 9}, {-5, 10}, {
                11, -16}, {-6, 12}, {-7, -17}, {-8, -18}, {16, 17}, {
                26, -19}, {18, -20}, {19, 20}, {-9, -21}, {21, 22}, {-10, 
                25}, {23, -22}, {
                24, -23}, {-11, -24}, {-12, -25}, {-13, -26}, {
                27, -27}, {-14, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2,
                 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 3, 6, 1, 4, 3, 4, 1, 4, 1, 1, 4, 6, 
                4, 3, 2, 2, 1, 3, 4, 6, 4, 5, 5, 6, 4, 1, 1, 5, 1, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.4588138692211672, 
               0.6212066590534162, 
               0.4588140941310903, -0.15769190793762844`, -1.43199062648487, 
               0.6080460543119308, -0.25815872131044326`, 
               0.6080463900668454, -0.4621847392858358, 
               0.6080465458757729, -0.28444351819254354`, -0.3963891559620434,
                0.6080451469329278, 0.6212066182907003, 
               0.6080461672284425, -0.2581592310107781, 0.44245167627325177`, 
               0.4424523793808599, 0.6806411365403147, 0.4588129140487016, 
               0.6080465818778684, 
               0.6212080722638014, -0.34778670858681515`, \
-0.8340147561202684, -0.41812707044853203`, 0.621206727114096, 
               0.861355479083973, -0.8410152877644181, 
               0.6744884836218317, -0.4181269849157667, 
               1.9899367922794458`, -0.44832114125870737`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {6, 7}, {15, 
                16}, {-1, 8}, {-2, 13}, {-3, 9}, {-4, 10}, {-5, 11}, {
                12, -19}, {-6, -20}, {-7, 14}, {-8, -21}, {-9, 17}, {-10, 
                18}, {-11, -22}, {19, -23}, {20, -24}, {
                21, -25}, {-12, -26}, {24, -27}, {25, 
                26}, {-13, -28}, {-14, -29}, {27, 28}, {29, -30}, {-15, 
                32}, {-16, 30}, {31, -31}, {-17, -32}, {-18, -33}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
                 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 1, 1, 3, 1, 4, 2, 1, 1, 1, 3, 2, 3, 2, 
                6, 3, 4, 6, 2, 1, 2, 2, 6, 4, 1, 2, 4, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.1576913237610469, 
               2.2670474602722646`, -1.5028056951501103`, 
               0.4588145886458723, -1.5731669376651283`, 
               0.6080466415837327, -0.7989359867576757, \
-0.46402134635758285`, -1.9734769890955945`, 
               1.4097113375539525`, -0.25815730847103735`, 
               0.17237237766133306`, 0.548352800547101, 0.4424523987043849, 
               0.6212074677516277, -0.25815911510702483`, 0.608045455388643, 
               0.6212072736160419, 0.44245229911973105`, 0.1254477635717961, 
               0.4424507911240423, 0.44245074298938514`, 0.6212066588334286, 
               0.8613548113851106, -0.00576143465022258, -0.1782424561232634, 
               0.6080448568198271, -0.258157719222603, -0.25947640801621263`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -14}, {9, 10}, {5, -15}, {-1, 
                6}, {-2, 7}, {-3, 8}, {-4, -16}, {11, 12}, {
                13, -17}, {-5, -18}, {-6, -19}, {14, -20}, {15, -21}, {16, 
                17}, {-7, 18}, {-8, 28}, {19, 20}, {21, -22}, {27, -23}, {22, 
                23}, {24, -24}, {-9, -25}, {25, -26}, {-10, 
                26}, {-11, -27}, {-12, -28}, {29, -29}, {-13, -30}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2,
                 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 5, 3, 5, 2, 3, 1, 3, 3, 1, 4, 3, 1, 
                1, 1, 3, 5, 1, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588144564879153, -1.4313913696155538`, -0.4181270829714201, \
-0.25815730847103735`, -0.8340138340203529, 0.44245196053216995`, 
               0.4588128856804099, -1.2961355188768717`, \
-0.25815861945658813`, 0.4588144188275236, 0.12515053863328873`, 
               0.6080454197319431, 
               0.4588128984567703, -0.07795650910933805, -0.6005070643199026, \
-0.3945186532066951, -0.25815728464278287`, -0.0022399486631601052`, 
               2.2670474602722646`, -0.09770721112448011, 
               1.2317744129524772`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {19, 20}, {-1, -11}, {6, 
                7}, {8, -12}, {17, -13}, {-2, 9}, {-3, 10}, {11, -14}, {
                12, -15}, {-4, 13}, {-5, 14}, {15, -16}, {-6, 
                16}, {-7, -17}, {18, -18}, {-8, -19}, {-9, -20}, {
                21, -21}, {-10, -22}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1,
                 1, 1, 2, 2, 2, 2, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 2, 6, 2, 4, 1, 3, 5, 1, 5, 2, 1, 1, 
                3, 4, 1, 1, 1, 1, 4, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212066329500257, -0.34778633036016604`, 
               0.44245165946849907`, -0.15769142014116255`, \
-0.09770653950722963, 0.8613553828974947, -0.49892499589456074`, 
               0.4588133830389882, -0.8340150858362403, \
-0.39268204613494806`, -0.8340146205576948, 0.4424515406569838, 
               0.8799038446610421, -1.4313913696155538`, \
-0.25815730847103735`, 0.8613556944053986, -1.4663839268654684`, 
               0.4721880339858915, 0.5677571847481113, 1.4087656701614755`, 
               0.8613551852466967, 0.130129397058929, -0.4350436554838324}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {14, -11}, {-1, -12}, {6, 
                7}, {8, 9}, {-2, 11}, {10, -13}, {-3, -14}, {-4, -15}, {-5, 
                12}, {13, -16}, {-6, -17}, {15, 16}, {17, -18}, {18, 
                19}, {-7, -19}, {-8, 20}, {23, -20}, {21, -21}, {
                22, -22}, {-9, -23}, {-10, -24}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2,
                 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 1, 2, 3, 1, 3, 3, 1, 1, 5, 6, 1, 1, 
                2, 3, 1, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340138119925982, 
               0.13012933404336335`, -1.908553967423071, 
               0.44245237953224414`, -0.25815911510702483`, \
-0.7364178516399376, 
               0.6378916820601654, -0.2581578396339461, -0.8328776999219514, 
               0.057706701567046936`, -0.002239840830106671, 
               0.621207135632222, 
               0.16473124908914794`, -1.4330353795723365`, \
-0.0977070401672937, 0.6378909832176118, -1.1561219755809304`, 
               0.8613557556908678, 0.8494280727151393, -0.38915900833737505`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -11}, {-2, 4}, {5, -12}, {6, 
                7}, {-3, -13}, {8, 9}, {10, 11}, {-4, 20}, {12, 13}, {
                15, -14}, {-5, 14}, {-6, -15}, {-7, -16}, {16, -17}, {
                17, -18}, {-8, 18}, {19, -19}, {-9, -20}, {-10, -21}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2,
                 2, 1, 1, 1, 1, 2, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 5, 4, 2, 4, 4, 1, 2, 4, 3, 1, 3, 1, 
                1, 4, 2, 4, 5, 4, 6, 1, 1, 3, 1, 1, 3, 3, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.45881366846086635`, 
               0.23175765756625122`, -0.0022404422053921673`, 
               0.6080453246123119, 0.44245229431770206`, 0.8613539392624832, 
               0.8613538983311599, -0.3963891559620434, 0.44245073450427164`, 
               0.8613538576439099, 
               0.45881287854528674`, -0.5370563660996366, -0.2581572462267476,
                0.05089949174991909, -1.2980636367399612`, 
               0.8613556374635891, -0.09770584890489176, -0.3477875482533861, \
-0.8340148123813558, 0.8613552218053853, 
               0.23175854223208514`, -0.11350397654721589`, 2.128157338666483,
                0.4588144630773354, 0.43259429852661757`, 1.0986856228012716`,
                0.45881431599321587`, 0.6378921650426586, 
               0.6378909737908858, -0.38915900833737505`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {-1, 6}, {11, 
                12}, {7, 8}, {9, -14}, {-2, -15}, {10, -16}, {-3, -17}, {
                13, -18}, {15, -19}, {14, -20}, {-4, -21}, {-5, -22}, {
                18, -23}, {25, 26}, {19, 20}, {-6, -24}, {21, 22}, {
                23, -25}, {-7, -26}, {24, -27}, {-8, -28}, {27, 
                28}, {-9, -29}, {-10, 29}, {-11, -30}, {-12, 
                30}, {-13, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1,
                 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 3, 5, 6, 3, 6, 4, 1, 6, 6, 4, 2, 1, 
                3, 5, 5, 1, 2, 2, 3, 2, 3, 4, 1, 4, 4, 4, 4, 3, 1, 1, 1, 3, 1,
                 2, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA+IZytNOvnnw2P7Bp9d+lhNe26/g/s9uEnvXfsIHpyjH
Da/2T7jnGGytf2R/g8xc+WWtF/Zb2K4ydALyF8y5larmdG2/wcWz9w5KP9xf
wCeu7gAU33H13B6QeRm81tMVgfIfpHPePJjwcv+CTUsqHWVW7m9gq5Cck/nE
fkbA9HoHoPkWhpfk7YG0A/fRjWsUHu7vCJXOc2Peub/i4dzlyoF37DuWLv62
FmjvAe4jaY+A5ihs6cleBeQbTIx7IlX62H7CnffHd317sH+HjLSFDJC/o/i4
rSyQvrBxVTqIVuBZw2sB9NeDvFDzNUB9HU6/HA5ZrLM3SHl6Mcrj7P4OL627
91lf7/dw+xpjCvR3x3pDnWsfztgzGJ1viwC644aj3y1zoP6Oexdn33/z1R4A
w56jkg==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {18, 19}, {-1, 
                6}, {-2, -24}, {7, 8}, {-3, 9}, {-4, 11}, {
                10, -25}, {-5, -26}, {12, -27}, {-6, 13}, {14, 
                15}, {-7, -28}, {16, -29}, {-8, 17}, {-9, -30}, {20, 21}, {
                33, -31}, {22, -32}, {-10, 24}, {-11, 23}, {-12, -33}, {-13, 
                25}, {-14, 26}, {-15, 27}, {-16, 28}, {-17, 29}, {30, 31}, {
                32, -34}, {-18, -35}, {-19, -36}, {-20, 34}, {35, 
                36}, {-21, -37}, {37, 38}, {-22, -38}, {-23, -39}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1,
                 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 
                1, 1, 1, 1, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 6, 4, 1, 2, 1, 1, 2, 3, 1, 1, 2, 4, 
                4, 3, 1, 1, 4, 1, 4, 1, 4, 2, 5, 1, 3, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770566853918461, 
               0.2317576601771778, -0.15769146883750418`, 
               0.8613555216456827, -1.3344906976172393`, \
-0.09770734562484296, -0.18666969010281398`, 
               1.790837726735619, -0.09770587000001263, 0.6378908952407523, 
               0.02740643189623085, -0.051354215169682305`, 
               0.4424519958144377, 0.6080463790098962, 
               0.6080460396176859, -0.25815796254482315`, \
-0.6316627021947108, -1.3789711043326918`, 
               0.13012942596036314`, -0.0482886368836517, 
               0.6080454398568875, -0.6055586128322767, 0.6080454294534672, 
               0.4424522130866331, -0.0022400219831512497`, \
-0.6700601426679036, 0.6378920111010205, 0.6080450222655314}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, 14}, {6, 7}, {-1, 
                9}, {8, -15}, {-2, -16}, {-3, -17}, {10, -18}, {11, 
                12}, {-4, -19}, {-5, -20}, {15, -21}, {21, 22}, {16, 17}, {-6,
                 18}, {-7, -22}, {-8, 19}, {-9, 20}, {-10, -23}, {
                23, -24}, {-11, -25}, {24, -26}, {25, 26}, {-12, 
                27}, {-13, -27}, {28, -28}, {-14, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1,
                 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 5, 1, 2, 3, 6, 5, 6, 4, 1, 4, 4, 1, 
                3, 1, 3, 6, 5, 6, 5, 2, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770564694274908, 
               0.6212066025301013, -0.8340142304087355, 
               2.2670474602722646`, -0.09770575565960626, 
               0.4588144564879153, -0.15769231355803282`, \
-0.8340154739594796, -0.157691956665593, 0.8613551623118063, 
               0.1854232632267223, 
               0.8613549611414326, -0.3477864318652255, -0.8420482415816295, 
               0.6378920498668084, -1.5644248339215974`, -0.2581590661856179, \
-0.1576922171120516, -0.00223866749027115, 
               0.6212074530670089, -0.0022399462280882527`, 
               0.4424523023129425, 0.4424507852313062, -0.2581574587520059}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, -13}, {10, 
                11}, {7, -14}, {-1, 8}, {-2, 9}, {-3, -15}, {
                12, -16}, {-4, -17}, {13, -18}, {-5, 14}, {-6, 
                15}, {-7, -19}, {-8, -20}, {-9, 18}, {-10, 19}, {20, -21}, {
                21, -22}, {-11, 22}, {23, -23}, {24, -24}, {-12, -25}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
                 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 4, 4, 1, 6, 5, 1, 1, 1, 1, 1, 1, 1, 3, 
                3, 2, 2, 1, 6, 1, 6, 5, 6, 4, 4, 5, 4, 3, 3, 2, 2, 6, 6, 4, 5,
                 5, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.4588135174133585, 
               0.6080461972286537, -0.34778658716788113`, 
               0.9528489003994558, -0.1576923463364679, -0.4181271073513426, 
               1.1214877402950592`, -0.3605647903456699, \
-1.4313913696155538`, -0.33172882991161146`, -1.4363947213633939`, \
-1.7058907052041654`, -0.21872523171757519`, 0.4588130710730751, 
               0.10032785542184586`, -0.7989357096756082, 0.4424511066830723, 
               0.2675201933909248, 0.6212066702907055, 
               0.23442388419228943`, -0.15769249796912854`, \
-0.0022393579472984523`, -0.1576925021926252, -0.3477865344939004, \
-0.3477862223340513, -0.4181271004602718, 0.8613556374635891, 
               0.45881392871474214`, 
               0.4588143923780672, -0.4483217775466821, -0.7989365931160783, 
               0.6212075037571294, 
               0.6212072581660237, -0.34778648883392016`, \
-0.8340150858362403, -0.4181271054367035, -0.09770639994392183}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {19, 20}, {6, 7}, {13, 
                14}, {-1, 8}, {-2, -21}, {9, 10}, {11, -22}, {-3, -23}, {
                12, -24}, {-4, -25}, {15, -26}, {16, -27}, {-5, -28}, {-6, 
                17}, {-7, 18}, {-8, -29}, {21, -30}, {22, 23}, {-9, -31}, {24,
                 25}, {-10, 32}, {-11, 26}, {-12, 31}, {27, 
                28}, {-13, -32}, {-14, 29}, {-15, 
                30}, {-16, -33}, {-17, -34}, {33, 34}, {
                35, -35}, {-18, -36}, {-19, 36}, {37, -37}, {-20, -38}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2,
                 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 
                2, 1, 2, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 5, 1, 6, 2, 5, 2, 2, 1, 4, 2, 1, 
                3, 4, 1, 3, 1, 1, 3, 1, 1, 4, 2, 4, 4, 2, 1, 1, 1, 1, 3, 4, 1,
                 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212067964102506, -0.25815728270794835`, 
               1.3381111645163006`, -0.0022399860373035624`, 
               2.1276208553270717`, -0.15769230007854462`, \
-0.7989367997698391, -0.4181269635617939, -0.7989363771661022, \
-0.7989366408315366, -0.40004445421788315`, 
               0.8613546513685444, -0.0977062190352036, \
-0.38854562925959346`, -0.2581590048705711, 
               0.6080448687724411, -1.1882002832857257`, -0.2581573173940406, \
-0.8444670982010658, -1.4712524125348292`, 
               0.6378925731281537, -0.33163874921193504`, 
               0.5108972335002431, -0.34778767505894015`, \
-0.09770577514934109, -0.34778684026992535`, -0.34778660742198797`, \
-0.09770658849890068, 1.1942970279710217`, 0.8153501500242673, 
               0.2291388910348502, 0.16386435978972647`, 0.4588143237605502, 
               0.6080465712894316, 0.16730807509557621`, 
               0.017570003948461893`, 0.44245135776952127`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {14, -20}, {6, -21}, {
                7, -22}, {-1, -23}, {-2, 8}, {9, 10}, {-3, 11}, {-4, 13}, {
                12, -24}, {-5, -25}, {-6, -26}, {15, 16}, {17, 18}, {21, 
                22}, {-7, -27}, {-8, 19}, {20, -28}, {-9, -29}, {
                23, -30}, {-10, 31}, {24, 25}, {-11, 26}, {29, -31}, {-12, 
                27}, {-13, 28}, {-14, -32}, {30, -33}, {-15, -34}, {32, 33}, {
                34, 35}, {-16, -35}, {-17, 36}, {-18, -36}, {
                37, -37}, {-19, -38}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
                 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 
                2, 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 4, 6, 1, 3, 1, 1, 4, 4, 1, 1, 4, 6, 
                2, 3, 5, 1, 6, 1, 5, 1, 4, 1, 1, 2, 4, 1, 3, 2, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212067298241148, 
               0.45881363652156537`, 0.6080448472594462, -0.1576923516489872, 
               2.1683190017524296`, -0.2581582633028958, -0.7788114159633803, 
               0.5754546065112844, 0.8613546513685444, 
               0.608045466831391, -0.5007671650761907, 0.15847817841727063`, 
               0.8613542666497302, -0.15769166889938413`, -0.7989357516877424,
                0.6378913650531572, -0.8340145046991507, 0.5409431953121038, 
               0.6212067076956549, 0.816632699456787, -0.41812718379369596`, 
               1.4087656701614755`, 
               0.6080462209724038, -0.3910593859975209, -1.1183649862361342`, \
-0.09770566285282645, 0.6080465020976122, -1.4282645210765228`, 
               0.10032780649119111`, 
               0.44245075429896996`, -0.7989355699286458}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {6, 7}, {
                14, -18}, {8, 9}, {-1, 10}, {-2, -19}, {-3, -20}, {11, 
                12}, {-4, -21}, {13, -22}, {-5, -23}, {15, 16}, {-6, -24}, {
                17, 18}, {-7, 19}, {-8, 20}, {-9, -25}, {-10, 
                21}, {-11, -26}, {24, -27}, {-12, 27}, {25, -28}, {-13, 
                26}, {-14, -29}, {-15, 28}, {29, 30}, {-16, -30}, {
                31, -31}, {-17, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
                 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 6, 4, 1, 1, 4, 1, 1, 4, 6, 4, 5, 5, 
                5, 1, 5, 1, 1, 4, 1, 1, 1, 1, 5, 2, 2, 4, 6, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588135174133585, -0.15769136546683038`, 0.6212067728495629, 
               0.6080461759553311, -1.9429581714656052`, -0.2538105914290534, 
               0.8613542289120817, 0.5331533564749211, -0.39060830211989783`, 
               0.6080453114417237, 0.6212079700868323, 
               0.6080466075209561, -0.0022387340996106522`, \
-0.0022392360031931735`, -0.0022394183105383, 
               0.9137746580423665, -0.002239564563057208, 
               0.40937833008872326`, -1.4303318526281696`, 0.8613548533470556,
                0.02740643189623085, 0.4374499651543018, 
               0.5137464796978621, -0.8410152877644181, -0.8340155062581518, \
-0.44832174101960964`, -0.7989362209669197, -0.3477870543620152, 
               0.23175767689561289`, 0.6378920709390306}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {23, 24}, {-1, 6}, {-2, 
                10}, {7, 8}, {-3, 9}, {-4, -17}, {-5, -18}, {11, 12}, {
                13, -19}, {19, 20}, {14, -20}, {15, -21}, {16, -22}, {
                17, -23}, {-6, 18}, {-7, -24}, {-8, -25}, {-9, 21}, {-10, 
                22}, {-11, -26}, {25, 26}, {-12, 30}, {27, 
                28}, {-13, -27}, {-14, -28}, {
                29, -29}, {-15, -30}, {-16, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
                 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 4, 6, 5, 1, 6, 3, 2, 1, 3, 5, 2, 4, 2, 
                6, 1, 1, 2, 4, 6}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.45881367474447154`, 
               0.6080459834922598, 0.621206619903254, -0.0022401196504986017`,
                0.24855978046442728`, 0.6212067385192883, 
               0.4588135915605678, -0.7989364536199535, 
               0.15898391649369836`, -0.25815842757812124`, \
-0.8340144312657589, -0.7989361561675752, 0.6080463206022904, 
               0.44245073197780593`, -0.157691738750122, 2.1683190017524296`, 
               2.267583943611676, -0.7989366536161837, 0.8613556238756974, 
               0.23175766301835288`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {15, -11}, {-1, -12}, {6, 
                7}, {8, 9}, {-2, -13}, {-3, 10}, {12, -14}, {
                11, -15}, {-4, -16}, {-5, 13}, {-6, 14}, {-7, -17}, {16, 
                17}, {-8, -18}, {18, -19}, {-9, 19}, {20, -20}, {-10, -21}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1,
                 2, 2, 2, 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 3, 2, 6, 1, 1, 3, 3, 5, 2, 5, 3, 2, 
                3, 1, 2, 1, 1, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212066559927045, -0.25815842757812124`, 
               0.45881388180087157`, -0.7989358689223369, \
-0.15769248657348434`, 2.2689438818066296`, -0.8012161393753363, 
               0.45881300619273535`, -0.2581574458745073, -0.8340154524502621,
                0.44245222703617015`, -0.41812688900462724`, \
-0.2581573605328962, 0.4424523480824525, 
               0.45881408875381746`, -0.5352385971130857, \
-0.7989360816139808, -0.4928216746228937, -0.5232574251274018, 
               0.6080466075209561, -0.8350024208949627, 1.4087656701614755`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {14, 15}, {5, 6}, {-2, 
                7}, {8, -13}, {-3, -14}, {9, -15}, {10, 11}, {-4, 12}, {
                13, -16}, {-5, -17}, {-6, -18}, {16, -19}, {-7, 21}, {17, 
                18}, {-8, -20}, {19, 20}, {-9, -21}, {-10, -22}, {-11, 
                22}, {-12, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1,
                 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 5, 3, 4, 1, 2, 1, 1, 1, 1, 1, 4, 4, 
                2, 3, 1, 3, 1, 2, 1, 4, 6, 4, 1, 3, 6, 4, 6, 4, 6}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770566853918461, 
               0.6212066025301013, -0.8340142358269995, 
               0.4588145886458723, -0.3477864318652255, -0.04954302258656368, \
-0.097706517314326, -0.7381987645670529, -0.010398392783724383`, \
-0.1811442011010389, -0.14615260993725188`, -1.5644248339215974`, 
               0.6080464769917864, 0.6080462276242136, 
               0.4424523987043849, -0.2581591629324871, -0.9742780237421789, 
               0.6378919259782991, -0.3605647903456699, 
               0.44245184631539614`, -0.32922601876785995`, 
               0.6080454994986209, 0.6212069008679713, 
               0.6080450805678863, -0.778232175490368, -0.25815785735073193`, \
-0.15769244984734265`, 0.6080452478623082, 0.6212070431973125, 
               0.13012931423547847`, 0.6212069603363402}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, 
                7}, {-1, -17}, {8, 9}, {-2, -18}, {-3, 10}, {-4, -19}, {-5, 
                11}, {-6, -20}, {-7, -21}, {14, -22}, {15, -23}, {16, -24}, {
                17, 18}, {-8, -25}, {19, -26}, {20, 21}, {22, -27}, {-9, 
                26}, {23, -28}, {-10, 24}, {-11, 25}, {-12, -29}, {27, 
                28}, {-13, 29}, {30, 
                31}, {-14, -30}, {-15, -31}, {-16, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1,
                 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 4, 1, 4, 1, 2, 3, 4, 3, 1, 1, 1, 1, 
                1, 2, 3, 3, 2, 3, 1, 1, 2, 1, 3, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.2317576601771778, 
               0.45881338739158384`, -0.3477869055032454, \
-0.6377846894931221, -0.3477863289701504, -1.6029298246448782`, 
               0.44245196053216995`, -0.2581574696347615, 0.8613550604486315, 
               0.10032770044128547`, -0.49504226608881163`, \
-0.14787986602655545`, 1.4749252949532217`, -0.006590123152507343, 
               0.9901588012382438, -0.448320956411254, -0.2581592310107781, 
               0.45881397958782966`, 
               0.44245231204051816`, -0.2581590834870835, \
-1.2980636367399612`, -0.6635184427986625, 
               0.44245057066074356`, -1.3613107506998308`, 
               0.4588131232181625, -0.7989360816139808}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 17}, {6, 7}, {-2, 
                16}, {-3, 8}, {10, 11}, {-4, 9}, {-5, -16}, {12, 13}, {-6, 
                15}, {-7, 
                14}, {-8, -17}, {-9, -18}, {-10, -19}, {-11, -20}, {-12, 
                18}, {19, -21}, {20, 21}, {22, 23}, {-13, -22}, {24, -23}, {
                25, -24}, {-14, -25}, {26, -26}, {-15, -27}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
                 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 6, 3, 1, 2, 2, 1, 1, 2, 4, 3, 3, 4, 
                1, 3, 5, 3, 4, 4, 1, 2, 1, 1, 4, 4, 6, 2, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.834013741392508, \
-0.25815777019566966`, 0.6212081958788955, 
               0.4588145886458723, -0.3963891559620434, -0.097706517314326, \
-0.7989367910444312, -0.07901170861101259, -0.46456574416720553`, \
-0.7989365093496961, 0.6080453721348089, 0.45881388749290997`, 
               0.637891119731588, 0.6080448451508316, -1.4313913696155538`, 
               0.10032777814706528`, -0.002238707988996544, \
-0.2581591890594668, 0.8613547884206341, 0.6080453114417237, 
               0.6421564207543913, -0.7989357986426038, -0.7434766190589004, 
               0.6524395997573471, 0.6080452406298864, 0.13012887808727513`, 
               0.6212079888455388, 0.4424518515214504, 1.0254793265844597`, 
               0.7860763736337288}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {13, 14}, {5, 6}, {7, 
                8}, {-2, -19}, {-3, 9}, {-4, 12}, {10, -20}, {-5, 
                11}, {-6, -21}, {-7, -22}, {15, -23}, {29, -24}, {16, 
                17}, {-8, -25}, {18, 19}, {-9, 20}, {-10, -26}, {21, 22}, {23,
                 24}, {-11, 27}, {-12, 25}, {-13, 
                26}, {-14, -27}, {-15, -28}, {-16, 28}, {-17, -29}, {
                30, -30}, {-18, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
                 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 6, 3, 1, 1, 3, 1, 6, 3, 2, 1, 3, 5, 
                5, 1, 1, 1, 5, 1, 2, 1, 1, 5, 4, 6, 3, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770563579649016, \
-0.15769140680014715`, 0.6212066590534162, 
               0.4588134249109168, -0.8346907522056446, 2.1683190017524296`, 
               0.45881422639707914`, 0.5109748246278984, 0.6212080598659115, 
               0.45881386339151753`, -0.09770723060859332, 
               0.06367039817436693, 
               0.4588141920721136, -0.0022385525062582935`, \
-0.41812780867887067`, 0.9173395865779366, 1.5494912974480286`, 
               0.8537372973592792, -0.41812732206013337`, \
-0.3914647383454297, -0.0977062243285528, 0.6828928493252082, 
               0.7499872007621287, -0.8340153155824517, 
               0.6080453132309849, -0.15769155849849703`, \
-0.25815731232415606`, 0.17237270130366467`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {-1, 6}, {-2, 
                9}, {7, -15}, {8, -16}, {-3, -17}, {10, 11}, {12, 
                13}, {-4, -18}, {14, -19}, {16, 17}, {
                15, -20}, {-5, -21}, {-6, -22}, {18, 19}, {
                20, -23}, {-7, -24}, {-8, 21}, {22, -25}, {-9, 
                23}, {-10, -26}, {-11, 26}, {27, -27}, {-12, -28}, {-13, 
                28}, {-14, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1,
                 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 3, 5, 6, 1, 2, 3, 4, 3, 2, 5, 1, 1, 
                6}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770564694274908, 
               0.6378923205530764, -0.8340138340203529, 0.621206610599808, 
               1.0540270272449224`, -0.7989368011186366, 0.6378921935851611, 
               0.8613557281189843, 
               0.4588133449404306, -0.7989363435432209, \
-0.0022403127100952477`, -0.18814173104650234`, -1.4313913696155538`, 
               0.6212067190715969}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, -8}, {
                11, -9}, {-1, 7}, {8, -10}, {9, -11}, {-2, 
                10}, {-3, -12}, {-4, -13}, {-5, -14}, {-6, 14}, {-7, -15}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
                 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 3, 4, 2, 3, 1, 6, 1, 6, 1, 1, 3, 2, 
                1, 6, 2, 5, 6, 5, 1, 5, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770563579649016, \
-0.0022404422053921673`, -0.25815904478914486`, 
               0.8613555216456827, -0.09770663232263388, 
               0.4588133830389882, -0.3963891559620434, -0.1576917392576187, 
               2.267583943611676, -0.15769159801422106`, -0.8457696095290128, 
               1.0540270272449224`, 
               0.45881287854528674`, -0.7989355711791903, -0.8061820807974334,
                0.6212074932834719, 
               0.44245078202882393`, -0.002239500539886412, \
-0.15769244984734265`, -0.8340144973251888, 
               0.11951433069533424`, -0.4181270913213755, \
-0.3305350169419352, -0.8949193461315579, 0.06427612834522811}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, -13}, {11, 
                12}, {7, 8}, {-1, -14}, {-2, 9}, {10, -15}, {-3, -16}, {-4, 
                13}, {15, -17}, {-5, 14}, {-6, -18}, {-7, -19}, {-8, -20}, {
                18, 19}, {20, -21}, {24, -22}, {-9, 21}, {22, -23}, {
                23, -24}, {-10, -25}, {-11, 25}, {-12, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
                 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 1, 3, 3, 6, 3, 5, 5, 2, 6, 3, 4, 4, 
                2, 3, 1, 1, 4, 2, 3, 1, 2, 4, 2, 1, 3, 3, 1, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240461044502179, 
               2.2670474602722646`, -1.5969470879845673`, 
               0.45881338739158384`, 0.458813147332485, -0.15769202624544332`,
                0.10032777098031254`, -0.8340155868788859, \
-0.8340148254059621, -0.7989367393934979, -0.15769196449961753`, \
-0.2581576189089465, 0.6080447998837863, -0.34778661618763973`, 
               0.4424523987043849, -0.25815795346180526`, 
               1.5388985174427887`, -0.38854562925959346`, 
               0.6080447348526397, -0.0977062766463268, -0.2581590834870835, \
-0.6635184427986625, 0.4424512748579281, 0.8613556859929759, 
               0.4424512405095897, -0.045154417493410204`, \
-0.25815874923132487`, 0.45881287854528674`, -0.35872754966507925`, 
               0.4424504994437033, 0.09025183211318843}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -15}, {12, 13}, {5, 6}, {
                7, -16}, {-1, 10}, {8, -17}, {-2, 9}, {-3, -18}, {-4, 
                11}, {-5, -19}, {-6, -20}, {14, 15}, {-7, 16}, {21, -21}, {-8,
                 17}, {18, -22}, {19, 20}, {-9, -23}, {-10, -24}, {22, 
                23}, {-11, -25}, {24, -26}, {25, -27}, {26, -28}, {27, 28}, {
                29, -29}, {30, -30}, {-12, -31}, {-13, 31}, {-14, -32}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1,
                 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 5, 6, 2, 5, 2, 2, 2, 6, 1, 4, 1, 4, 
                3, 1, 4, 4, 5, 3, 6, 1, 5, 1, 2, 4, 1, 1, 2, 4, 1, 4, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770566853918461, \
-0.8437066197101091, -0.002240372882391227, -0.15769141092962013`, \
-0.7989367910444312, -0.002238564045976523, -0.44832122541540054`, \
-0.09770584890489176, -0.0977064284732333, 0.23175763539468042`, 
               0.8518852571963773, 0.8613556944053986, 
               1.3381111645163006`, -0.3477869618469227, 0.45881409298857356`,
                1.162020017432143, -0.34778638158188624`, \
-0.3477862054702481, -0.00224038531321304, -0.2581592310107781, \
-0.15769230007854462`, 
               1.2246258150718354`, -0.834014820654815, -1.9760295811803363`, 
               0.44245231204051816`, 0.6080454516867206, 
               0.0328634221925137, -0.6668628298393289, 0.4424521569827071, 
               0.6080452814916031, -0.5360029766013277, 0.6080448689970686, 
               1.3722016029191533`, -0.6330298728938368}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {19, 20}, {5, 6}, {-2, 
                7}, {8, 9}, {-3, -19}, {10, -20}, {-4, -21}, {-5, 11}, {12, 
                13}, {14, -22}, {15, -23}, {-6, -24}, {-7, 16}, {
                17, -25}, {-8, 18}, {-9, -26}, {21, -27}, {-10, 24}, {-11, 
                22}, {23, -28}, {-12, -29}, {-13, 25}, {26, -30}, {27, 28}, {
                29, 30}, {-14, 34}, {-15, 31}, {32, -31}, {-16, -32}, {
                33, -33}, {-17, -34}, {-18, -35}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1,
                 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 
                1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 5, 1, 4, 3, 1, 4, 3, 3, 4, 1, 1, 1, 
                2, 2, 1, 3, 4, 1, 2, 4, 4, 3, 1, 1, 1, 1, 4, 1, 2, 1, 4, 1, 1,
                 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.834013741392508, 
               0.44245073053305095`, -0.0022399394728453807`, 
               2.267583943611676, 0.8613555216456827, 0.4588139776198319, 
               1.4749252949532217`, 0.6080451465446712, 
               0.45881397046047834`, -0.25815831137026457`, 
               0.8613547562218509, -0.21706259871340516`, \
-0.3924449091916449, -0.11668392391280313`, 
               0.44245237953224414`, -0.09770564669573456, 
               0.4386587311198782, -0.25815731885698545`, \
-0.3477878353912458, -0.45786994716650486`, 
               0.17237240918705732`, -0.34778652345628247`, \
-0.3477864649336069, 0.45881424873659604`, 0.6836125454734834, 
               0.857721687373159, 0.6481180220096476, 
               1.4389065588383012`, -0.347786233972724, 
               0.6786882313744274, -0.7989357036698133, 0.16148222445375104`, 
               0.2567839801864906, 0.8863730632057454, -1.0553553665490725`, 
               0.6454728327372266}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -19}, {15, 16}, {5, -20}, {
                6, -21}, {7, -22}, {8, -23}, {-1, 9}, {10, -24}, {-2, 11}, {
                12, 13}, {-3, 14}, {-4, -25}, {-5, -26}, {17, -27}, {29, 
                30}, {18, 19}, {-6, 20}, {-7, 22}, {21, -28}, {-8, -29}, {-9, 
                23}, {-10, 24}, {25, 26}, {27, -30}, {-11, 
                28}, {-12, -31}, {-13, -32}, {-14, 31}, {36, -33}, {32, 
                33}, {-15, -34}, {34, 
                35}, {-16, -35}, {-17, -36}, {-18, -37}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1,
                 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 
                1, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 3, 1, 1, 1, 6, 3, 3, 2, 3, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404355622916393`, \
-0.3477865353040812, 0.10032776032697632`, -1.5742922321101673`, 
               1.469544745604665, -0.8081757318715175, -0.15769160761209444`, 
               0.4588132149897701, 0.45881338739158384`, -0.7989367910444312, 
               0.45881397046047834`, -0.7989357728907489}, "Children" -> 
              RawArray["Integer16",{{2, -9}, {-1, 3}, {4, 5}, {-2, 6}, {
                7, -10}, {-3, -11}, {8, -12}, {-4, 9}, {-5, 10}, {-6, 
                11}, {-7, 12}, {-8, -13}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2,
                 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 1, 1, 4, 1, 5, 6, 2, 4, 5, 5, 5, 6, 
                5, 3, 3, 3, 3, 1, 3, 1, 1, 1, 2, 3, 1, 1, 3, 4, 2, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212067964102506, -0.34778633036016604`, \
-1.4313913696155538`, 2.1683190017524296`, 
               0.6080453951843339, -0.3948152621282883, \
-0.41812694693550334`, -0.15769301720335482`, -0.798935184918963, 
               0.6080450567886793, -0.8340140474719977, \
-0.002239396742756295, -0.8340148254059621, -0.15769139416018785`, \
-0.002239993808117312, -0.2581576574270068, 0.458813096524759, 
               0.10032787039000524`, 
               0.6378919725351322, -1.468027936822251, -0.2581591629324871, \
-0.26240966631113016`, -0.2559837788308905, -0.26144497301615566`, 
               0.44245165171803347`, -0.25815883306313037`, 1.127563808268965,
                0.9890178769045486, 0.45881390426082813`, 
               0.8613555789873297, -0.09770592711395565, 0.45881440607685553`,
                0.7471080079154371}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {18, 19}, {6, -17}, {8, 
                9}, {7, -18}, {-1, -19}, {-2, 10}, {12, 13}, {
                11, -20}, {-3, -21}, {14, -22}, {-4, 16}, {-5, 
                15}, {-6, -23}, {-7, 17}, {-8, -24}, {20, -25}, {
                21, -26}, {-9, -27}, {-10, 22}, {-11, 23}, {24, 
                25}, {-12, -28}, {26, -29}, {-13, 27}, {28, -30}, {
                29, -31}, {-14, 30}, {31, -32}, {32, -33}, {-15, 
                33}, {-16, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2,
                 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 
                2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 1, 2, 5, 4, 1, 3, 1, 1, 4, 4, 4, 
                1, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 4, 2, 1, 3, 4, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212066653894475, 
               0.4588128492572823, -1.9760295811803363`, \
-0.15307381436020107`, -0.7989367997698391, -0.8340154994616888, 
               0.6080452516615455, 2.168855485091841, 0.45881422639707914`, 
               0.3931994345799841, 0.9899806769439099, 0.6080459128475999, 
               0.8613556944053986, 0.6080448449386227, 
               1.367201573759921, -0.258159171579909, 
               0.6378925731281537, -0.09770660211628168, \
-0.34778663786442987`, -0.8751629899644264, -1.4303318526281696`, \
-0.17824284739362795`, -0.35905791758745265`, -0.3327938742266987, 
               0.9828035627385807, 0.8613552826426201, 0.442452025858763, 
               0.57734219690259, -0.25815886971799573`, 
               0.8613550645650765, -0.25815796365802246`, \
-0.1517659093561663}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {-1, 6}, {-2, 
                8}, {-3, 7}, {-4, -19}, {9, -20}, {10, 
                11}, {-5, -21}, {-6, -22}, {-7, -23}, {14, -24}, {15, 16}, {
                17, -25}, {-8, 21}, {18, -26}, {-9, 19}, {-10, 
                20}, {-11, -27}, {22, 23}, {-12, -28}, {-13, 24}, {-14, 25}, {
                26, -29}, {27, 28}, {29, -30}, {-15, -31}, {-16, 30}, {31, 
                32}, {-17, -32}, {-18, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2,
                 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 4, 2, 6, 2, 1, 6, 4, 2, 3, 1, 4, 2, 
                2, 1, 1, 2, 3, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212067204011582, 
               0.1301294489463427, 0.6080448451508316, -0.7989353768942902, 
               0.6212066025301013, 
               0.4424516676370529, -0.8141463510774374, -0.15769235220075584`,
                
               0.6080454427814681, -0.7989353566529349, -0.2581590834870835, \
-1.4660572054456686`, 0.734700285466845, 0.4424507852313062, 
               0.44245057066074356`, -0.2592949079614866, \
-0.018883259320702145`, -0.7989359724420089, 0.4588138909773547, 
               0.6080460924620557}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 11}, {5, 
                6}, {-3, -13}, {7, -14}, {8, 9}, {-4, -15}, {-5, 
                10}, {-6, -16}, {-7, 12}, {13, 14}, {-8, -17}, {15, 16}, {
                17, -18}, {-9, -19}, {-10, 18}, {-11, 19}, {
                20, -20}, {-12, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2,
                 1, 2, 1, 2, 2, 2, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 1, 3, 2, 1, 5, 1, 2, 3, 2, 1, 4, 2, 
                1, 1, 6, 3, 1, 3, 2, 4, 4, 2, 3, 5, 1, 1, 6, 5, 1, 6, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6378911201827595, -0.002240461044502179, 0.4721880339858915, 
               0.4588128740642685, 
               0.44245178470123303`, -1.5731669376651283`, \
-0.8340155053188214, -1.842630122751391, 
               0.44245234995187976`, -0.2581578873646917, -0.7989356872900899,
                0.32732901513382817`, 
               0.6080454575564671, -0.7989358689223369, -0.07901170861101259, 
               0.01774827957328276, -0.1576925021926252, \
-0.25815904752179053`, -1.775225525627583, 0.4588141920721136, 
               0.442451285934355, 0.6080447717090625, 0.8613556944053986, 
               0.44245122867264586`, 0.4588140953245867, -0.4181270912669097, 
               0.713143140965979, -0.8328776999219514, 
               0.6212076250963587, -0.0022389640057993362`, 
               2.2670474602722646`, 0.6212070532937615, 1.4389065588383012`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {26, 27}, {6, 7}, {
                18, -19}, {8, 9}, {-1, 14}, {-2, -20}, {10, -21}, {-3, 
                11}, {-4, 12}, {-5, 13}, {-6, -22}, {15, -23}, {-7, 16}, {-8, 
                17}, {-9, -24}, {-10, 19}, {-11, 20}, {21, -25}, {
                22, -26}, {-12, 23}, {24, -27}, {25, -28}, {-13, -29}, {-14, 
                28}, {-15, 29}, {-16, -30}, {30, -31}, {31, -32}, {
                32, -33}, {-17, 33}, {-18, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2,
                 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
                1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 1, 2, 1, 3, 4, 4, 4, 1, 1, 4, 1, 4, 1, 
                3, 4, 4, 3, 3, 1, 1, 3, 4, 1, 3, 2, 2, 2, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212066252926274, 
               2.1683190017524296`, 
               0.4424523484117553, -0.8790415548241652, -0.25815794402348446`,
                0.6080452454157994, 0.6080453347851353, 
               0.6080463419571771, -1.5742922321101673`, \
-0.21706259871340516`, 0.8613555291010586, 1.1220148758800939`, 
               0.8613547253899672, -0.39289155737832715`, -0.2581574854169757,
                0.861355508057791, 0.8613552218053853, 0.45881365057039236`, 
               0.45881323766450866`, -1.9760295811803363`, \
-1.0838481090806606`, 0.6378912929286003, -0.34778714059058924`, 
               1.4097113375539525`, -0.25815800330005567`, 
               0.4424522955163428, -0.7989355711791903, 0.17237240093622486`, 
               0.09284813209698994, -0.2592949079614866}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -17}, {20, 21}, {5, 6}, {-1, 
                7}, {-2, 10}, {-3, 8}, {9, -18}, {-4, -19}, {11, 12}, {
                13, -20}, {15, -21}, {-5, 14}, {-6, -22}, {-7, 16}, {
                17, -23}, {18, -24}, {19, -25}, {-8, -26}, {-9, 
                22}, {-10, -27}, {23, 24}, {-11, 25}, {-12, -28}, {-13, 26}, {
                27, -29}, {-14, 28}, {-15, 29}, {30, -30}, {-16, -31}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2,
                 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 3, 5, 2, 2, 1, 1, 4, 5, 6, 3, 2, 4, 
                1, 3, 1, 1, 4, 4, 1, 1, 1, 3, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212066588334286, -0.25815842757812124`, 
               0.6378916273592292, -0.8340147895202659, 0.4424510468099814, 
               0.4424519958144377, 2.1702154232867947`, -1.2536616578744066`, 
               0.8613554410021367, -0.8340147791680916, 0.23175763429057272`, 
               0.637891714078985, 0.44245141884455963`, 0.6080447629072614, 
               0.7795296949837702, 
               0.6378909582959462, -1.4002646227842241`, -0.2916052041001884, 
               0.6080461672284425, 0.6080466075209561, -0.35905791758745265`, 
               0.12440605895005219`, -0.32953014564135463`, 
               0.4588139511522793, -0.2910153575539671, 1.0540270272449224`, 
               0.5104456511238906}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {14, 15}, {5, 
                6}, {-2, -16}, {7, 8}, {9, -17}, {-3, -18}, {10, -19}, {-4, 
                11}, {-5, 12}, {13, -20}, {-6, -21}, {16, 17}, {25, 26}, {
                18, -22}, {19, 20}, {-7, -23}, {-8, -24}, {21, 22}, {-9, 
                23}, {-10, 24}, {-11, -25}, {-12, -26}, {-13, 
                27}, {-14, -27}, {-15, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1,
                 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 2, 3, 1, 6, 2, 4, 2, 2, 1, 3, 5, 1, 
                6, 6, 4, 3, 1, 1, 4, 5, 4, 1, 6, 5, 1, 1, 6, 6, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.097705635769613, \
-0.8411925793423682, 0.4424516477751448, 0.45881305150394835`, 
               1.9545285293309203`, 0.2317576601771778, -0.09770617030264017, 
               0.8613555216456827, -0.44832123113908207`, -0.798936713023064, 
               0.19689654537490608`, 
               0.4588133830389882, -0.41812732206013337`, \
-0.5279726334241417, -0.15769203848943936`, 0.6212071217041144, 
               0.6080459204347948, -0.25815918025712925`, 
               0.11951433069533424`, 0.16730807509557621`, 
               0.6080450722545248, -0.418126950968047, 
               0.6080450309051777, -0.6950065761626032, 
               0.6212075804311041, -0.002238712126055791, \
-0.25435218851692376`, -0.6341131757623746, 0.6212074011743507, 
               0.6212067190715969, 0.46349732620547224`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {14, 15}, {-1, -19}, {6, 
                7}, {8, 9}, {-2, 13}, {10, 11}, {-3, -20}, {-4, 
                12}, {-5, -21}, {-6, -22}, {-7, -23}, {16, 17}, {-8, 
                24}, {-9, -24}, {18, -25}, {-10, 19}, {-11, 20}, {-12, 21}, {
                22, -26}, {-13, 23}, {-14, -27}, {-15, 25}, {26, 27}, {
                28, -28}, {-16, -29}, {-17, 29}, {30, -30}, {
                31, -31}, {-18, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
                 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 1, 6, 3, 1, 6, 6, 2, 3, 1, 3, 3, 6, 
                1, 4, 3, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404422053921673`, \
-0.25815728270794835`, -1.4313913696155538`, -0.15769207117827655`, 
               0.6378922527473962, -1.571306320011466, -0.15769181177544267`, \
-0.15769136637400627`, -0.7989367393934979, 0.6378921935851611, 
               2.267583943611676, 0.4588139776198319, 0.45881397046047834`, 
               0.2317585361508172, -0.3982257630337904, 0.8613545683133053, 
               0.10032787039000524`, 0.6378912872878448, -0.6635184427986625},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {-1, 6}, {
                9, -10}, {-2, 7}, {-3, 8}, {-4, -11}, {-5, 10}, {11, -12}, {
                12, -13}, {13, 14}, {15, -14}, {-6, -15}, {
                16, -16}, {-7, -17}, {-8, -18}, {19, -19}, {-9, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1,
                 1, 1, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 6, 3, 1, 4, 2, 1, 3, 2, 5, 1, 4, 4, 
                3, 6, 3, 3, 1, 5, 5, 2, 1, 1, 3, 2, 3, 1, 2, 2, 1, 1, 3, 1, 2,
                 4, 1, 2, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOIXDt+m2m54tZ/DWb3KR+CYfUNYo9j7B4/tNYL2/jaK
vWv/5ODE5xciGR0euOl8tpzw2t6Dmefl4wkv96/Q2d/Envptf8WuI1GrWi/s
37DCtEM+8I79id2+CgsjkvY3WKZN+1L/fX+HnEOcVOlj+w7l3hcgWuP/6Rmz
Mp/YP9ifxvQOaM+Na9oiIL7Gp6ATa4HmzLj+SWYN3wH7iHlspy8AzbH4/WBD
RlTSfgFnxumyQPMbZGQsz6o93v/h/MrdwcnP7DXOPs4yAbpzQ4iBrzJQfsGv
2C0gczxC8vleVnyzv1ArcxvkLwE7kcePgO7+0BaSvtZx834OdmPuF3uu268I
01i7Eqi+g4/vg4PVh/0C1VszFIHmaPiVrgf5d4Uv36a8M6/2d9QnGEcw79xf
0JhsJd3z0F7Cvsps/4ev9gD2yaPs
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -22}, {8, 9}, {-1, 5}, {
                6, -23}, {7, -24}, {-2, -25}, {10, 11}, {-3, 33}, {-4, 12}, {
                13, 14}, {-5, -26}, {15, 16}, {26, 27}, {17, -27}, {18, 
                19}, {-6, -28}, {-7, 20}, {23, 24}, {21, -29}, {-8, 
                22}, {-9, -30}, {-10, 25}, {-11, -31}, {-12, -32}, {
                28, -33}, {-13, 30}, {29, -34}, {-14, -35}, {31, -36}, {-15, 
                32}, {-16, -37}, {-17, 34}, {-18, 35}, {36, -38}, {
                37, -39}, {-19, 38}, {39, -40}, {-20, 40}, {-21, -41}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1,
                 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 
                2, 1, 1, 1, 1, 2, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 5, 2, 4, 3, 2, 1, 3, 1, 4, 2, 3, 3, 1, 
                5, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240456653852394, \
-0.8340145974215183, 0.4424523987043849, -0.34778742206604685`, 
               0.10032763544289702`, 0.4424512608224105, 
               1.7508239400942678`, -0.25815831137026457`, \
-1.6992915269271744`, 0.8613552218053853, -0.7989368011186366, 
               0.4588133606717326, 
               0.4588129366743021, -0.499232209311256, -0.4181271206702557, 
               0.7143962129102084}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -9}, {-2, 6}, {14, 
                15}, {7, -10}, {8, -11}, {9, 10}, {-3, -12}, {11, -13}, {-4, 
                12}, {13, -14}, {-5, -15}, {-6, 16}, {-7, -16}, {-8, -17}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1,
                 1, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 6, 2, 1, 1, 3, 2, 1, 3, 3, 3, 1, 1, 
                2, 4, 1, 3, 2, 6, 5, 1, 3, 1, 1, 1, 6, 1, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770564694274908, \
-0.4181271206702557, -0.15769242760096347`, -0.7989368011186366, \
-0.8374551274923094, 2.2670474602722646`, 
               0.4588133492930262, -0.7989358655543812, -0.07845583233692177, 
               0.45881305150394835`, 0.6378909095721719, 0.45881387299651566`,
                1.4087656701614755`, -0.3280921337987741, -0.7989364679107629,
                0.8613549915730454, 1.4705493468844963`, -0.2581592266731052, 
               0.4424523987043849, 0.621208006403891, -0.002240128463206391, 
               0.6983124841789303, -0.25815728464278287`, \
-0.7773870715852826, -1.602068706819077, -0.45786994716650486`, 
               0.6212069971326821, 0.6412932727366103, -0.25815725616557783`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 18}, {-2, 6}, {10, 
                11}, {7, -18}, {-3, 8}, {9, -19}, {-4, -20}, {-5, -21}, {12, 
                13}, {-6, 14}, {-7, -22}, {-8, 15}, {-9, 16}, {-10, 
                17}, {-11, -23}, {-12, 19}, {20, -24}, {21, -25}, {22, 23}, {
                24, -26}, {-13, 29}, {25, 26}, {-14, -27}, {27, 
                28}, {-15, -28}, {-16, -29}, {-17, -30}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2,
                 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 2, 4, 1, 5, 5, 1, 1, 1, 3, 1, 3, 1, 
                5}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6212066653894475, -0.3477863289701504, -0.09770666951960305, 
               0.8613557576629454, -1.5731669376651283`, \
-0.0022396939792828988`, -0.834014529052375, -0.3908256660124634, \
-0.6005070643199026, 0.018247602800866458`, 
               0.637892096897005, -1.2571587569773826`, -0.2581590186293594, \
-0.499232209311256, -0.8340144141998209}, "Children" -> 
              RawArray["Integer16",{{2, -9}, {-1, 3}, {4, 5}, {6, -10}, {-2, 
                11}, {7, -11}, {8, -12}, {9, 10}, {-3, -13}, {-4, -14}, {
                12, -15}, {-5, 13}, {-6, 14}, {-7, 15}, {-8, -16}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2,
                 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 3, 4, 1, 1, 1, 1, 6, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212066025301013, 0.44245059861642, 
               0.6378913378064395, 0.8613557576629454, 
               2.267583943611676, -0.807956012038237, -0.8437066197101091, \
-0.14615260993725188`, -0.1576927804726833, -0.2581590661856179, \
-0.8328776999219514}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -5}, {10, 11}, {5, -6}, {
                6, -7}, {7, 8}, {
                9, -8}, {-1, -9}, {-2, -10}, {-3, -11}, {-4, -12}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 2, 3, 6, 1, 6, 4, 2, 3, 3, 4, 6, 3, 
                3, 3, 1, 2, 1, 2, 1, 1, 2, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340137627464808, \
-1.4313913696155538`, 0.17237237766133306`, 0.458814163352931, 
               0.6212075654410167, 1.4097113375539525`, 0.6212074530670089, 
               0.6080448963267031, 0.44245237953224414`, -0.2581591455792629, 
               0.4588129140487016, 0.6080465341685386, 
               0.23175750948471396`, -0.25815840361795184`, \
-0.2581582882858444, -0.2581581917426421, -0.25435218851692376`, 
               0.4424512405095897, -0.3910593859975209, -0.09770640939803432, 
               0.5073113633047619, -0.8493297698011215, -0.09770639453495478, 
               0.5483527689263266, 0.8859818465616653}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -15}, {5, 6}, {7, 
                8}, {19, -16}, {9, -17}, {-3, 15}, {10, -18}, {-4, 11}, {
                12, -19}, {-5, 13}, {-6, 14}, {-7, -20}, {-8, 16}, {-9, 17}, {
                18, -21}, {-10, -22}, {20, 21}, {22, -23}, {-11, 
                23}, {-12, -24}, {24, -25}, {-13, 25}, {-14, -26}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2,
                 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 3, 3, 6, 2, 6, 1, 1, 2, 6, 3, 6, 6, 
                5, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6212066588334286, 
               0.44245073053305095`, 0.6378918360321286, 
               0.4588135260352306, -0.15769244984734265`, 
               0.4424505535625145, -0.15769139416018785`, \
-1.6717298295868268`, -0.08607223689826826, -0.7989357738560976, \
-0.15769246894117317`, 0.5483529632391733, -0.15769133157113124`, 
               0.6212066275606531, -0.0022396652640356146`, \
-1.5028056951501103`, 0.4717152587019302, -0.17824237812426946`, 
               0.02472693824444172, -0.6092883086485692, 1.367201573759921, 
               0.4424512748579281, 0.4424523108418774, 
               0.44245120728419796`, -1.3996653659149079`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, 
                7}, {-1, -13}, {8, 9}, {-2, 12}, {-3, 10}, {-4, -14}, {
                11, -15}, {-5, -16}, {13, 14}, {-6, -17}, {
                15, -18}, {-7, -19}, {18, 19}, {-8, -20}, {-9, -21}, {20, 
                21}, {22, 23}, {-10, -22}, {24, -23}, {-11, -24}, {
                25, -25}, {-12, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2,
                 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 3, 1, 6, 3, 1, 6, 1, 1, 6, 6, 1, 5, 1, 
                6, 4, 6, 1, 1, 4, 1, 3, 6, 6, 5, 4, 1, 6, 6, 5, 3, 1, 4, 2, 
                2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.45881367474447154`, -0.2581577043469925, 
               0.4721880339858915, -0.15769258103778316`, \
-0.25815731232415606`, 0.9877935579625943, 
               0.6212075946761351, -1.6763300036223896`, -0.6420255730125479, 
               0.6212073910031739, 
               0.6212070981661597, -0.21994362099256137`, -0.834014170750712, \
-0.5977055082805691, 0.6212069834397793, 0.6080450419691417, 
               0.23175757640288785`, -0.3924449091916449, \
-1.4963583168993182`, 0.8613549611414326, 0.16148222445375104`, 
               0.6378915027396532, 0.2317576282093048, 
               0.621208014132181, -0.4181270786012097, -0.34778656990962453`, \
-1.3654779248191442`, 0.23175756821329907`, 
               0.6212070837206847, -0.8340147942396907, 
               0.45881387667499096`, -0.36407740778639264`, 
               0.2567845711184833, -0.09770704247332229, \
-0.09770718525714717}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {6, 7}, {-1, 
                16}, {-2, -21}, {8, -22}, {-3, 9}, {-4, 10}, {11, -23}, {
                12, -24}, {13, -25}, {-5, 14}, {-6, 15}, {-7, -26}, {-8, 
                17}, {18, 19}, {-9, -27}, {-10, 20}, {-11, 21}, {-12, -28}, {
                24, 25}, {33, 34}, {26, 27}, {-13, -29}, {28, 
                29}, {-14, -30}, {-15, -31}, {30, 31}, {-16, -32}, {-17, 
                32}, {-18, -33}, {-19, -34}, {35, -35}, {-20, -36}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1,
                 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 
                2, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 2, 4, 2, 1, 3, 1, 1, 1, 3, 5, 3, 1, 
                1, 1, 1, 1, 1, 3, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 4, 4, 5, 2, 2,
                 1, 3, 5, 6, 6}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBTQGy/iFib1JlAQAAACgAAADQMhBfM13dPwB6jdA9sOq/uBsp1eOQ6b84
QvZ3G3XjP+CeiG0jUdw/kFDD7Ed77j/YHh7/MF3dP1iylQtDdeW/0A944LMh
2b+w9coL1KDnv4ilo/athdC/MAsDsjhYYr9Iau5YqYXQvzgWf2Vk9da/oIR5
4VJn/L9oYYKB47/pv/BWAUyuAdW/+OtrxiOz6b+QAPx+KwzQv3DQM1oWr7k/
cAJ+5x5R3D9QoZvIG1HcP0D2FRiDgt+/kHHIMBOvuT9gHmmBn1Dkv5jyQm0+
cOA/8Be468/H5T+4BmmACYHlP/hI51gOdvY/GD1hXPkt3j/gRizzOZDrPyAS
4kIiQta/GGu+PZjC2r9o4sTX4pDpvxAZ9DVKA7m/KC3IunP86r9gZ36cnGnk
P0AGOruFWmK/GNYxhO7g4z9AO8gC7uDjP+5NqWY=
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 30}, {-2, 6}, {11, 
                12}, {7, -22}, {8, 9}, {10, -23}, {-3, -24}, {-4, -25}, {-5, 
                13}, {28, 29}, {14, 15}, {16, 17}, {20, 21}, {-6, 18}, {-7, 
                19}, {-8, -26}, {-9, -27}, {-10, -28}, {22, 23}, {24, -29}, {
                25, 26}, {-11, -30}, {-12, -31}, {-13, 
                27}, {-14, -32}, {-15, -33}, {-16, -34}, {31, 32}, {
                33, -35}, {38, 39}, {34, 35}, {-17, -36}, {36, -37}, {-18, 
                37}, {-19, -38}, {-20, -39}, {40, -40}, {-21, -41}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1,
                 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 
                2, 1, 1, 2, 2, 2, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 5, 5, 1, 2, 1, 4, 3, 6, 2, 4, 2, 2, 
                1, 4, 3, 1, 1, 2, 4, 1, 1, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.4424504864231795, 
               1.6742500110987137`, -0.0022404529224213585`, \
-0.4181273192651078, -0.8096228557501863, -0.09770722861706127, \
-0.8437066197101091, 0.8613555216456827, 
               0.10032681949836564`, -0.1576931945682285, -0.798936464355422, 
               0.8613557562463541, -0.09770701547703864, -0.7989355699286458, \
-1.3992635409159035`, 0.8613550367697851, 
               0.6378918467279897, -0.3637678477184352, -0.08428808760308049, \
-0.09770655760120817, -0.3477873134271241, 0.6754078912441726, 
               2.1683190017524296`, 0.25678360402469425`}, "Children" -> 
              RawArray["Integer16",{{2, -13}, {3, 4}, {5, 6}, {23, -14}, {7, 
                8}, {12, 13}, {9, -15}, {10, -16}, {-1, -17}, {-2, 
                11}, {-3, -18}, {14, -19}, {-4, 17}, {15, 
                16}, {-5, -20}, {-6, -21}, {18, -22}, {-7, 19}, {-8, 20}, {-9,
                 21}, {-10, 22}, {-11, -23}, {24, -24}, {-12, -25}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2,
                 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 2, 6, 5, 1, 4, 1, 1, 4, 1, 3, 1, 1, 
                4, 1, 3, 3, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340138151919971, 
               0.44245073053305095`, 0.4424523480824525, 
               0.6212066588334286, -0.002239571117750798, \
-1.4303318526281696`, -0.3477864650110347, -0.42313130635645724`, \
-2.010367012566469, 0.6080453114417237, -1.9760295811803363`, 
               0.10032809578406543`, 1.4097113375539525`, 
               0.23223622362931962`, 0.6080452814916031, 
               0.9214320458513692, -0.2581572727022956, 0.1898667981243627, 
               0.8613557562463541}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -10}, {4, -11}, {5, 6}, {
                7, -12}, {9, 10}, {-2, 8}, {-3, -13}, {-4, 11}, {13, 14}, {-5,
                 12}, {-6, -14}, {15, -15}, {19, -16}, {16, -17}, {
                17, -18}, {-7, 18}, {-8, -19}, {-9, -20}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2,
                 1, 2, 1, 1, 2, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 1, 4, 
                2, 4, 3, 4, 4, 1, 2, 1, 3, 3, 5, 2, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769132486515436`, 
               0.45881342926351243`, -1.4313913696155538`, 0.4424519825013422,
                0.6378919035721449, 0.4424516301401762, 0.6080451497799988, 
               0.4424514142526914, 0.4424511757149885, 
               0.4424507283104093, -0.7989364536199535, -0.7989353909172916, \
-1.1885341623679029`, 0.8613554683650175, 0.44245136548728237`, 
               0.6080448472594462, 0.637892626775705, 
               0.8613557562463541, -0.34778648883392016`, 1.0530691794114553`,
                0.4424511994945828, 0.8158668338946242, 
               0.6378910926589718, -0.25815906974329117`, \
-0.002240456653852394, 0.44245057066074356`, 0.8613549611414326}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {15, 16}, {6, -12}, {
                14, -13}, {7, -14}, {-1, 8}, {9, -15}, {10, -16}, {
                11, -17}, {-2, 12}, {-3, 
                13}, {-4, -18}, {-5, -19}, {-6, -20}, {17, 18}, {19, -21}, {
                24, -22}, {-7, 20}, {21, -23}, {22, -24}, {
                23, -25}, {-8, -26}, {-9, 25}, {-10, 26}, {
                27, -27}, {-11, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1,
                 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], 
          "OOBConfusionMatrix" -> {{0.7278058536425805, 0.3412983083123557}, {
           0.2721941463574194, 0.6587016916876443}}, "Calibrator" -> 
          MachineLearning`CalibratorFunction[
           "TemperatureScaling", <|"Theta" -> 2.064278196477426|>], "Method" -> 
          "RandomForest", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "FeatureFraction" -> <|
             "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
            "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "Implementation" -> <|
             "Value" -> "Default", "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "RandomForest", 
               "Options" -> <|
                "FeatureFraction" -> <|"Value" -> Automatic|>, 
                 "LeafSize" -> <|"Value" -> Automatic|>, 
                 "TreeNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "Implementation" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
               Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
               0.5, "Implementation" -> Automatic}, "ModelUtility" -> 
             Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
          "InputDimension" -> 6, "OutputDimension" -> 1|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.105381, 
          "MaxTrainingMemory" -> 507200, "DataMemory" -> 142440, 
          "FunctionMemory" -> 266536, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 20.907651`8.072880225750502}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"5", "\<\"RandomForest[2,0.8]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["585", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 585, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 585, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {28.58518547008547}, 
                    "StandardDeviation" -> {13.976063762661994`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.9946267450121394, \
-0.03407433793023451, -0.09775774957092921}, {
                    0.09816918151940524, -0.6102457056117331, \
-0.7861062209283474}, {-0.03287019784495462, -0.7914790700183132, 
                    0.6103117496956613}}, 
                    "Precisions" -> {0.9897606674632015, 11.282142584680745`, 
                    15.030512360916983`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429307551`, 0.0688002321900674, 
                    0.04406960352557055}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4888356147712292618|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429308013`, 0.06880023219006728, 
                    0.044069603525570544`}, 
                    "StandardDeviation" -> {1.0001277265502797`, 
                    0.2895836439382027, 0.2853034921847531}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429308013`, 0.06880023219006728, 
                    0.044069603525570544`}, 
                    "StandardDeviation" -> {1.0001277265502797`, 
                    0.2895836439382027, 0.2853034921847531}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {47.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045027, "MaxTrainingMemory" -> 275416,
                     "DataMemory" -> 67488, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 20.956387`8.073891393637922}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.198843232837151, -3.198843232837151, \
-2.391992609930034, -2.285062253245558, -2.116923020713814, \
-2.1132580925056175`, -2.1044456809652696`, -2.061202618673542, \
-1.9627655697294473`, -1.9427479626028277`, -1.772998324426125}, 
                    "LeftBoundary" -> -2.391992609930034, "LeftScale" -> 
                    0.4034253114535584, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.585071809688816, 0.3727126831021832], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {28.58518547008547}, 
                 "StandardDeviation" -> {13.976063762661994`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.0977066308259964, 
                    0.6378918290138245, -0.34778690338134766`}, \
{-0.7989358901977539, 0.4588138163089752, 0.8613548278808594}, {
                    0.4424514174461365, -0.25815823674201965`, 
                    0.6080456972122192}}], 
                   RawArray["Real32",{{0., 
                    0.}, {-0.8340147137641907, -0.15769228339195251`}, \
{-0.0022395034320652485`, 0.621207594871521}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5434412265758092, "survived" -> 0.4565587734241908|>|>,
         "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 6, 3, 1, 1, 1, 1, 4, 1, 6, 1, 4, 1, 
                4, 1, 1, 4, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4424505508393879, -0.15769134000713358`, 
               0.23175765868836073`, 
               0.4588137435997304, -1.754253754707543, -0.04853476268133994, 
               2.2812055660834147`, 3.177153560506561, 0.8613541885173914, 
               1.4607264559377988`, 0.23175771357731434`, 1.3865663074596135`,
                0.8613541420551387, 
               0.5712708233645856, -0.3477871888503836, -0.11351836881521382`,
                0.31870656000062514`, 0.6080459379352385, 0.1898672930334382, 
               0.036678422923794196`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -9}, {6, 7}, {-2, 
                8}, {-3, -10}, {-4, -11}, {9, -12}, {10, 11}, {12, -13}, {-5, 
                20}, {13, -14}, {14, -15}, {15, -16}, {16, 17}, {-6, -17}, {
                18, -18}, {19, -19}, {-7, -20}, {-8, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2,
                 1, 2, 2, 1, 1, 2, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{5, 2, 2, 2, 5, 4, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.4424505249171675, 
               0.44245216581043634`, -0.09770599247822687, \
-0.8340142376329718, -0.34778772694663695`, 0.8613545700046483}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -5}, {-1, -6}, {5, 6}, {-2, 
                7}, {-3, -7}, {-4, -8}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 1, 1, 2, 3, 3, 2, 2, 3, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765466549292`, 
               0.44245055370331565`, -1.7557905695259564`, 
               2.2812055660834147`, -0.7989356972344961, 
               0.10032767664483844`, -0.2581579906995959, \
-0.7989367816947954, -0.09770747502017263, -0.2581572620556458, 
               0.1898667948597781}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -8}, {7, 8}, {5, -9}, {-1, 
                6}, {-2, -10}, {-3, -11}, {-4, 9}, {-5, 10}, {-6, 
                11}, {-7, -12}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 2, 2, 4, 1, 1, 1, 1, 2, 2, 4, 1, 1, 
                5, 2, 3, 2, 2, 2, 3, 1, 4, 1, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340137221911244, 
               1.3507584448137298`, -0.7989352568758061, 0.4424504819403494, 
               0.8613546085836319, -0.2243385276613794, -0.1534268178829239, 
               0.13652522717300064`, -0.8645222189087294, 0.442451364325831, 
               0.44245191337673795`, 
               0.6080454738362064, -1.657852890829675, -1.719635490929953, \
-0.0022402458769481166`, -0.0977068876591779, -0.2581586701151952, \
-0.09770747115652667, -0.09770746471801806, 
               0.44245158526501704`, -0.25815845612486843`, \
-0.003177290446219557, 0.6080457443648664, 0.13788933939399306`, 
               0.17237240611135207`, -0.3270918556875895}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -16}, {8, 9}, {5, -17}, {-1, 
                6}, {-2, 7}, {-3, -18}, {-4, -19}, {10, 11}, {12, 13}, {
                15, -20}, {-5, 14}, {-6, -21}, {-7, -22}, {16, 
                17}, {-8, -23}, {-9, 18}, {-10, 19}, {-11, 20}, {
                21, -24}, {-12, 22}, {23, 24}, {25, 
                26}, {-13, -25}, {-14, -26}, {-15, -27}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1,
                 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 1, 6, 2, 2, 4, 1, 4, 4, 1, 3, 2, 3, 
                5, 6, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4424505533023573, -0.002240472912956721, \
-1.6514397030568855`, -0.15769134000713358`, -0.09770703039094708, 
               0.4424504819403494, 0.8613550418763651, 0.59612501541472, 
               0.8613555720366435, -0.3477861956735855, -1.3236963540680264`, 
               0.45881447237041906`, -0.7989361383184779, 
               0.6378917724487465, -0.0022387774270136683`, 
               0.23175761264479133`, -1.8673794300403035`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {15, 16}, {6, -11}, {9, 
                10}, {7, -12}, {-1, 8}, {-2, -13}, {11, -14}, {-3, -15}, {-4, 
                12}, {-5, 13}, {-6, 14}, {-7, -16}, {-8, 
                17}, {-9, -17}, {-10, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2,
                 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 3, 2, 4, 1, 4, 4, 3, 1, 4, 2, 1, 2, 
                4, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.17237242069577885`, 0.6378909015615122, -0.7989356972344961, 
               0.6080456825083251, -1.330432199425795, 0.6080461885717474, 
               0.6080457162281636, -0.2581579812250099, 0.24872155298867482`, 
               0.8613552358244476, 0.4424518743198962, -0.15502099577942663`, 
               0.4424510947915894, 0.8613550961851839, -0.17824223629544722`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -8}, {5, -9}, {-1, -10}, {-2, 
                6}, {7, 8}, {-3, -11}, {-4, 9}, {-5, 10}, {11, -12}, {
                12, -13}, {13, -14}, {-6, 14}, {15, -15}, {
                16, -16}, {-7, -17}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1,
                 1, 1, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 5, 5, 1, 6, 4, 4, 1, 6, 1, 3, 1, 4, 
                2, 3, 4, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769131405578007`, \
-0.2581572503191376, -0.002239503650998377, -0.0022401778342442773`, \
-1.3351373137935063`, 
               0.6212081296321266, -0.34778654096780315`, \
-0.34778737562873197`, -0.5048967428900015, 0.6212080135665046, 
               0.5732465104870448, 0.10032780596845037`, 1.2842784514931367`, 
               0.6080458959167494, -0.7989368159834465, 0.6378908892030122, 
               0.6080460213491881, -0.25815769287375634`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -11}, {4, 5}, {6, 7}, {14, 
                15}, {8, -12}, {11, 12}, {-2, 9}, {-3, 10}, {-4, -13}, {-5, 
                13}, {-6, -14}, {-7, -15}, {-8, -16}, {-9, 16}, {17, -17}, {
                18, -18}, {-10, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
                 2, 1, 2, 2, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 1, 3, 4, 1, 2, 2, 2, 3, 1, 2, 3, 2, 
                2, 1, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.1576913134904645, 
               0.6080466702977949, -1.7554597120288093`, -0.2581575163425822, 
               0.8613541452858371, 2.1717606015016777`, 
               0.4424519918820762, -0.7989359035767931, -0.7989367651017671, 
               0.6378909015615122, -0.11497178095454175`, 
               0.44245237838177554`, -0.25815867102051815`, 
               0.44245097477706974`, -0.7989363874600182, -0.2946164514435359,
                0.17089974389532125`, -0.798936357204842}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 9}, {-2, 6}, {
                8, -10}, {7, -11}, {-3, -12}, {-4, -13}, {-5, 10}, {
                11, -14}, {12, 13}, {14, -15}, {17, 18}, {15, 
                16}, {-6, -16}, {-7, -17}, {-8, -18}, {-9, -19}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
                 2, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 3, 3, 3, 2, 1, 6, 4, 1, 1, 6, 1, 1, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770565502240813, \
-0.1576913134904645, -0.2581572620556458, 0.4588137435997304, 
               0.45881436131758013`, -0.0977060315094751, 
               1.9232455924173841`, -0.15769141465594472`, 
               0.13012949061780144`, -0.8653012207669484, \
-1.8673794300403035`, 0.6212080549103867, 0.24679099864237575`, 
               0.2454523918715441, -0.22124082911598952`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {8, 9}, {-1, 
                6}, {-2, -9}, {-3, 7}, {-4, -10}, {-5, 10}, {-6, -11}, {11, 
                12}, {-7, -12}, {13, -13}, {14, -14}, {15, -15}, {-8, -16}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
                 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 1, 4, 1, 1, 4, 1, 2, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404747625315025`, 
               0.10032780624206661`, -0.34778694350828676`, \
-0.04441712833430039, -0.34778784382514605`, -0.9635189827121655, \
-1.5487451625055684`, 0.8613550463314601, 0.59612501541472, 
               0.4424516180650535, 0.861354843205846, -1.4372744964597626`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 10}, {6, -8}, {-2, 
                8}, {7, -9}, {-3, -10}, {-4, 9}, {-5, -11}, {11, -12}, {-6, 
                12}, {-7, -13}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
                 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{6, 3, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.2317576560883441, -0.2581572503191376, 0.8613549363941768}, 
              "Children" -> 
              RawArray["Integer16",{{2, -3}, {-1, 3}, {-2, -4}}], 
              "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 4, 1, 1, 2, 1, 2, 3, 3, 1, 2, 2, 2, 
                4, 5, 6, 6, 4, 1, 1, 4, 3, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.45881286885574646`, 
               0.2317576407669235, 
               0.8613552280855563, -0.8967221501057967, -1.4695573677735911`, 
               0.44245174312607505`, -1.320356959308148, 
               0.4424516666522176, -0.25815891518976075`, \
-0.2581586701151952, -0.5066081963805251, 0.4424513888052797, 
               0.44245087864319066`, 0.4424505449593874, 
               0.6080458661803139, -0.002240472912956721, 
               0.23175766192495706`, -0.15769312950096825`, \
-0.3477873956619906, 0.10446802931533494`, -1.3643137646455337`, 
               0.8613550961851839, 0.6378922119316188, 3.10577891290626, 
               1.4274269060748281`, -1.3316773491028613`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {16, 17}, {5, 6}, {-2, 
                7}, {8, -13}, {-3, -14}, {9, -15}, {-4, 10}, {11, 
                12}, {-5, -16}, {13, -17}, {14, -18}, {15, -19}, {-6, -20}, {
                18, 19}, {-7, 26}, {20, -21}, {-8, 21}, {-9, -22}, {-10, 
                22}, {23, -23}, {24, -24}, {
                25, -25}, {-11, -26}, {-12, -27}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2,
                 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 5, 2, 2, 2, 1, 2, 4, 1, 4, 6, 1, 1, 
                1, 6, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4424506402208004, -0.834013763346376, -0.4181270860490356, 
               0.4424505618715697, -0.7989367816947954, 
               0.44245057109969244`, -1.4338871007617158`, \
-0.09770747115652667, -0.3477862613637437, 3.064815582422174, 
               0.6080456177474298, 0.6212075422857772, 1.5277785142326543`, 
               1.427889358540675, -0.3667165463797448, 
               0.6212073316660831, -0.11392397215685446`, \
-0.2473673525131097, -1.9734780304226387`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 17}, {-2, -11}, {-3, 
                6}, {7, -12}, {-4, 8}, {-5, 9}, {10, 11}, {
                12, -13}, {-6, -14}, {13, 14}, {15, -15}, {-7, -16}, {-8, 
                16}, {-9, -17}, {18, -18}, {19, -19}, {-10, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2,
                 2, 1, 1, 2, 2, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 3, 3, 3, 2, 4, 3, 3, 1, 2, 4, 4, 1, 
                4, 4, 4, 1, 3, 2, 2, 3, 2, 3, 3, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765466549292`, 
               0.4424507911240423, 0.6378909015615122, 0.4588137435997304, 
               0.45881362907735124`, 0.44245049338001774`, 0.8613546161864409,
                0.4588132658060231, -0.2581586877181832, 
               3.1342331614387575`, -0.7989367501801485, 0.6080448146790616, 
               0.6080447492376093, -1.9357051989855876`, 0.6080452371151068, 
               0.861354843205846, 
               0.8613547417452727, -0.8558083696164456, \
-0.25815738154914536`, -0.7989364814472077, 
               0.44245237838177554`, -0.2581583533016967, 
               0.4424515181134563, -0.25815821858949173`, \
-0.25815792328194354`, -0.2581578409399934}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -13}, {9, 10}, {5, -14}, {
                6, -15}, {7, -16}, {8, -17}, {-1, -18}, {-2, 
                11}, {-3, -19}, {-4, 12}, {13, 14}, {-5, -20}, {15, 
                16}, {-6, -21}, {17, -22}, {18, -23}, {19, 
                20}, {-7, -24}, {-8, 21}, {22, -25}, {-9, 23}, {
                24, -26}, {-10, 25}, {-11, 26}, {-12, -27}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
                 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{5, 2, 4, 4, 1, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.4424504819403494, -0.34778654096780315`, 
               0.8613546085836319, -1.3318464347934302`, \
-0.25815855580810165`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -4}, {-1, 5}, {-2, -5}, {
                6, -6}, {-3, -7}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 4, 6, 
                1, 6, 2, 4, 3, 3, 3, 2, 2, 3, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340137605069495, 
               0.4424504819403494, -1.678198828508597, 
               0.45881366918426814`, -0.04438755610469958, 0.1394273117048801,
                0.10846541145551669`, -0.2570774608452946, 
               0.4424509616556995, -0.0977072072817684, 0.03587096827182129, 
               3.064815582422174, 0.6080458735524878, 
               0.6212079699440265, -0.858938494711289, 0.6212068214241588, 
               0.4424513905722822, -0.34778748701660156`, 
               0.63789108496126, -0.25815900861629304`, -0.2581579616362637, 
               0.4424511631771262, 0.44245103347254666`, 0.6378923804613255, 
               0.44245064721299077`, 0.6378910727383102}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {
                6, -10}, {-1, -11}, {7, -12}, {
                8, -13}, {-2, -14}, {-3, -15}, {11, 12}, {-4, -16}, {
                13, -17}, {14, 15}, {16, 17}, {-5, -18}, {18, 19}, {
                22, -19}, {-6, 20}, {21, -20}, {-7, -21}, {-8, -22}, {
                23, -23}, {24, -24}, {25, -25}, {26, -26}, {-9, -27}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2,
                 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 1, 2, 4, 1, 3, 3, 1, 4, 3, 4, 4, 3, 
                4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.4181271042861785, 
               0.6080447189113638, -1.3291048915077504`, 0.4424508703671042, 
               0.8613541452858371, -0.04438755610469958, -0.2581577437264091, 
               0.45881392696288836`, -0.1122201664625202, 0.7346999637819378, 
               0.4588144623720156, 0.6080463557508518, -0.34778665645132634`, 
               0.4588140532569529, 0.2567841030496978, 0.5712708233645856, 
               0.13788933939399306`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {10, 11}, {5, 6}, {
                7, -10}, {-2, -11}, {-3, 8}, {9, -12}, {-4, -13}, {-5, -14}, {
                12, 13}, {-6, 14}, {-7, 15}, {-8, -15}, {16, -16}, {
                17, -17}, {-9, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2,
                 1, 2, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 4, 1, 1, 1, 3, 1, 1, 4, 2, 1, 2, 2, 
                2, 3, 1, 3, 4, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.2317576560883441, 
               0.44245049338001774`, -0.3477865516645289, \
-0.8645222189087294, -1.9770245261702204`, 
               0.24643983063254704`, -0.2581583437138395, \
-1.4733345661052422`, -1.5015524186092541`, 
               0.7346999185830425, -0.17824238346993249`, \
-0.8967221501057967, -0.798936828121442, 0.4424507491059271, 
               0.44245149823955376`, 0.6378923250354145, 
               0.2454523918715441, -0.25815790821454954`, 
               0.8613543030027397, -0.7989363272230365}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -12}, {-2, 4}, {5, 6}, {-3, 
                7}, {13, 14}, {8, 9}, {-4, -13}, {10, 11}, {-5, -14}, {-6, 
                12}, {-7, -15}, {-8, 15}, {-9, -16}, {16, -17}, {17, -18}, {
                18, -19}, {-10, 19}, {20, -20}, {-11, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2,
                 1, 2, 2, 1, 1, 2, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 1, 3, 1, 2, 2, 3, 4, 1, 3, 2, 4, 
                4, 6, 2, 4, 1, 1, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769131405578007`, \
-0.2581575076685727, -1.3243997771400373`, -0.041442270249034796`, 
               0.4588137435997304, 0.1781042165413258, 
               0.4424519918820762, -0.09770599247822687, 0.45881362907735124`,
                0.6080459926377708, 
               3.3311251993249282`, -0.25815835316989766`, \
-0.7989367816947954, 0.6080461899874461, 0.6080461772041712, 
               0.2317576560883441, -0.09770653271565333, 
               0.6080459584538547, -0.0755260059770152, -0.3650545258769604, \
-0.25815789600013206`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, 6}, {7, 
                8}, {-2, -13}, {9, -14}, {-3, -15}, {-4, -16}, {-5, 12}, {
                13, -17}, {-6, -18}, {-7, 14}, {15, 16}, {17, -19}, {-8, 
                21}, {-9, 18}, {-10, 19}, {20, -20}, {-11, -21}, {-12, -22}}],
               "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
                 1, 1, 2, 1, 2, 2, 2, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 1, 1, 5, 4, 1, 1, 1, 4, 4, 1, 4, 1, 
                1, 1, 3, 4, 3, 1, 4, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.10032778267052445`, -1.3243997771400373`, -1.51757359609074, \
-0.8340142412237395, 0.8613545700046483, -0.36364284645110123`, 
               0.0950930946784474, 0.41680505647872934`, 
               0.6080459926377708, -0.34778616789772654`, 1.3865663074596135`,
                0.6080465083208413, 0.8514530424728566, 1.1792513085582002`, 
               0.928916555498005, -0.2581577540488591, 
               0.861354843205846, -0.25815725517525445`, -0.3897131657466768, 
               0.8613547923906184, -0.7989364814472077, -0.07724691290951724},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, -14}, {-2, 
                6}, {-3, 7}, {-4, 8}, {-5, 9}, {-6, -15}, {-7, -16}, {12, 
                13}, {14, -17}, {17, 18}, {-8, 15}, {
                16, -18}, {-9, -19}, {-10, 19}, {21, -20}, {-11, 
                20}, {-12, -21}, {22, -22}, {23, -23}, {-13, -24}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2,
                 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 4, 4, 1, 2, 4, 2, 3, 1, 4, 1, 3, 3, 
                1, 3, 1, 1, 4, 3, 4, 1, 4, 1, 4, 3, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.1576913134904645, 
               0.6080448352122723, 0.6080460260242377, 
               0.6080466702977949, -1.9734780304226387`, -0.7989367816947954, 
               0.6080460024487371, 0.44245190951705426`, 
               0.637891812639392, -0.5082531619013988, 0.6080458238343542, 
               1.0366556464359213`, 
               0.6378916590721087, -0.25815825571775886`, \
-0.30067940763183376`, 0.6378910850717876, -0.2211965482323548, 
               0.26795586850189235`, 
               0.6080457721012476, -0.25815792154940764`, 
               0.13012912808165034`, -1.0379498385664352`, 
               0.8613544702247529, -1.7150852682154945`, 
               0.8613541121903152, -0.2581579326762742, \
-0.25815789600013206`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -16}, {-3, 
                7}, {-4, 23}, {8, -17}, {9, 10}, {11, 12}, {-5, -18}, {
                13, -19}, {-6, -20}, {14, -21}, {15, 16}, {-7, 17}, {
                19, -22}, {-8, 18}, {-9, -23}, {20, -24}, {-10, 21}, {-11, 
                22}, {-12, -25}, {24, -26}, {-13, 25}, {26, -27}, {-14, 
                27}, {-15, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2,
                 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 6, 1, 1, 1, 4, 2, 1, 3, 2, 1, 1, 2, 2, 
                1, 1, 1, 1, 3, 1, 4, 3, 2, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240472912956721, \
-0.15769176869385015`, -1.7554597120288093`, -0.1899108961514735, \
-0.18613523842961888`, 0.6080457747084456, 0.4424520372022305, 
               0.8194181103580656, 
               0.45881447237041906`, -0.09770608289267158, \
-0.5386661346549122, -0.33596644838827094`, 0.4424514915773803, 
               0.44245087490050405`, -0.6083045988674627, \
-1.1948399665587495`, -0.2947211406576833, -0.2599499314627134, 
               0.6378919938600998, 0.09886552112148372, -0.3477875378274784, 
               0.6378910965700735, -0.09770662888624693, -0.09770684039496802,
                0.6378924342469663}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {-2, 5}, {-3, 
                6}, {-4, -16}, {-5, -17}, {9, 10}, {11, 12}, {23, -18}, {13, 
                14}, {-6, 19}, {15, 16}, {-7, 17}, {-8, -19}, {-9, -20}, {-10,
                 18}, {-11, -21}, {20, -22}, {-12, 21}, {-13, 
                22}, {-14, -23}, {24, -24}, {25, -25}, {-15, -26}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2,
                 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 2, 5, 1, 4, 2, 3, 1, 1, 1, 4, 1, 2, 
                1, 1, 1, 3, 1, 3, 1, 1, 4, 2, 2, 2, 1, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.6080447189113638, 0.44245174312607505`, -0.8340138190179358, 
               0.8528119772850271, 0.6080465313660444, -0.17824276233384273`, 
               0.4588137435997304, -0.2570774608452946, -0.15386280181808565`,
                0.1394273117048801, -0.3477872587077786, 0.5311807029053277, 
               0.4424516180650535, -0.2260847809423301, 0.9606705165788272, 
               1.3893407770812871`, -0.2581589207690076, \
-1.7539712562504661`, -0.2581586701151952, 0.5331604761369206, 
               3.1738018562930197`, -0.3477865516645289, -0.798936828121442, 
               0.4424505232290774, -0.7989363548152202, 0.7444866652268578, 
               0.8892604061445342, -0.3477861640833959}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, -18}, {-1, -19}, {6, 
                7}, {-2, 8}, {-3, -20}, {9, -21}, {-4, 10}, {-5, 
                11}, {-6, -22}, {13, 14}, {15, 16}, {18, -23}, {-7, -24}, {-8,
                 17}, {-9, -25}, {-10, 19}, {-11, 20}, {21, 22}, {-12, -26}, {
                23, -27}, {-13, 24}, {-14, 25}, {26, 27}, {28, 
                29}, {-15, -28}, {-16, -29}, {-17, -30}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2,
                 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 2, 2, 1, 1, 1, 2, 5, 4, 1, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.1576913134904645, 
               0.6080466702977949, -0.7989367816947954, 0.4424504819403494, 
               0.6015657514837844, 0.70566749570352, 
               0.7389241671768687, -0.7989354095769698, -0.002239349774174934,
                0.861355782705366, -1.1495755307749853`, \
-1.3316773491028613`, -0.34778694350828676`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 8}, {-2, 6}, {-3, 
                7}, {-4, -9}, {-5, -10}, {9, 10}, {11, 12}, {
                13, -11}, {-6, -12}, {-7, -13}, {-8, -14}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1,
                 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 1, 1, 4, 1, 2, 3, 1, 2, 4, 3, 2, 4, 2, 
                4, 2, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.23175765466549292`, -1.3291048915077504`, \
-1.9319826379540377`, 0.6080458432293918, -1.9770245261702204`, 
               0.442450964194407, 0.1003280177327327, 
               3.1342331614387575`, -0.7989363707157029, 
               0.6080458113639695, -0.25815889428170546`, 
               0.4424523282820232, -0.3477870983898481, 0.44245190951705426`, 
               0.6080457515923934, 0.44245165484963955`, 
               0.4424508757320824, -0.19249291114027178`}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {8, 9}, {-2, 
                7}, {-3, -11}, {-4, -12}, {10, -13}, {-5, 17}, {11, -14}, {-6,
                 12}, {13, -15}, {-7, 14}, {15, -16}, {
                16, -17}, {-8, -18}, {-9, 18}, {-10, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2,
                 2, 2, 2, 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 2, 6, 6, 5, 2, 3, 2, 1, 3, 3, 3, 1, 2, 
                6, 2, 1, 4, 4, 2, 2, 1, 4, 1, 3, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.11727077684440801`, 
               0.4424506659617835, 
               0.23175763934407234`, -0.1576913134904645, \
-0.0022400501699120293`, 0.4424505249171675, 
               0.4588143372256863, -0.7989355444792237, -1.4063263842486915`, 
               0.4588142109150115, 
               0.4588134526967904, -0.258157392156142, -1.6828611053158706`, \
-0.09770716179270511, -0.15769278971960765`, 0.17237241778976564`, 
               3.3311251993249282`, -0.3477861956735855, 0.6080456443175786, 
               0.442450946530319, -0.7989363707157029, 0.42745169032438124`, 
               0.1301293729610309, 
               0.24698430525061021`, -0.25815860274473756`, 
               0.6080457120758691, 0.24189765358695858`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, 7}, {
                15, -14}, {-1, -15}, {8, 9}, {-2, 10}, {-3, 14}, {11, -16}, {
                12, -17}, {
                13, -18}, {-4, -19}, {-5, -20}, {-6, -21}, {-7, -22}, {
                18, -23}, {-8, 19}, {20, 21}, {22, -24}, {-9, 24}, {-10, 
                23}, {-11, -25}, {25, 26}, {
                27, -26}, {-12, -27}, {-13, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2,
                 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 4, 1, 1, 2, 3, 4, 2, 4, 4, 1, 1, 
                1, 1, 1, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.41812708529283915`, 
               0.4588137651290829, -0.3477861956735855, 
               0.8613550909820056, -0.04531569963294241, 0.1640519672063645, 
               0.4424513022918486, 0.10032787876447324`, 0.8613541900116104, 
               0.4424523715959636, 0.8613541420551387, 
               0.7347002756770324, -0.11538263384498149`, \
-0.24889890429704464`, 
               0.13562879682321394`, -1.3351373137935063`, \
-0.21861943453739197`, 0.4424508383263115, 0.23594763225239768`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -10}, {-1, 9}, {5, -11}, {-2, 
                6}, {-3, 7}, {8, -12}, {-4, -13}, {10, -14}, {11, -15}, {
                12, -16}, {13, -17}, {14, 15}, {16, 17}, {-5, 
                18}, {-6, -18}, {-7, -19}, {-8, 19}, {-9, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2,
                 1, 1, 2, 2, 1, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 6, 1, 3, 1, 1, 4, 1, 6, 4, 3, 3, 6, 
                3, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.2581575163425822, \
-0.15769141465594472`, -0.15769131405578007`, -0.041442270249034796`, 
               0.4588137435997304, -1.3981060099677123`, 
               3.1738018562930197`, -0.3477865516645289, -0.7905038931537769, 
               0.6212081440556156, 0.861355248535653, -0.25815745384733857`, 
               0.4588144183712233, 0.6212079153153249, 
               0.4588146524128116, -0.09770676068836415}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -10}, {5, 
                6}, {-1, -11}, {-2, -12}, {-3, 7}, {8, -13}, {-4, 9}, {-5, 
                10}, {11, -14}, {12, -15}, {-6, 13}, {14, 15}, {-7, -16}, {-8,
                 16}, {-9, -17}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2,
                 2, 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 5, 4, 1, 2, 4, 1, 6, 2, 1, 3, 4, 1, 
                3, 1, 2, 6, 5, 5, 6, 2, 1, 3, 3, 1, 2, 1, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770606843475005, \
-0.1576913134904645, -0.834013947525861, 
               0.8613541482634055, -1.3677011603435805`, -0.0977072252849771, 
               0.8613552358244476, 0.5335579214145696, 
               0.6212078455103525, -0.7989364006359949, 0.6054985194418601, 
               0.6378917581762966, 
               0.608046527267148, -0.11538263384498149`, \
-0.25815728488346634`, -0.04441712833430039, 0.44245199223963194`, 
               0.6212072828926907, -0.0022388056650016197`, \
-0.002239559581272716, 0.6212069351459641, 
               0.4424509219682595, -0.18244302546143643`, \
-0.2581583533016967, -0.25815820314947757`, 
               0.8520303242804372, -0.09770591344460566, 0.1419810201825713, 
               0.44245108556208557`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, 14}, {-1, -16}, {-2, 
                6}, {7, 8}, {9, -17}, {-3, -18}, {-4, 10}, {-5, 11}, {
                12, -19}, {-6, -20}, {15, -21}, {17, 18}, {
                16, -22}, {-7, -23}, {19, -24}, {-8, 24}, {20, -25}, {
                21, -26}, {22, 23}, {-9, -27}, {-10, -28}, {-11, 25}, {-12, 
                26}, {27, -29}, {-13, 28}, {-14, 29}, {-15, -30}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
                 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 3, 2, 2, 1, 1, 1, 1, 1, 2, 2, 3, 2, 
                2, 4, 1, 1, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765466549292`, 
               0.10032780624206661`, 
               0.6378910850717876, -0.0977060315094751, -0.7989356106093481, 
               2.1357552054331475`, 
               0.5922530421672416, -0.2243385276613794, \
-0.15491647132378716`, -0.009158582499189744, -0.7989368159834465, 
               0.44245099339677774`, -0.2581583230592752, 
               0.44245061356354887`, 0.4424505652196924, 
               0.8613555765062442, -0.5386661346549122, 3.1738018562930197`, 
               0.20774958169107705`, -0.7989362364985624}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {11, -10}, {5, 6}, {
                7, -11}, {-2, -12}, {8, -13}, {-3, 9}, {-4, 
                10}, {-5, -14}, {-6, 12}, {13, -15}, {-7, 14}, {15, -16}, {
                16, -17}, {17, -18}, {-8, 18}, {19, -19}, {
                20, -20}, {-9, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1,
                 2, 2, 1, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{2, 6, 5, 2, 4, 3, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.17237239177844366`, 
               0.2317576399093879, -0.4181271087738061, -0.798936828121442, 
               0.861354478813321, 0.4588132961111526, -1.4372744964597626`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, -6}, {-3, 5}, {6, 
                7}, {-4, -7}, {-5, -8}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 1, 2, 6, 1, 1, 6, 6, 3, 3, 1, 4, 1, 1, 
                1, 3, 4, 1, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.3477864037110434, 
               2.2812055660834147`, -0.798936357204842, 0.6212075422857772, 
               0.5690807036667813, 0.7139563301089238, 0.6212068657991958, 
               0.2317576560883441, -0.2581572503191376, -0.2581578023140323, 
               0.6015657514837844, 
               0.8613546046898701, -1.327141320425719, -1.4372744964597626`, 
               1.0670906207449473`, 0.6378921557068518, 0.6080456198225574, 
               0.532520820828779, -0.2581574468580108, -0.4375026525531589}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -12}, {-1, 8}, {5, -13}, {-2, 
                6}, {-3, 7}, {-4, -14}, {9, 10}, {-5, 11}, {13, 14}, {
                12, -15}, {-6, -16}, {-7, 15}, {-8, 16}, {-9, -17}, {17, 
                18}, {19, -18}, {-10, -19}, {20, -20}, {-11, -21}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
                 1, 2, 2, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 6, 4, 4, 4, 1, 2, 3, 1, 6, 5, 1, 2, 
                1, 3, 2, 4, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770563568689261, 
               0.23175766192495706`, -0.15769141465594472`, \
-0.34778784382514605`, -0.3477861956735855, 
               0.8613546085836319, -0.3667165463797448, -0.798936828121442, 
               0.45881316017412876`, -1.3981060099677123`, 
               0.6212080176670165, -0.0022385706334213905`, \
-1.334209397757446, 
               0.4424523715959636, -1.2008723888445054`, -0.2581584209297092, 
               0.4424511046774873, 0.6080463279926889, 0.2047519750261131, 
               0.44245076379825354`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 11}, {-2, 6}, {7, 
                8}, {-3, -13}, {-4, -14}, {-5, 9}, {-6, 10}, {-7, -15}, {12, 
                13}, {14, -16}, {-8, -17}, {15, -18}, {-9, 16}, {-10, 17}, {
                18, 19}, {20, -19}, {-11, -20}, {-12, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1,
                 2, 2, 1, 2, 1, 2, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 6, 5, 1, 2, 1, 1, 3, 1, 3, 2, 1, 3, 
                3, 4, 1, 3, 1, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.2581572573436235, \
-0.0022395643439514813`, 
               0.23175765466549292`, -0.002239573346144993, \
-0.07599387083109488, -0.7989356972344961, -1.3677011603435805`, 
               2.2812055660834147`, 0.10032789234705697`, 3.1738018562930197`,
                0.6378911074463138, -0.798936828121442, 0.6105353082955833, 
               0.45881406707890404`, 0.4588141215938486, 
               0.8613541900116104, -0.0756431980011929, 0.6378909445969692, 
               0.36963054547571783`, 0.16951636029164252`, 
               0.13788933939399306`, 0.03920616403567789}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -12}, {6, 7}, {
                5, -13}, {-1, -14}, {-2, 8}, {-3, 9}, {-4, -15}, {-5, 10}, {
                11, -16}, {12, 13}, {-6, 14}, {19, -17}, {-7, 15}, {-8, 16}, {
                17, -18}, {-9, 18}, {-10, -19}, {20, -20}, {21, -21}, {
                22, -22}, {-11, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1,
                 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{2, 5, 1, 4, 2, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4424504670953544, -0.0022404259568728248`, 
               2.1361311581883395`, -0.3477866516655368, -0.7989356972344961, \
-0.7989359804388592, 3.1738018562930197`}, "Children" -> 
              RawArray["Integer16",{{2, -5}, {3, 4}, {5, -6}, {-1, 
                6}, {-2, -7}, {-3, 7}, {-4, -8}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 1, 3, 2, 5, 1, 2, 1, 5, 1, 1, 5, 1, 
                2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770565502240813, \
-0.0022404293352802224`, -0.11538263384498149`, 
               0.4588137435997304, -0.09770747115652667, -0.4181271095183172, \
-0.04853476268133994, -0.7989367816947954, -1.3316773491028613`, \
-0.0022398213561423304`, 
               0.17946239593222568`, -0.33098647401998393`, \
-0.8340142206044945, 0.24679099864237575`, 0.4424509478587777, 
               0.7816535384990804}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {6, -10}, {
                8, -11}, {7, -12}, {-1, -13}, {-2, 9}, {-3, -14}, {-4, 
                12}, {-5, 13}, {-6, -15}, {-7, 14}, {-8, 15}, {
                16, -16}, {-9, -17}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1,
                 2, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 2, 1, 5, 6, 6, 2, 5, 6, 6, 5, 1, 6, 
                1, 5, 3, 5, 1, 5, 4, 5, 1, 5, 4, 3, 2, 5}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588128797504041, -1.357948238101443, -0.7989363548152202, \
-1.7175810170047718`, -0.834013947525861, 0.6212081652582073, 
               0.6212069250471135, 0.44245077613608785`, -0.8340137260830325, 
               0.6212079703258446, 
               0.6212068611958115, -0.0022389449728111334`, \
-0.21572241877204656`, 
               0.6212066871406012, -0.1819109215905561, -0.002239041394320806,
                0.4588133027496806, -0.4181269226987836, -0.6926230425061526, \
-0.0022401106325068733`, -0.34778635130885327`, -0.002240319109885199, 
               0.5712708233645856, -0.4181271874167316, -0.3477862613637437, 
               0.45881373304286077`, -0.09770676068836415, \
-0.8340146345957766}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {6, 7}, {-1, 
                8}, {-2, -17}, {-3, -18}, {-4, 9}, {-5, 10}, {11, -19}, {12, 
                13}, {14, -20}, {-6, 15}, {-7, -21}, {-8, -22}, {-9, -23}, {
                18, 19}, {-10, -24}, {20, 21}, {-11, -25}, {22, 
                23}, {-12, -26}, {24, 25}, {26, 27}, {-13, 
                28}, {-14, -27}, {-15, -28}, {-16, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
                 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 5, 2, 1, 4, 4, 6, 4, 3, 1, 2, 1, 4, 
                1, 4, 4, 4, 4, 2, 2, 3, 4, 3, 1, 3, 3, 1, 2, 4, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4424521620430433, -0.8340137221911244, \
-0.0022399706054378465`, 0.17237242069577885`, -1.3318464347934302`, 
               0.8613540952344856, 0.608046143372853, 0.6212071385617186, 
               0.6080455483664373, -0.25815777268625206`, 
               0.5712708233645856, -0.7989367501801485, 3.1738018562930197`, 
               0.6080460325257873, -0.605973957753239, 
               0.861354843205846, -0.34778728006453985`, \
-0.34778679538802004`, 0.608045940956706, 0.442451694538911, 
               0.4424514047608832, 0.6378913992301918, 
               0.6080451685563952, -0.25815792328194354`, \
-0.7836686260928172, -0.25815787162548, 0.4588140532569529, 
               0.24528453978367337`, -0.09770704261668206, \
-0.3477865698230449, 0.44245077613608785`, 1.0670906207449473`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -19}, {6, -20}, {7, 
                8}, {-2, -21}, {9, -22}, {10, 11}, {-3, -23}, {-4, -24}, {12, 
                13}, {-5, 14}, {29, -25}, {15, 16}, {-6, 17}, {24, -26}, {-7, 
                18}, {-8, 19}, {20, -27}, {21, -28}, {22, -29}, {
                23, -30}, {-9, -31}, {-10, 25}, {-11, 26}, {-12, 27}, {-13, 
                28}, {-14, -32}, {-15, 30}, {-16, 31}, {-17, 
                32}, {-18, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2,
                 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
                2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 1, 3, 2, 1, 4, 4, 1, 6, 4, 3, 2, 1, 
                1, 2, 6, 2, 6, 2, 2, 2, 4, 1, 3, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340137221911244, \
-0.2581572503191376, -1.3291048915077504`, 
               0.45881372140387144`, -0.7989359560145255, 2.2812055660834147`,
                0.6080461885717474, -0.3477861956735855, -1.466266488773515, 
               0.6212079040977398, 0.6080447932559103, -0.258159146966249, 
               0.4424508170656005, -0.18742933193449907`, 0.6039785033407323, 
               0.4424523715959636, 0.6212071129604659, 0.4424510702155149, 
               0.621207095262406, 0.4424509298545849, -0.7989367651017671, 
               0.44245106933265665`, 
               0.861354324868512, -0.8571850394338254, -0.2581573964193504, \
-0.03981630123638258, -0.29928261809602263`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {5, 
                6}, {-2, -15}, {-3, -16}, {9, -17}, {-4, 10}, {-5, -18}, {11, 
                12}, {13, 14}, {-6, 21}, {-7, 15}, {16, -19}, {-8, -20}, {
                17, -21}, {18, -22}, {19, -23}, {20, -24}, {-9, -25}, {-10, 
                22}, {23, 24}, {25, -26}, {-11, 27}, {-12, 
                26}, {-13, -27}, {-14, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1,
                 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 1, 2, 4, 3, 4, 1, 3, 1, 3, 1, 1, 6, 
                1, 1, 1, 2, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.45881406524917256`, 
               0.2317576560883441, -0.8619339004603663, 0.4424517319643515, 
               0.6080463724570846, -0.2581588594341566, 
               0.8613546161864409, -0.04531569963294241, \
-0.25815861498283743`, 0.15752646397037062`, -0.2581584850459415, 
               1.24153966661326, -1.6237797814615647`, 0.23175764111074204`, 
               3.1342331614387575`, -0.2634265668989193, 
               0.10999694570037566`, -0.7989366467869123, \
-0.3477870558586371}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 14}, {6, -13}, {-2, 
                13}, {-3, 7}, {8, -14}, {9, 10}, {-4, 11}, {-5, 
                12}, {-6, -15}, {-7, -16}, {-8, -17}, {-9, 15}, {
                16, -18}, {-10, 17}, {18, -19}, {-11, 19}, {-12, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1,
                 1, 2, 2, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 2, 1, 6, 1, 2, 4, 5, 5, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404422053921673`, \
-0.2581572503191376, 0.44245199223963194`, 
               2.2812055660834147`, -0.15769310426961036`, 
               0.10446802931533494`, -0.798936788196225, 
               0.8613540453220727, -0.41812708529283915`, \
-0.8340152429477135, -0.7989357022429164, -0.11568635011852557`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, -7}, {5, -8}, {6, 
                7}, {-3, 8}, {9, 10}, {-4, -9}, {-5, -10}, {11, -11}, {
                12, -12}, {-6, -13}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
                 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 4, 1, 2, 4, 1, 1, 4, 1, 2, 3, 1, 2, 
                1, 3, 4, 2, 1, 1, 1, 3, 3, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.23175765466549292`, -0.2581575163425822, 0.6080460267149057, 
               2.1717606015016777`, 0.1723726800989851, 
               0.8613546085836319, -1.7539712562504661`, -1.3351373137935063`,
                0.608045492723158, 3.137584865652297, 
               0.44245191337673795`, -0.2581586701151952, 
               0.26795586850189235`, 0.4424516054489085, 
               0.24189765358695858`, -0.25815728381351155`, 
               0.13012993500273762`, -0.17824225457575782`, 
               0.03587096827182129, 0.03390712639562998, 
               0.0067449864510881405`, 0.45881447237041906`, 
               0.10032822758719306`, 0.6080461993024455}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {5, -10}, {
                6, -11}, {-2, -12}, {9, 10}, {18, 19}, {-3, -13}, {11, -14}, {
                12, -15}, {13, 14}, {15, -16}, {16, -17}, {-4, -18}, {-5, 
                17}, {-6, -19}, {-7, -20}, {20, -21}, {21, -22}, {22, 23}, {
                24, -23}, {-8, -24}, {-9, -25}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2,
                 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 1, 1, 1, 5, 4, 5, 1, 1, 1, 3, 3, 1, 
                1, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, 
               0.4424504819403494, -1.971151124446088, 
               2.2812055660834147`, -0.04438755610469958, -0.8340142571663769,
                0.8613549363941768, -0.8340141944629051, -0.2629572487096614, \
-0.7958400764077869, 0.17828349759657725`, 0.6378908910425656, 
               0.10032791513171657`, 0.5335579214145696, 0.24777020777050174`,
                0.861354843205846, 1.1792513085582002`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 12}, {6, -11}, {10, 
                11}, {7, 8}, {-2, 
                9}, {-3, -12}, {-4, -13}, {-5, -14}, {-6, -15}, {13, 14}, {15,
                 16}, {-7, 17}, {-8, -16}, {-9, -17}, {-10, -18}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
                 2, 2, 1, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 6, 3, 1, 1, 2, 3, 4, 1, 2, 4, 1, 1, 
                4, 2, 1, 4, 1, 2, 1, 3, 2, 4, 4, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8340137260830325, 
               0.608046585789932, 0.6212072916156473, 0.18986678944033208`, 
               0.6015657514837844, -0.04441712833430039, 
               0.4424523622004264, -0.25815892782960503`, 0.6080448396598834, 
               3.1342331614387575`, 0.44245100462677955`, 
               0.6080447725994222, -0.1880195824407549, -0.47138346602972003`,
                0.8613552358244476, -0.7989362589779905, 
               0.033125893489121816`, -0.34778665645132634`, \
-0.8645222189087294, 
               0.442451448581183, -0.2632996658370037, -0.2581587107515855, 
               0.44245103633512484`, -0.34778616789772654`, 0.60804562752433, 
               0.9976466388421548, 0.13400537110916133`, 
               0.21116888356043972`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {7, 8}, {
                6, -15}, {-1, -16}, {-2, -17}, {9, -18}, {14, 15}, {10, 11}, {
                12, -19}, {-3, -20}, {13, -21}, {-4, -22}, {-5, -23}, {
                16, -24}, {17, 18}, {-6, -25}, {-7, 19}, {-8, 20}, {
                21, -26}, {-9, 22}, {-10, 23}, {24, -27}, {-11, 25}, {-12, 
                26}, {27, -28}, {-13, 28}, {-14, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
                 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 1, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 
                1, 4, 1, 2, 3, 2, 1, 4, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240491906296181, \
-0.2581572503191376, 0.8613551316945856, -0.15109533767358996`, 
               2.2812055660834147`, -0.6766348936161242, \
-0.47111755765695973`, 0.45881366918426814`, -0.7989359560145255, 
               0.4588132658060231, -0.47653277710040776`, \
-0.2581589207690076, -0.798936828121442, -1.3291048915077504`, \
-1.7539712562504661`, 0.6080453405619464, 0.8514530424728566, 
               0.4424505025904124, -0.25815762561940314`, \
-0.09770668855148068, 0.36963054547571783`, -0.34778634590773905`, 
               0.637892127430181}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, -14}, {6, -15}, {
                8, -16}, {-1, 7}, {-2, -17}, {9, -18}, {-3, 10}, {-4, 
                11}, {-5, -19}, {-6, 13}, {-7, 14}, {15, 16}, {-8, -20}, {17, 
                18}, {19, 20}, {-9, -21}, {-10, 21}, {-11, 23}, {
                22, -22}, {-12, -23}, {-13, -24}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1,
                 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 3, 4, 4, 3, 1, 2, 5, 4, 4, 2, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.2581572573436235, \
-0.15769134000713358`, 0.4588136543120678, -0.3477862613637437, 
               0.8613558158311418, 
               0.10032781133717461`, -1.3677011603435805`, \
-0.798936828121442, -0.002239573874518199, 0.8613548657194672, 
               0.8613547923906184, -0.7989364814472077, -0.09770670820881588},
               "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -10}, {-3, 5}, {
                6, -11}, {-4, 7}, {-5, 8}, {-6, 9}, {-7, 10}, {11, -12}, {
                12, -13}, {-8, 13}, {-9, -14}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1,
                 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 3, 4, 1, 6, 1, 2, 4, 1, 2, 1, 3, 1, 4, 
                3, 4, 6, 1, 5, 5, 5, 1, 6, 5, 1, 5, 1, 6, 6, 1, 1, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770563568689261, 
               0.45881406707890404`, 0.6080460234017417, -0.9764283669765579, 
               0.23175764571600554`, 
               3.10577891290626, -0.7989363529035369, -0.3477875494269651, \
-1.3302708275002697`, -0.09770577452331886, 1.1792513085582002`, 
               0.6378922049594431, 
               0.42952532851226044`, -0.34778710798252765`, 
               0.6378913084888573, 
               0.6080459993483611, -0.15769245759125594`, \
-1.7175810170047718`, -0.0022393719130085477`, -0.002239548336668701, \
-0.8340149134265769, -0.9599796964071743, 
               0.6212074629758861, -0.002239584261836576, \
-0.5447815473219126, -0.8340145882043029, 
               0.70566749570352, -0.15769293455527866`, 
               0.23175765868836073`, -0.15201538333419817`, \
-0.4369392434216688, 
               0.1640519672063645, -0.041412698019433924`, \
-0.11605832750950495`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {-1, -16}, {-2, 
                6}, {7, -17}, {-3, 8}, {-4, 9}, {-5, 10}, {11, -18}, {
                12, -19}, {13, -20}, {-6, 14}, {-7, 15}, {-8, -21}, {
                18, -22}, {-9, -23}, {19, 20}, {21, -24}, {
                22, -25}, {-10, -26}, {23, 24}, {-11, -27}, {25, -28}, {26, 
                27}, {-12, 28}, {29, -29}, {-13, -30}, {30, -31}, {31, 
                32}, {-14, -32}, {33, -33}, {34, -34}, {-15, -35}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1,
                 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 
                2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 1, 5, 2, 1, 3, 1, 3, 5, 1, 1, 5}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770563568689261, \
-0.0022404293352802224`, -0.07843791846259018, -0.8340140277934323, \
-0.7989368159834465, 1.8185505322605646`, 
               0.45881335412871493`, -1.3981060099677123`, 
               0.6378909015615122, -0.002239553397422059, 
               0.23592551899621372`, 
               0.15452009306483294`, -0.0022396724325474335`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 10}, {-2, 6}, {-3, 
                8}, {7, -9}, {-4, -10}, {-5, 9}, {-6, -11}, {11, -12}, {12, 
                13}, {-7, -13}, {-8, -14}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1,
                 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 5, 2, 2, 4, 5, 6, 1, 1, 1, 1, 1, 1, 
                2, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.2581572620556458, 
               0.2317576407669235, -0.8340137986292993, -0.7989358444053645, \
-0.09770575144501115, -0.3477861956735855, -0.0022388210498908503`, 
               0.6212085436824184, 0.6105353082955833, 0.31870656000062514`, 
               1.5324916092261542`, -1.4063263842486915`, 
               0.496298534329223, -1.184512271969318, -0.7989368159834465, 
               0.4588141215938486, 0.1780226229887647}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -9}, {4, 5}, {-2, -10}, {
                6, -11}, {7, 8}, {9, -12}, {14, -13}, {10, 11}, {12, 
                13}, {-3, -14}, {-4, -15}, {-5, -16}, {-6, 15}, {-7, 16}, {
                17, -17}, {-8, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2,
                 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 1, 5, 4, 6, 1, 3, 6, 2, 1, 4, 1, 1, 2, 
                3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 4, 1, 1, 1, 2, 3, 1, 4, 1, 2, 4,
                 2, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBPQHC/iFib1JlAQAAACYAAABgcqnUZM/5v/h2ONEATf2/SDyniz2w6r8Y
oDf+qILnP6CT6sg+qs0/AA8jOIr+/r/oaLBGFa+5PygvNJLt4OM/8FRnmOGQ
6b/wEuKmvPPiP0A8R8EnQta/yCsGeJZL7T+o1YNDLqrrv5AUs83jkOm/qBBi
9quF0L/4rHnEMlPHv6BWGtK9MPW/4ETCPk8j+L/ou2fTQofVvzzb7/ckpgpA
4DgXLCBR3D/Q1Xm+xbbQv/DWVM6Y8NC/CHL2f9eY8T/gB6WqIULWv4ADCWW9
OvY/QBeg+eYTs79w8TrZAIvwP5CabXMfUdw/GMBsz6iF0L8YtUmt2KrFPwC6
yyc4kOs/eGiLf9fs0T/QiXD54pDpv7gAIKwcdeM/AD60wUwDub8IpluKpNDG
v/A2IWWcaeQ/gUypXQ==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {7, 8}, {
                6, -21}, {-1, -22}, {-2, -23}, {-3, 9}, {13, 14}, {10, 
                11}, {-4, 12}, {-5, -24}, {-6, -25}, {-7, 15}, {-8, 17}, {
                16, -26}, {-9, -27}, {18, 19}, {-10, -28}, {-11, 20}, {
                21, -29}, {22, -30}, {23, 24}, {-12, -31}, {25, 26}, {27, 
                28}, {-13, 38}, {-14, -32}, {29, -33}, {30, -34}, {31, 
                32}, {-15, 33}, {34, -35}, {-16, -36}, {-17, 35}, {36, 
                37}, {-18, -37}, {-19, -38}, {-20, -39}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2,
                 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 
                2, 2, 1, 1, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>]}, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], 
          "OOBConfusionMatrix" -> {{0.7288383548452807, 0.2803537054430782}, {
           0.2711616451547194, 0.7196462945569218}}, "Calibrator" -> 
          MachineLearning`CalibratorFunction[
           "TemperatureScaling", <|"Theta" -> 2.0738268814131184`|>], 
          "Method" -> "RandomForest", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "FeatureFraction" -> <|
             "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
            "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "Implementation" -> <|
             "Value" -> "Default", "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "RandomForest", 
               "Options" -> <|
                "FeatureFraction" -> <|"Value" -> Automatic|>, 
                 "LeafSize" -> <|"Value" -> Automatic|>, 
                 "TreeNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "Implementation" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
               Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
               0.5, "Implementation" -> Automatic}, "ModelUtility" -> 
             Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
          "InputDimension" -> 6, "OutputDimension" -> 1|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {47.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.103486, 
          "MaxTrainingMemory" -> 467280, "DataMemory" -> 142720, 
          "FunctionMemory" -> 255432, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 21.01188`8.07503989529067}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"6", "\<\"RandomForest[3,0.8]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["585", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 585, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 585, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.437178974358975`}, 
                    "StandardDeviation" -> {15.378992251560497`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9916166446845317, 
                    0.06535720426141783, -0.11146688223738395`}, \
{-0.12782800963154495`, 0.6222207552489156, -0.7723349867066152}, {
                    0.018879352166563324`, 0.7801088177867244, 
                    0.6253589389088239}}, 
                    "Precisions" -> {0.9846125387542681, 12.370207258750009`, 
                    15.235958524657368`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00010738554429301969`, 0.05626461965445484, 
                    0.06714652660249366}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4888356147712292618|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001073855442930009, 0.05626461965445476, 
                    0.06714652660249365}, 
                    "StandardDeviation" -> {0.9999156872406738, 
                    0.29503206691665856`, 0.27427399807609787`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001073855442930009, 0.05626461965445476, 
                    0.06714652660249365}, 
                    "StandardDeviation" -> {0.9999156872406738, 
                    0.29503206691665856`, 0.27427399807609787`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {35.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.055206, "MaxTrainingMemory" -> 275080,
                     "DataMemory" -> 67488, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 21.070883`8.076257719039873}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.072414881001436, -3.072414881001436, \
-3.062288450252478, -2.3494243685268894`, -2.2969213965002684`, \
-2.038823464302973, -2.0385812364033424`, -1.9893643904006086`, \
-1.8921393685163643`, -1.8687661771409065`, -1.822074459173996}, 
                    "LeftBoundary" -> -3.062288450252478, "LeftScale" -> 
                    0.005063215374478958, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.72923945766578, 0.44289217287761173`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.437178974358975`}, 
                 "StandardDeviation" -> {15.378992251560497`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.0977066308259964, 
                    0.6378918290138245, -0.34778690338134766`}, \
{-0.7989358901977539, 0.4588138163089752, 0.8613548278808594}, {
                    0.4424514174461365, -0.25815823674201965`, 
                    0.6080456972122192}}], 
                   RawArray["Real32",{{0., 
                    0.}, {-0.8340147137641907, -0.15769228339195251`}, \
{-0.0022395034320652485`, 0.621207594871521}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5843270868824532, "survived" -> 
            0.41567291311754684`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 3, 3, 6, 1, 5, 1, 4, 4, 5, 6, 1, 1, 5, 
                5, 4, 1, 2, 3, 4, 1, 1, 1, 5, 2, 3, 6, 1, 4, 2, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.841729535925615, 
               0.1003278869514228, 
               0.45881442084038504`, -0.15769150538175136`, \
-1.4864682331591936`, -0.0022399382991444665`, -1.1029209040314658`, 
               0.6080457994337394, 
               0.8613547020387635, -0.002239588548938236, \
-0.1576914127088196, -0.3580767288493134, -0.7832002172715615, \
-0.0022402586590540736`, -0.002240437227794014, 
               0.86135514427788, -0.16314482759558824`, -0.7989356321685044, \
-0.25815860221758413`, 0.7347006711357951, 
               0.39239686850017064`, -0.12308969292361638`, 
               0.7172432672120532, -0.002238726830750458, -0.7989368405485351,
                0.10032782774974203`, 0.23175768700662758`, 
               0.07397018130793587, -0.3477864087272766, -0.7989351653323133, \
-0.3477862958855509, 0.8110969179151368}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -19}, {8, 9}, {5, 6}, {-1, 
                7}, {-2, -20}, {-3, -21}, {10, 11}, {27, 28}, {12, -22}, {16, 
                17}, {13, -23}, {-4, 14}, {15, -24}, {-5, -25}, {
                18, -26}, {-6, 24}, {-7, 19}, {-8, 20}, {21, -27}, {22, 
                23}, {-9, -28}, {-10, -29}, {25, 
                26}, {-11, -30}, {-12, -31}, {-13, 29}, {-14, -32}, {-15, 
                30}, {-16, 31}, {-17, 32}, {-18, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2,
                 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 6, 3, 2, 1, 1, 2, 1, 3, 3, 1, 1, 6, 
                4, 1, 6, 5, 1, 5, 3, 3, 4, 1, 3, 4, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.09770590858973771, \
-0.4181271057868865, -0.15769141399108677`, 
               0.4588143615956026, -0.09770600127952389, -0.712385216818264, \
-0.909669224677339, -0.7989351876446049, -0.4569528350873173, 
               0.6378908993509382, 0.45881382023775474`, 
               2.9965560191123295`, -1.8505103194669204`, 0.6212085698815404, 
               0.13012858761789636`, -1.8623888221329832`, 
               0.6212082379001194, -0.002239596025450253, \
-0.6120977718710545, -0.0022403804513030645`, -0.2581592305598619, \
-0.25815770810518535`, 
               0.6080455420612072, -1.6236757032467732`, \
-0.25815827941329106`, 
               0.6080448494107458, -1.4575319129687525`, -0.7728354761442295},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, 14}, {6, -16}, {
                7, -17}, {-1, -18}, {-2, 8}, {9, 10}, {-3, -19}, {11, 
                12}, {-4, -20}, {-5, -21}, {-6, 15}, {
                16, -22}, {-7, -23}, {-8, 17}, {18, 19}, {20, 21}, {
                27, -24}, {22, 23}, {-9, 26}, {-10, -25}, {24, -26}, {-11, 
                25}, {-12, -27}, {-13, -28}, {-14, 28}, {-15, -29}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2,
                 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 5, 1, 4, 6, 1, 6, 1, 6, 1, 6, 6, 3, 
                4, 5, 5, 1, 1, 6, 1, 1, 4, 2, 1, 3, 3, 3, 3, 2, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588137477805798, -0.15769187266155082`, \
-0.41812709586907193`, -0.9925113464031474, 0.7347001831974662, 
               0.6212083210022392, -1.3303546997425162`, 
               0.621208529991689, -1.852433550137027, 
               0.621208227089233, -1.8159001126672294`, 0.6212076280046359, 
               0.6212068859348783, -0.2581592305598619, 
               0.6080448920717068, -0.8340155579470174, -0.00224042142091559, \
-0.05369979510994094, -0.5825552882737695, 
               0.6212074750666678, -0.2884964231032101, -0.7401440101242258, 
               0.6080452516222152, 
               0.44245145078229076`, -0.052908143205415814`, \
-0.2581586947523924, -0.25815797027292886`, 0.458814562454382, 
               0.6378909257394483, -0.7989350484978752, -0.9731844076467056, 
               1.1363997344958818`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {28, 29}, {5, 6}, {
                7, -18}, {14, 15}, {8, -19}, {9, -20}, {-2, 10}, {
                11, -21}, {-3, 12}, {13, -22}, {-4, -23}, {-5, 16}, {-6, 
                26}, {-7, 17}, {18, 19}, {20, -24}, {22, 23}, {
                21, -25}, {-8, -26}, {-9, -27}, {-10, 24}, {-11, 
                25}, {-12, -28}, {-13, 27}, {-14, -29}, {-15, -30}, {
                30, -31}, {31, 32}, {-16, -32}, {-17, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
                 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 1, 4, 3, 2, 3, 4, 1, 4, 3, 1, 3, 1, 
                1, 1, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.23175765342661303`, -0.798935968440146, -1.1681488689063801`,
                0.6080463079284355, 0.6378927661459182, -0.7989358240728714, 
               0.6378919265785719, 0.6080461219905651, -1.8455031744654207`, 
               0.6080450071441632, -0.2581573074163752, 0.8153524913637167, 
               0.6378916463366551, 
               0.3337136071666835, -1.8180137421673805`, -0.4436884112798354, \
-0.4752987241904054, -0.7989356811017183}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -9}, {5, 6}, {
                7, -10}, {-3, 15}, {8, -11}, {9, -12}, {10, 
                11}, {-4, -13}, {-5, 12}, {13, -14}, {
                14, -15}, {-6, -16}, {-7, 16}, {17, -17}, {
                18, -18}, {-8, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2,
                 2, 1, 1, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 6, 2, 1, 4, 2, 3, 3, 5, 6, 1, 5, 1, 
                1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.44245044768415775`, 
               0.23175757809330877`, -0.15769143575040379`, \
-0.7989366786997385, -0.978212168467194, 
               0.8613546787626678, -0.0977066959095807, 0.4588144362277755, 
               0.45881451814633945`, -0.0022385722425293728`, 
               0.6212085657112825, -0.5482631864765022, \
-0.0022400086250141497`, -0.25394930680858785`, -1.1033297763656496`, \
-0.6437036418426718}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 10}, {-2, 6}, {-3, 
                7}, {-4, -10}, {8, -11}, {-5, 9}, {-6, -12}, {11, -13}, {
                12, -14}, {13, 14}, {15, 
                16}, {-7, -15}, {-8, -16}, {-9, -17}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
                 2, 2, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 1, 2, 6, 1, 5, 1, 2, 6, 1, 2, 1, 1, 
                4, 3, 1, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404232995489083`, 
               0.130129410298933, -1.0127675206347284`, -0.798935521129688, \
-0.1576924410652707, -0.2601249276651205, -0.8340140082631864, 
               0.15619486357710644`, 0.44245132346881144`, 
               0.2317578742934816, -1.7811338368378262`, 
               0.4424512703461576, -0.5547010979562526, -1.8434495403690931`, 
               0.6080450071441632, 0.10032805923706856`, -1.8824525434124926`,
                0.6080451829583744, -1.525376364788226, -1.5233901397854392`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {14, -13}, {-2, 5}, {6, 
                7}, {-3, 8}, {9, 10}, {-4, -14}, {11, -15}, {-5, -16}, {-6, 
                12}, {13, -17}, {-7, -18}, {15, 16}, {-8, 17}, {19, -19}, {-9,
                 18}, {-10, -20}, {-11, 20}, {-12, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2,
                 1, 2, 1, 2, 2, 1, 2, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 2, 6, 2, 6, 3, 4, 1, 3, 5, 4, 4, 3, 1, 
                1, 3, 4, 3, 2, 3, 1, 2, 2, 4, 4, 4, 1, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-1.1668034347659653`, 
               0.44245054624754054`, -0.15769143446813683`, 
               0.17237251540530418`, 0.6212082379001194, 0.45881288194540915`,
                0.861354758693337, 
               2.7973695540771466`, -0.25815787462646433`, \
-0.00224042142091559, 0.6080459846099657, 0.6080455565037397, 
               0.6378915462798496, 0.32871916171359405`, 0.1857303336483307, 
               0.4588146338573904, -0.34778688071753683`, 0.6378924758559332, 
               0.4424504884542144, 0.6378927453606922, 
               1.1732813538692426`, -0.0977066959095807, -0.09770668670148319,
                0.861355589931569, 0.6080462871258074, -0.3477865253758856, 
               1.4976214223146407`, -0.2581575908258653}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -15}, {4, 5}, {6, -16}, {8, 
                9}, {-2, 7}, {-3, -17}, {10, -18}, {-4, 26}, {11, 12}, {13, 
                14}, {15, 16}, {-5, -19}, {-6, -20}, {17, 18}, {24, -21}, {-7,
                 19}, {21, -22}, {20, -23}, {-8, -24}, {-9, 22}, {-10, 
                23}, {-11, -25}, {25, -26}, {-12, -27}, {27, 
                28}, {-13, -28}, {-14, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1,
                 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 2, 4, 1, 2, 1, 4, 4, 1, 1, 1, 1, 3, 
                1, 2, 3, 1, 1, 2, 1, 3, 2, 3, 4, 1, 1, 4, 1, 2, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240445299791994, 
               0.44245046030260227`, 0.4424519459527052, 0.8613546787626678, 
               0.07397018130793587, 0.44245194205090277`, -1.860250919150026, 
               0.8613556965699365, -0.34778669172402976`, 
               2.8716294647089473`, -0.45064762892066, 
               0.9405193195883115, -0.8499953099864124, 
               0.6378923930426312, -1.8815725074855614`, -0.7989359142600945, 
               0.458813028271031, -1.6893422272032161`, -1.525376364788226, \
-0.17824275882218332`, -0.6791011137541121, -0.25815838583435013`, 
               0.4424517619492434, -0.2581576979642479, -0.3477865442938577, 
               0.9785917783687044, -0.052908143205415814`, 
               0.8613541519807848, -0.02185169615796778, 0.44245086253015264`,
                0.09584965484032393, 0.71695219855979, 0.5849394701374919}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -19}, {6, 7}, {-1, 
                5}, {-2, -20}, {8, -21}, {-3, -22}, {9, -23}, {10, 11}, {
                12, -24}, {13, 14}, {-4, -25}, {15, 16}, {25, 26}, {-5, 
                17}, {-6, 21}, {18, -26}, {-7, 19}, {-8, 20}, {-9, -27}, {-10,
                 22}, {-11, 23}, {24, -28}, {-12, -29}, {-13, 
                27}, {-14, -30}, {-15, 28}, {29, -31}, {-16, 30}, {
                31, -32}, {-17, 32}, {33, -33}, {-18, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2,
                 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 
                1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{2, 6, 2, 2, 4, 3, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.44245042898137577`, 
               0.23175765342661303`, -0.7989367794135207, -0.7989351876446049,
                0.8613546499771045, 0.6378910896527978, -0.4483209522482259}, 
              "Children" -> 
              RawArray["Integer16",{{2, -4}, {3, 4}, {-1, -5}, {-2, 5}, {
                6, -6}, {7, -7}, {-3, -8}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 1, 4, 3, 2, 3, 2, 1, 3, 2, 1, 1, 5, 1, 
                3, 1, 5, 6, 2, 5, 4, 4, 1, 4, 4, 1, 2, 3, 3, 1, 3, 2, 2, 4, 3,
                 1, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+IbbpzdVvpH9nfIpJ49d/SgfUS+baua07X9B2r2TF3W
emF/h9a2dn+BY/YOj7UOmsfetZ/BcOH54wkv91ek6BfPmTJ7f8J0cV8zoHjD
RZvJIPEZW6/P0Pf+YJ/xh+XgPf23+wNi2u6/jEzaH/F+ltM3md/2HiVy4vMy
n9hH+NmtV5v1Z7/HxfmSTVFJ+ztcxDI+PHhsz/Dla6pi4B17Bx+H2GlAcYH9
DL+VgO758WPKrpVNz+0L+CoiuZbf2T/hW4GrbOlj+4a+xH4pIH1g7ZfSJTef
7o+43jQLrN9p7wyp9TvtVzhyLF0F9MeGoJn8TV2P9xckR2xYAeR7LJO1eQB0
7wqnkFXRzDv3/0iKeakCtGeCQsBLkL8/pFxiPW+Ytb/ArCt/TsBV+wnGmmfP
7Phsf+HHjkW/53+0BwBkpKa9
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {-1, 6}, {10, 
                11}, {7, -20}, {-2, 8}, {
                9, -21}, {-3, -22}, {-4, -23}, {-5, -24}, {-6, 14}, {15, 
                16}, {-7, -25}, {17, -26}, {22, 23}, {18, 19}, {20, -27}, {
                21, -28}, {-8, -29}, {-9, -30}, {24, -31}, {26, 27}, {
                25, -32}, {-10, -33}, {28, 29}, {32, -34}, {-11, -35}, {30, 
                31}, {-12, -36}, {-13, -37}, {-14, 33}, {34, 
                35}, {-15, -38}, {-16, 36}, {-17, 37}, {-18, 38}, {
                39, -39}, {-19, -40}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2,
                 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
                2, 1, 2, 1, 2, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 4, 2, 6, 2, 1, 4, 4, 1, 1, 6, 1, 6, 
                1, 6, 3, 4, 4, 1, 3, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240421003350885, 
               0.4424504618196843, 0.6080463079284355, -0.7989367794135207, 
               0.6212074750666678, -0.7989366786997385, -0.7075412304481352, 
               0.8613547354567492, 0.8613546574650721, 
               0.07397018130793587, -0.028486941796749488`, \
-0.1576926586553744, -0.14218633693839378`, -0.1576920499718495, \
-1.1271995660197174`, -0.15769143575040379`, 0.6378924561088448, 
               0.8613546650971049, 0.6080462799287094, 1.2627911679865491`, 
               0.6378913830372808, 3.0970582380954124`, 0.13012930865116457`, 
               0.9122692954647817, -1.860250919150026, 0.04310499669868906, 
               0.5949279797765072, -0.5482631864765022, -0.5488506273540832, \
-1.2948084865224683`, -0.44496373465101335`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {-1, 6}, {
                12, -17}, {-2, 7}, {8, 9}, {-3, -18}, {-4, 10}, {
                11, -19}, {-5, -20}, {13, 14}, {15, -21}, {-6, 
                16}, {-7, -22}, {-8, -23}, {19, -24}, {-9, 30}, {20, -25}, {
                21, 22}, {23, -26}, {-10, -27}, {24, 25}, {26, -28}, {-11, 
                28}, {-12, 27}, {-13, -29}, {29, -30}, {-14, -31}, {-15, 
                31}, {-16, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2,
                 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 1, 4, 1, 5, 1, 2, 1, 2, 2, 3, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.00224042142091559, 
               0.10032779722031648`, 0.608046256398751, -0.3209416465959878, 
               0.8613556366221058, -1.8563257834288116`, -0.4181271510570297, 
               0.39239686850017064`, -0.7989367833608041, 
               0.2315771831115645, -0.7989355091490378, -0.09770757999024138, 
               0.45881380102251823`, -1.0730586099594834`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, 7}, {9, 
                10}, {-1, -9}, {8, -10}, {-2, -11}, {-3, 
                11}, {-4, -12}, {-5, -13}, {-6, -14}, {-7, 14}, {-8, -15}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1,
                 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 4, 2, 2, 4, 3, 3, 1, 1, 4, 1, 5, 6, 
                2, 2, 4, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769130505446216`, 
               0.4588128282357191, 0.6080452509127676, 
               0.4424523525336408, -0.7989367794135207, 
               0.608045073563698, -0.2581586988265099, -0.25815754958147075`, \
-0.22599333218842954`, -0.5544674866364234, 
               0.8613546574650721, -0.9414013869422329, \
-0.0022396262297607224`, 0.6212084350355722, 
               0.442452312917323, -0.7989368121814318, 0.8613550627607207, 
               0.44245161577665426`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 13}, {6, -11}, {-2, 
                11}, {-3, 7}, {-4, 8}, {-5, 9}, {10, -12}, {-6, -13}, {-7, 
                12}, {-8, -14}, {14, 15}, {16, -15}, {17, -16}, {-9, -17}, {
                18, -18}, {-10, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1,
                 2, 2, 1, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 4, 6, 4, 4, 4, 3, 1, 2, 5, 6, 5, 4, 
                3, 1, 4, 6, 5, 4, 4, 1, 5, 5, 6, 1, 1, 4, 1, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588145709865117, -0.880062122191478, -0.3477867490944746, 
               0.6212066361680684, 0.8613552548134464, 0.6080451624220427, 
               0.8613539965805401, -0.2581580323482151, -0.8830308133482649, 
               0.44245131726980746`, -0.0022404430473412507`, 
               0.23175759114189787`, -0.8340141014184193, 0.6080454753590026, 
               0.4588143613153979, -0.5097774127314931, 0.608045598274761, 
               0.6212072638602413, -0.8340140455738991, 0.7347000950097105, 
               0.6080463079284355, 
               0.04310499669868906, -0.0022401537703638508`, \
-0.41812747663976335`, 0.23175767225052257`, 0.1058032103940828, 
               0.8110969179151368, 0.8613547073850514, 
               1.3350750100883175`, -0.3477862056388519, 1.235921436307649}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {6, 7}, {11, 
                12}, {-1, 8}, {9, -16}, {-2, -17}, {10, -18}, {-3, -19}, {13, 
                14}, {-4, -20}, {15, 16}, {-5, 21}, {17, -21}, {-6, 
                18}, {-7, -22}, {19, -23}, {20, -24}, {-8, -25}, {-9, -26}, {
                24, 25}, {-10, 27}, {-11, -27}, {-12, 26}, {-13, -28}, {28, 
                29}, {30, -29}, {31, -30}, {-14, -31}, {-15, -32}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2,
                 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 3, 1, 3, 6, 6, 1, 4, 4, 6, 4, 6, 4, 
                1, 5, 6, 5, 6, 1, 2, 1, 1, 1, 6, 5, 2, 1, 3, 1, 4, 4, 6, 5, 4,
                 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.45881442084038504`, -0.4227509598500605, 
               0.6378911103134826, -0.8449844292469137, -0.2581589036217391, \
-0.1576923845786522, 0.6212083523509602, -1.7477874013645494`, 
               0.8613538988590284, 0.6080450374179165, 0.621208529991689, 
               0.608046108522557, 0.23175764808763222`, 
               0.6080454538716253, -0.5525119537553129, \
-0.002238771660918945, -0.15769271911475302`, -0.002239989037560286, 
               0.2317582648372849, -0.4785247149587559, 
               0.4424506600731366, -0.7064328200557268, -0.6781930785928516, \
-0.582253817188886, -0.1576913957955437, -0.0022387471289147427`, 
               0.44245221980042926`, -0.16128470314520227`, \
-0.25815788001448814`, 0.13453200166448198`, 
               0.6080464702816046, -0.34778732348628116`, 
               0.23175767225052257`, -0.0022392380235415794`, 
               0.8613556366221058, 0.04046617588975976, -0.09001629427208324},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {32, 33}, {6, 7}, {-1, 
                25}, {8, 9}, {14, 15}, {-2, -19}, {10, -20}, {-3, 11}, {
                12, -21}, {-4, 13}, {-5, -22}, {16, 17}, {-6, -23}, {
                18, -24}, {-7, 20}, {19, -25}, {-8, -26}, {21, -27}, {22, 
                23}, {-9, 24}, {-10, -28}, {-11, -29}, {-12, 26}, {27, 28}, {
                29, -30}, {-13, 31}, {30, -31}, {-14, -32}, {-15, -33}, {-16, 
                34}, {-17, -34}, {35, -35}, {36, -36}, {
                37, -37}, {-18, -38}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1,
                 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 
                1, 1, 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 6, 3, 6, 6, 5, 1, 6, 5, 5, 6, 2, 2, 
                4, 5, 1, 5, 4, 5, 1, 6, 4, 4, 2, 3, 4, 1, 4, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.45881442084038504`, -0.7479457977573727, 
               0.23175765342661303`, 0.458812978262948, 
               0.6212066771339426, -0.1576923845786522, -0.8340144877476643, \
-1.7230616717475868`, 
               0.621207921691636, -0.002240295697864797, \
-0.002239121457300198, -0.15769237290347182`, 
               0.44245124808304137`, -0.798935521129688, 
               0.6080463102304412, -0.0022399087407898727`, \
-0.5190854831252878, -0.8340142990081629, 
               0.6080455931624575, -0.8340140458124043, -0.2914946175985138, \
-0.15769198734332424`, 0.8613555552449412, 
               0.8613556366221058, -0.09770748944868801, 
               0.6378916862455206, -0.3477875959120107, -0.35330181077559875`,
                0.8613548180989383, -0.44832132497846144`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {6, -16}, {14, 
                15}, {-1, 7}, {-2, 8}, {9, 10}, {11, -17}, {12, 
                13}, {-3, -18}, {-4, -19}, {-5, -20}, {16, 17}, {-6, 23}, {
                18, -21}, {-7, 19}, {-8, -22}, {20, 21}, {-9, -23}, {
                22, -24}, {-10, -25}, {-11, -26}, {-12, -27}, {26, -28}, {
                27, -29}, {-13, 28}, {-14, 29}, {30, -30}, {-15, -31}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 4, 3, 5, 1, 4, 6, 5, 2, 1, 1, 3, 1, 
                4, 1, 4, 3, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404232995489083`, 
               0.4424504618196843, 0.6080449790576843, 
               0.4588145519441529, -0.002240427230362302, -0.7075412304481352,
                0.8613556003326233, -0.15769285332794003`, \
-0.8340152884521137, -0.09770640283273635, -1.2603715254754793`, \
-1.1302265494254211`, -0.25815855378277064`, 
               2.9965560191123295`, -0.34778631289404416`, \
-0.5147652479370963, 0.861355589931569, 0.4588146114848177, 
               0.6080462591260805, 0.3618812462305159}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {6, -13}, {
                8, -14}, {-1, 7}, {-2, -15}, {-3, 9}, {-4, -16}, {12, 
                13}, {-5, 17}, {-6, 14}, {-7, 15}, {-8, -17}, {-9, 
                16}, {-10, -18}, {18, -19}, {19, 
                20}, {-11, -20}, {-12, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1,
                 2, 2, 2, 1, 2, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 2, 
                3, 4, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240438656691466, 
               0.1301294047314583, 0.44245209231260674`, 0.6080464767547671, 
               0.4588141384900446, 0.6080465409146951, -0.7989366435262983, 
               0.6378924561088448, 0.6378920906743861, -0.7443192373540812, 
               0.6378920625201694, 0.6378913830372808, -1.6519647697870639`, 
               0.17237179471939856`, 0.5483528215293703, 
               0.608046256398751, -0.7989368405485351, 0.8130826075937341}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {8, -10}, {-2, 5}, {
                6, -11}, {-3, 7}, {-4, -12}, {9, 10}, {11, -13}, {-5, 18}, {
                12, -14}, {13, -15}, {14, 15}, {-6, -16}, {16, -17}, {-7, 
                17}, {-8, -18}, {-9, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
                 1, 2, 1, 2, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 3, 5, 1, 1, 1, 6, 5, 1, 4, 5, 3, 1, 4, 
                2, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 3, 1, 3, 3, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.7371658047756071, \
-0.2581587914086789, -0.4181271072231323, -1.3938580196756867`, \
-1.8815725074855614`, -1.3234009255969585`, 
               0.6212084308436028, -0.0022392404693193473`, \
-0.8423696818175319, 0.6080465057052153, -0.4181269586978824, 
               0.45881288194540915`, 2.9965560191123295`, 
               0.6080460511730639, -0.798936721782157, -0.22407105324831478`, 
               0.2620426610149251, -0.4768060615165073, -0.3209416465959878, 
               0.5186425191256117, -0.7075165787405169, -0.7989368123149134, 
               0.4588146338573904, 
               0.4424518593690343, -0.09770757999024138, \
-0.25815921652480256`, -0.2566754906667619, -0.2581576029055439, 
               0.4588146585159789, -0.4483217777758721}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {12, 13}, {5, 6}, {-2, 
                7}, {-3, 8}, {-4, -20}, {9, -21}, {-5, 10}, {-6, 
                11}, {-7, -22}, {14, 15}, {22, -23}, {16, 17}, {-8, 21}, {
                18, -24}, {-9, 20}, {-10, 
                19}, {-11, -25}, {-12, -26}, {-13, -27}, {-14, 23}, {24, 
                25}, {26, 27}, {29, -28}, {-15, 
                28}, {-16, -29}, {-17, -30}, {-18, 30}, {-19, -31}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2,
                 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 1, 2, 1, 3, 2, 4, 3, 1, 1, 1, 2, 
                3, 1, 4, 4, 4, 2, 3, 1, 1, 3, 1, 4, 3, 1, 2, 2, 1, 1, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.23175765342661303`, -0.2581573941981459, \
-0.8449844292469137, -1.8505103194669204`, -0.7989367794135207, 
               0.07680001620580212, 0.10032779722031648`, -0.798935521129688, 
               0.8613549686525959, -0.25815745184043504`, 
               
               2.9965560191123295`, -1.5534363531699515`, -1.854084605504454, \
-0.7989350966513653, -0.2581592305598619, 1.2326171888446176`, 
               0.6080456710805011, 0.6080456043953868, 0.8613546499771045, 
               0.44245219103578526`, 
               0.6378921277572474, -0.22836933291963835`, -0.4200820147850668,
                0.6378920625201694, -0.44896166498455914`, 
               0.6080455317841951, -0.2581578004056362, -0.6498580694487632, \
-0.09770590286724878, 0.44245188908199085`, 0.14770980217912544`, 
               0.9477199586063687, 0.4424521240743733, -0.13149596194322632`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, -16}, {-2, 
                6}, {7, -17}, {-3, 8}, {-4, 9}, {-5, -18}, {12, -19}, {
                14, -20}, {13, -21}, {-6, -22}, {-7, 15}, {-8, 16}, {
                17, -23}, {18, 19}, {20, -24}, {33, -25}, {21, -26}, {
                22, -27}, {23, 24}, {25, -28}, {29, -29}, {26, -30}, {
                27, -31}, {-9, 28}, {-10, -32}, {-11, 30}, {31, -33}, {-12, 
                32}, {-13, -34}, {-14, 34}, {-15, -35}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2,
                 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 
                2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 6, 5, 3, 6, 3, 6, 4, 3, 4, 4, 1, 1, 3, 
                1, 1, 3, 1, 3, 3, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769140798003045`, 
               0.621208453372919, -0.0022404232995489083`, \
-0.25815808352456093`, -0.15769133006720826`, -0.2581592305598619, 
               0.6212078863670829, 0.608045086903167, 0.637892670917231, 
               0.861355589931569, 0.6080450107911792, 
               0.2640891178001139, -1.2896785471344963`, 
               0.4588139830659177, -0.34699660460894144`, -0.6787535451926656,
                0.45881317682990286`, 
               0.9443069857155715, -0.25815819582687016`, \
-0.25815776130641543`, 1.101671409804318, -1.1378233684243302`, 
               0.7004426807226922}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {23, -13}, {-2, 
                7}, {-3, 8}, {-4, -14}, {9, 10}, {11, -15}, {14, 15}, {-5, 
                12}, {13, -16}, {-6, -17}, {16, -18}, {22, -19}, {17, 18}, {
                19, -20}, {-7, 21}, {-8, 
                20}, {-9, -21}, {-10, -22}, {-11, -23}, {-12, -24}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2,
                 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 6, 4, 1, 3, 2, 2, 4, 3, 2, 4, 4, 1, 
                2, 1, 3, 1, 4, 3, 3, 1, 2, 2, 3, 1, 5, 5, 1, 1, 6, 6, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.15769142973934747`, 
               0.1301294047314583, 0.6212085717664682, 
               0.6080462323600848, -0.7451274511858319, \
-0.25815765183112127`, -0.7989366786997385, -0.7989351933876376, 
               0.6080450569075415, 0.6378914181472997, -0.7989366861904594, 
               0.6080450041653798, 
               0.6080449790576843, -0.9033306655130895, -0.09770590286724878, 
               0.9151268016313061, -0.25815894224952807`, 1.6559623710885933`,
                0.6080449371353795, -0.2581581513919433, \
-0.25815743954428916`, -0.4476953386040128, 0.4424515952340289, 
               0.4424521195063553, -0.2581591772891243, -1.848380865991608, \
-0.0022388022284905475`, -0.0022399225035633977`, -0.8812483596312841, \
-0.5070541596409424, 0.6212081429098353, 0.6212069144749428, 
               0.45881424094182943`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {9, -20}, {-2, 5}, {-3, 
                6}, {-4, 7}, {-5, 8}, {-6, -21}, {10, 11}, {12, -22}, {-7, 
                22}, {13, 14}, {15, -23}, {-8, -24}, {16, 17}, {-9, 18}, {-10,
                 19}, {-11, -25}, {20, -26}, {-12, 21}, {-13, -27}, {23, 
                24}, {25, -28}, {32, -29}, {-14, 26}, {-15, 27}, {28, -30}, {
                29, 30}, {-16, 31}, {-17, -31}, {-18, -32}, {
                33, -33}, {-19, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2,
                 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 
                1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 1, 4, 1, 1, 2, 1, 2, 4, 1, 4, 2, 2, 
                1, 1, 2, 1, 3, 1, 4, 2, 2, 4, 1, 2, 4, 3, 1, 3, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.4181271072231323, 
               0.130129410298933, -0.8426080696726874, 0.6080462571751228, 
               0.48851268888935717`, -0.026934093981115542`, \
-0.17824231652465738`, 0.7838219035162552, 0.1723719032131108, 
               0.6080457994337394, -0.978212168467194, 0.6080455034692394, 
               0.44245213957290064`, -0.09770749004770585, \
-0.38571860903222843`, 2.8716294647089473`, -0.09770711699926293, 
               1.3701320349975479`, -0.25815922480010123`, 1.536229840731643, 
               0.6080452509127676, -0.09770706759243519, 0.4424523075642184, 
               0.6080452238577108, -0.19092505205419075`, \
-0.09770573427683071, 0.6080449184072085, -0.25815815754033355`, 
               0.23255729867942465`, 0.4588144257075881, -0.45064762892066, 
               0.861355589931569}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {9, 10}, {-2, 5}, {6, 
                7}, {-3, -17}, {8, -18}, {-4, -19}, {11, -20}, {12, 
                13}, {-5, -21}, {14, 15}, {30, -22}, {16, 
                17}, {-6, -23}, {-7, -24}, {-8, 18}, {19, 20}, {-9, 
                21}, {-10, -25}, {22, -26}, {-11, 23}, {24, -27}, {
                25, -28}, {-12, 26}, {-13, 27}, {28, -29}, {-14, 
                29}, {-15, -30}, {31, -31}, {32, -32}, {-16, -33}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1,
                 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 
                2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 5, 3, 3, 4, 3, 1, 3, 4, 2, 1, 1, 2, 1, 
                2, 1, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240445299791994, \
-0.8340140194061414, 0.6378924793510805, 0.4588128282357191, 
               0.6080456458998684, -0.2581580323482151, -0.7409750855075776, \
-0.2581580046797267, 0.6080450235074784, 
               0.4424507898493486, -0.7814382285756105, 
               0.04011380967186473, -0.7989354193734188, \
-0.027066153155229644`, 
               0.442450960199261, -1.6851107709937168`, -0.2581576895037978, \
-1.859053671936751}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, -11}, {6, 7}, {-1, 
                15}, {-2, 8}, {11, 12}, {-3, 9}, {-4, 
                10}, {-5, -12}, {-6, -13}, {13, -14}, {-7, 
                14}, {-8, -15}, {-9, -16}, {17, -17}, {18, -18}, {-10, -19}}],
               "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 1, 1, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 5, 4, 3, 1, 2, 1, 1, 1, 1, 1, 4, 5, 
                3, 4, 4, 4, 2, 1, 3, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588143111723859, -0.15769143446813683`, \
-0.002240445299791994, 
               0.6080462152475024, -0.258157866120138, -1.8545414411741525`, \
-0.7989366577213906, -0.5151331215512238, 
               0.7175402105728255, -0.8936564753622509, -1.1867525601565934`, \
-0.8812483596312841, 0.6080449240474168, -0.0022396916852545704`, 
               0.4588138765897094, 0.8613539679493787, 0.8613538879649285, 
               0.6080456070737306, 0.4424514207726964, -0.5424223181610142, 
               0.458814562454382, 0.6378909257394483, 2.9965560191123295`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {6, 7}, {12, 
                13}, {-1, 8}, {-2, 9}, {-3, -14}, {10, -15}, {
                11, -16}, {-4, -17}, {-5, 14}, {-6, 15}, {-7, -18}, {
                16, -19}, {17, -20}, {18, -21}, {-8, 19}, {-9, 
                20}, {-10, -22}, {-11, -23}, {-12, 23}, {-13, -24}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2,
                 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 5, 2, 6, 1, 5, 3, 1, 3, 1, 4, 4, 
                1, 3, 1, 4, 1, 1, 4, 1, 4, 1, 1, 3, 4, 4, 2, 1, 2, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240445299791994, \
-0.2581574271232645, 
               0.6080457994337394, -0.8340143650451406, -0.7989367794135207, \
-0.1576918050170475, 0.0036877250458162703`, -0.0022404756471918544`, 
               0.10032779722031648`, 0.36417381985662844`, 
               0.45881414084844296`, 0.07240052143144271, 0.6080457611250853, 
               0.8613552552276218, -0.5482631864765022, -0.25815807797844315`,
                2.8031437736557603`, 
               0.6080450624556386, -1.0221545472065277`, -0.6498580694487632, \
-0.3477868281622527, -0.22584562534218255`, 0.608045126331346, 
               0.19797897962128364`, -0.06493009050729603, \
-0.2581585377127733, -0.3477864384328777, -0.3477862958855509, \
-0.7989367172412019, -0.9077304224939375, 0.4424522947492209, 
               0.6080461841845182, -0.7788984318592957}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, 14}, {-1, 6}, {-2, 
                9}, {7, 8}, {-3, -18}, {-4, -19}, {10, 11}, {
                12, -20}, {-5, -21}, {-6, -22}, {15, -23}, {29, -24}, {16, 
                17}, {-7, 18}, {21, -25}, {19, -26}, {-8, 
                20}, {-9, -27}, {-10, 22}, {-11, 23}, {24, -28}, {25, 
                26}, {-12, 27}, {-13, 28}, {-14, -29}, {-15, -30}, {30, 
                31}, {-16, -31}, {32, -32}, {33, -33}, {-17, -34}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
                 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 
                1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 2, 3, 2, 3, 2, 2, 4, 4, 1, 1, 4, 3, 
                2, 4, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765665706116`, 
               0.6080447634646884, -0.09770659439590701, 0.4588145843229552, 
               0.4424510638798522, 
               0.4588142159321844, -0.7989368405485351, -0.0977059822340276, \
-0.3477875959120107, 
               0.8613552520355112, -1.0758407252848148`, \
-1.3003878314084218`, -0.34778723829705616`, 0.4588146114848177, 
               0.44245074814158913`, 
               0.6080450449199519, -0.09770590858973771}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {5, -11}, {
                6, -12}, {-2, -13}, {-3, 9}, {-4, 15}, {-5, 10}, {11, 
                12}, {-6, 13}, {-7, -14}, {-8, 14}, {-9, -15}, {16, -16}, {
                17, -17}, {-10, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1,
                 1, 1, 1, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 6, 1, 1, 4, 3, 1, 3, 2, 1, 5, 1, 6, 
                3, 3, 3, 1, 3, 3, 1, 1, 4, 1, 1, 4, 2, 1, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.1576913429454876, 
               0.44245089730213394`, 0.6212082468289477, 
               0.04011380967186473, -0.02835465017111302, 0.8613556366221058, 
               0.4588143615956026, -0.7479457977573727, 0.45881413581432495`, 
               0.4424519422552673, 
               1.074543864572254, -0.0022397822543600947`, \
-0.6204978949027664, 0.6212081774735765, 0.6378924949006457, 
               0.45881380584241116`, 0.45881398925319905`, 
               0.04436788597160424, 
               0.6378908993509382, -0.25815921652480256`, -1.860250919150026, \
-0.15431161118289194`, 
               0.8613544463374785, -1.495265277398703, -0.6120977718710545, 
               0.6080464260378671, -0.09770611124215722, 
               0.5961932309350537, -0.2581575560234848}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -15}, {10, 11}, {5, 6}, {
                7, -16}, {-1, -17}, {8, -18}, {-2, 9}, {-3, -19}, {12, 13}, {
                23, -20}, {14, 15}, {21, 22}, {16, -21}, {20, -22}, {-4, 
                17}, {-5, 18}, {-6, 
                19}, {-7, -23}, {-8, -24}, {-9, -25}, {-10, -26}, {
                24, -27}, {-11, 25}, {-12, 26}, {27, -28}, {28, 
                29}, {-13, -29}, {-14, -30}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2,
                 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 1, 3, 6, 2, 1, 1, 1, 2, 4, 3, 1, 4, 
                4, 4, 1, 1, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404496904417787`, 
               0.4424507283104093, -0.8449844292469137, 
               0.4588128282357191, -0.1576928918015157, -0.798935050994797, \
-1.8606445545028745`, -1.683618078698352, -1.8455031744654207`, \
-0.09770671592681435, 0.7347000736406519, 
               0.1003278869514228, -1.87851945718233, 0.6080450071441632, 
               0.8613555854946817, 0.6080451048941473, 
               2.8716294647089473`, -0.34699660460894144`, 
               0.45881383406690945`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {-1, 6}, {-2, 
                7}, {-3, -12}, {-4, 8}, {-5, -13}, {11, 12}, {15, 16}, {
                13, -14}, {-6, -15}, {-7, 14}, {-8, -16}, {17, 
                18}, {-9, -17}, {19, -18}, {-10, -19}, {-11, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2,
                 1, 2, 2, 2, 1, 2, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 3, 4, 1, 2, 1, 1, 6, 1, 5, 1, 1, 4, 
                1, 3, 4, 4, 1, 1, 4, 1, 1, 1, 3, 1, 3, 1, 2, 3, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404496904417787`, 
               0.44245046030260227`, 0.6378924561088448, 0.8613546787626678, 
               0.5855944025556434, -0.798936741187994, -0.02835465017111302, 
               0.07397018130793587, -0.15769299113565594`, 
               0.07240052143144271, -0.8340138281464693, -0.8449844292469137, \
-1.1302265494254211`, 0.8613539231171137, 
               2.8716294647089473`, -0.2581573515853015, 
               0.608045673579495, -0.34778637296935244`, -0.06141046378201159,
                1.2627911679865491`, 0.6080448920717068, 1.1089869071290934`, 
               0.5949279797765072, 0.5315279538164601, 0.6378916508001264, 
               0.1857303336483307, -0.25815829928637735`, 1.4383835267848095`,
                0.1723725921504886, 0.458814370534812, -0.03426176708845641, 
               0.8613541152317579}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, 7}, {
                9, -15}, {-1, -16}, {-2, 8}, {-3, -17}, {-4, 10}, {
                11, -18}, {-5, -19}, {14, 15}, {-6, -20}, {16, -21}, {
                17, -22}, {-7, -23}, {18, 19}, {20, 21}, {30, 31}, {
                22, -24}, {25, 26}, {23, -25}, {24, -26}, {-8, -27}, {
                27, -28}, {-9, -29}, {28, 
                29}, {-10, -30}, {-11, -31}, {-12, -32}, {-13, 
                32}, {-14, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1,
                 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 
                1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 3, 1, 1, 3, 4, 3, 1, 3, 1, 4, 4, 4, 
                2, 2, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765342661303`, 
               0.6080459154029461, -0.2581592305598619, -1.2073244318045937`, \
-1.8110356363362978`, -0.25815894224952807`, 
               0.6080455390625383, -0.25815862335308637`, 
               1.2326171888446176`, -0.25815743252600853`, 
               2.9980851985412773`, 
               0.6080449952105687, -0.3477862333275228, -0.3477860418310077, 
               0.1723727302442346, -0.7989368123149134, 0.44245146250928746`},
               "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 5}, {-3, 16}, {-4, 
                6}, {-5, 7}, {8, -14}, {-6, 9}, {10, 11}, {-7, 
                12}, {-8, -15}, {13, -16}, {-9, 14}, {-10, 
                15}, {-11, -17}, {-12, 17}, {-13, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1,
                 1, 2, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 4, 4, 6, 1, 3, 2, 4, 1, 1, 4, 4, 5, 
                5, 1, 3, 4, 1, 1, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.45881442084038504`, -0.15769143446813683`, \
-0.3477867490944746, 0.6080454538716253, 
               0.6212070503298044, -1.6519647697870639`, -0.2581581181129864, \
-0.7989357872114322, 
               0.8613555854946817, -0.8476189504121852, -1.4647309796516996`, 
               0.6080456719193306, 
               0.6080462894278131, -0.0022404313258115142`, \
-0.4181270493738616, -0.7148952948853369, 
               0.458814562454382, -0.3477860394000811, -0.15403848817592514`, 
               0.0997899294020883, 0.4588145143973068}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {14, 15}, {-2, 5}, {-3, 
                6}, {7, 8}, {-4, -14}, {-5, 9}, {10, -15}, {11, 
                12}, {-6, -16}, {-7, 13}, {-8, -17}, {-9, 16}, {17, 
                18}, {-10, -18}, {19, -19}, {20, 
                21}, {-11, -20}, {-12, -21}, {-13, -22}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2,
                 2, 2, 2, 2, 1, 1, 2, 2, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 2, 3, 1, 4, 6, 1, 1, 6, 1, 1, 1, 1, 
                1, 3, 2, 1, 4, 4, 3, 1, 4, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404232995489083`, 
               0.17237242391474217`, 0.4424523075642184, 0.4588128282357191, 
               1.0183559389509806`, 0.8613546787626678, 
               0.23175845411329044`, -0.9098531187878809, \
-0.3542599905774546, -0.15769232006427858`, 
               0.5282420234887617, -1.1317247582606402`, \
-1.8505103194669204`, -1.683618078698352, 0.2688862051480392, 
               0.637892433840002, -0.7989364314830878, 0.1380752114708479, 
               0.6080456744183236, 0.6080456043953868, 
               0.4588143421782571, -1.6494904604217862`, 
               0.734700280918978, -0.25815783544418736`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {16, -12}, {-1, 6}, {
                9, -13}, {7, 8}, {-2, -14}, {-3, -15}, {10, 11}, {12, -16}, {
                15, -17}, {13, -18}, {-4, 14}, {-5, -19}, {-6, -20}, {17, 
                18}, {-7, 19}, {-8, -21}, {20, 21}, {-9, -22}, {22, -23}, {23,
                 24}, {-10, -24}, {-11, -25}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2,
                 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 5, 3, 1, 5, 6, 6, 6, 5, 4, 1, 1, 6, 
                1, 1, 6, 5, 6}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.442450443615622, -0.909197316189398, -0.00224042142091559, 
               0.4588146032846301, -0.25662952889998314`, \
-0.002240445299791994, 0.23175754341284516`, 
               0.6212066771339426, -0.15769300208868064`, \
-0.0022397741902052196`, -0.3477860418310077, 2.9965560191123295`, 
               1.7531391416145254`, -0.15769282914358285`, \
-0.6781930785928516, -1.1029209040314658`, -0.1576923845786522, \
-0.8340145421760328, -0.1576918050170475}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {14, 15}, {5, 6}, {7, 
                8}, {-2, 11}, {-3, -12}, {9, -13}, {-4, 10}, {-5, -14}, {
                12, -15}, {13, -16}, {-6, -17}, {16, 
                17}, {-7, -18}, {-8, -19}, {-9, 18}, {-10, 19}, {-11, -20}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
                 1, 1, 1, 2, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 4, 3, 2, 3, 1, 3, 6, 6, 1, 1, 1, 2, 
                3, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240445299791994, 
               0.130129410298933, -0.3477875043079073, 0.4588145843229552, 
               0.44245115543632574`, 
               0.4588140922954005, -1.8586777016009766`, -0.2581576327247017, \
-0.15769259106664424`, -0.157692402346586, -0.38695827607811717`, \
-0.22407105324831478`, 0.45934875193020197`, 0.4424523034885106, 
               0.637892670917231, 0.8613552552276218, -0.38084602760087316`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 14}, {5, -11}, {6, 
                7}, {8, -12}, {-3, 12}, {9, -13}, {-4, 10}, {-5, 
                11}, {-6, -14}, {-7, 13}, {-8, -15}, {15, -16}, {16, 
                17}, {-9, -17}, {-10, -18}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1,
                 2, 2, 2, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 1, 2, 1, 1, 2, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.23175765466549292`, 
               0.10032784030073272`, -1.485461130029842, -0.798936763954968, \
-0.9503459009571422, -0.323436147437155, -0.7989352708769593, 
               0.07397018130793587, -0.028486941796749488`}, "Children" -> 
              RawArray["Integer16",{{2, -6}, {3, 4}, {-1, 5}, {-2, 7}, {-3, 
                6}, {-4, -7}, {8, -8}, {9, -9}, {-5, -10}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 2, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 3, 1, 2, 2, 1, 4, 5, 1, 4, 1, 1, 3, 
                4, 1, 1, 1, 1, 3, 4, 4, 1, 3, 2, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404232995489083`, 
               0.4588128282357191, 0.6378924949006457, 
               0.10481800151590592`, -0.7989367794135207, 
               0.44245143808826093`, 0.5186425191256117, 
               0.6080466439658068, -0.8340142395567298, 0.39239686850017064`, 
               0.8613547373957413, -1.8455031744654207`, 
               0.1380752114708479, -0.25815798658902933`, 
               0.6080463079284355, -1.87851945718233, 
               3.0970582380954124`, -1.1415480857011886`, 1.0081055385342808`,
                0.6378916508001264, -0.3477875531682515, -0.3477872002942042, 
               1.2627911679865491`, 0.10032804598572664`, -0.7989368109085815,
                0.861355208993837, 1.3008611077556935`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {6, 7}, {-1, 
                11}, {8, -14}, {10, -15}, {
                9, -16}, {-2, -17}, {-3, -18}, {-4, -19}, {14, 15}, {-5, 
                27}, {16, -20}, {17, 18}, {-6, -21}, {19, -22}, {24, 25}, {20,
                 21}, {-7, -23}, {-8, 22}, {
                23, -24}, {-9, -25}, {-10, -26}, {-11, 
                26}, {-12, -27}, {-13, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1,
                 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 5, 3, 4, 3, 3, 1, 3, 1, 6, 1, 2, 5, 1, 
                1, 3, 3, 4, 4, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6080448927094713, -0.002240445299791994, 0.4588140429887755, 
               0.130129410298933, 
               0.6378911150149564, -0.25815762478508697`, -0.9120935220634125,
                0.6378909221738951, 
               2.7092329983669377`, -0.15769172185649905`, -0.776878208567398,
                0.44245112518069085`, -0.0022403963300040505`, \
-0.06458654684535803, -0.8499953099864124, -0.2581592218758315, 
               0.4588131435867324, 0.6080457258173242, 0.8613538879649285, 
               0.6080463079284355, -1.0730051419113327`, \
-0.02185169615796778}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {10, 11}, {-1, -15}, {6, 
                7}, {-2, 8}, {-3, 9}, {-4, -16}, {-5, -17}, {12, 
                13}, {-6, -18}, {14, -19}, {15, 16}, {-7, -20}, {-8, 17}, {-9,
                 18}, {-10, -21}, {-11, 19}, {20, 21}, {-12, -22}, {-13, 
                22}, {-14, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1,
                 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> RawArray["Integer16",{5, 2, 2, 6, 2, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404232995489083`, 
               0.44245094997238077`, -0.7989367988193576, 
               0.23175814195543554`, 
               0.44245046030260227`, -0.7989366435262983}, "Children" -> 
              RawArray["Integer16",{{2, -4}, {3, 4}, {-1, 5}, {-2, -5}, {
                6, -6}, {-3, -7}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 1, 3, 1, 4, 1, 1, 2, 4, 1, 1, 3, 1, 
                4, 2, 2, 1, 1, 1, 3, 3, 2, 3, 3, 1, 2, 1, 1, 1, 3, 2, 2, 1, 4,
                 4, 3, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA+KMvoCXvVFJ+y/UClQbxN61j/CzW68268/+jA3hy5a3
XthvIbq6UXfJs/0WrEGq0qWP7R805VVGvj2z/8Ut9fnbXrzaLyBesu/xhJf7
GU4FJ6vlX7AX+HTtJbv2v/0n/vCpZ16/sz/hoMOllUBzOBapC6zf93f/BaXJ
22SA5jSYm/8D6XP4ordGPvCOfcbS5/MKch/s//Apa4XGsk/7JR65bLz29d7+
C3nLevp9T9hzuFmLrwCaYzBby2jphWP7E77yTAG574RfiYsR0N0dk+PEa3Z8
3p+g0RHux7xzf8TBrTGffrA7nDj9kkU1hc0hw2iRVOzVF/YVu0qy5mY+sd9R
YPHWe+Od/RH7f+uD1J848fb3Rq8L+xmYzXJkge6bEPrEBURfeP3nH0h9Brue
Y1rlmf0A7u6jgg==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, 6}, {8, 
                9}, {-2, 7}, {-3, -23}, {-4, 10}, {-5, -24}, {-6, -25}, {-7, 
                13}, {15, 16}, {14, -26}, {-8, -27}, {17, 18}, {-9, 27}, {19, 
                20}, {22, 23}, {-10, 21}, {-11, -28}, {-12, -29}, {-13, 
                24}, {-14, -30}, {-15, 25}, {-16, 26}, {-17, -31}, {28, 29}, {
                30, -32}, {33, -33}, {-18, 31}, {32, -34}, {-19, -35}, {-20, 
                34}, {-21, 35}, {36, -36}, {37, -37}, {38, -38}, {-22, -39}}],
               "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2,
                 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
                2, 1, 1, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 1, 2, 4, 5, 1, 4, 3, 1, 1, 2, 1, 4, 
                2, 2, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404496904417787`, 
               0.6080447634646884, -1.6893422272032161`, 0.4424508790916035, 
               0.861355118747146, -0.4181271367210053, -1.885505593715724, 
               0.6080459154029461, -0.2581575988964735, -0.5482631864765022, \
-1.1695910673746432`, 0.44245111149238214`, 
               2.9965560191123295`, -0.34778726762633605`, \
-0.09770757999024138, 
               0.44245181191901617`, -0.3477872006717684, \
-0.25893331251125273`, 1.0061035383473076`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {5, 
                6}, {-2, -12}, {-3, -13}, {-4, 9}, {10, 11}, {-5, -14}, {12, 
                13}, {-6, -15}, {-7, -16}, {14, -17}, {-8, 15}, {-9, 16}, {17,
                 18}, {19, -18}, {-10, -19}, {-11, -20}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2,
                 2, 2, 1, 2, 2, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 6, 6, 4, 1, 1, 2, 2, 3, 3, 2, 1, 3, 
                4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.13012941316764137`, 
               0.23175769023199644`, 0.621206619903254, 
               0.7347002762205292, -0.8426080696726874, -1.485461130029842, \
-0.7989363539749572, 
               0.44245213957290064`, -0.25815838145993286`, \
-0.25815798658902933`, 
               0.44245199649604894`, -1.1051122300826304`, \
-0.2581575083807395, 0.6080450625497109}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -8}, {4, 5}, {6, -9}, {7, 
                8}, {-2, -10}, {-3, 9}, {14, -11}, {-4, 10}, {-5, 11}, {
                12, -12}, {13, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1,
                 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 5, 3, 1, 1, 6, 6, 5, 6, 5, 6, 6, 1, 2, 
                2, 3, 1, 1, 4, 1, 1, 1, 4, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.3477860252889067, \
-0.00224042142091559, -0.2581574245110354, -1.3289020353617325`, \
-1.8563257834288116`, -0.15769302887864178`, -0.1576923845786522, \
-0.002240427230362302, 
               0.6212084565536831, -0.834015487076444, -0.15769183373310858`, \
-0.15769182030297912`, -1.525376364788226, -0.7989368405485351, \
-0.17824217744435744`, -0.25815787462646433`, 
               0.972233694137608, -0.03426176708845641, 
               0.861355589931569, -0.06260933396147295, \
-0.34699660460894144`, -0.19043473238136466`, 0.8613552552276218, 
               0.6080455395885984}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {13, 14}, {-2, 
                7}, {-3, -14}, {-4, 8}, {9, -15}, {10, -16}, {-5, 11}, {-6, 
                12}, {-7, -17}, {15, -18}, {-8, 16}, {-9, -19}, {17, 
                18}, {-10, -20}, {19, -21}, {20, 21}, {22, -22}, {-11, -23}, {
                23, 24}, {-12, -24}, {-13, -25}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1,
                 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 3, 4, 2, 1, 2, 4, 1, 2, 6, 1, 2, 1, 
                3, 3, 2, 1, 1, 2, 1, 1, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.002240438656691466, \
-0.5097774127314931, -0.2581592305598619, 0.6080462517585294, 
               0.44245046030260227`, -1.485461130029842, -0.7989367988193576, 
               0.13012945926864306`, -0.9260672389688906, -0.7989367008038091,
                0.23175790573626287`, -1.0127675206347284`, 
               0.1723719032131108, 3.0970582380954124`, -0.2581576020276466, 
               0.6378924656917917, -0.09770635532646588, \
-0.38084602760087316`, -0.48423835974908824`, -0.09770626751892542, \
-0.1338968934263174, -0.19330416990064592`, 0.6080450023600443, 
               0.060462627087086385`, -0.2254998954003571}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 12}, {6, 7}, {10, 
                11}, {-2, 8}, {-3, -16}, {-4, 
                9}, {-5, -17}, {-6, -18}, {-7, -19}, {13, 14}, {-8, -20}, {
                15, -21}, {-9, 16}, {17, 18}, {19, 20}, {-10, -22}, {-11, 
                21}, {-12, 23}, {22, -23}, {-13, -24}, {-14, 24}, {
                25, -25}, {-15, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
                 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 5, 2, 1, 1, 1, 2, 3, 5, 1, 4, 2, 2, 1, 
                1, 2, 4, 4, 3, 4, 4, 4, 4, 1, 2, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.34778599746444305`, \
-0.0022404232995489083`, -0.7989355248138477, -0.5543233146593467, \
-1.4864682331591936`, -0.954871093198066, 
               0.4424521151550702, -0.2581585584582595, -0.8340150355018956, \
-0.7479457977573727, 0.6080449770314935, 0.4424506452482251, 
               0.44245056080204925`, -0.4137391818919891, 
               0.5263064400226671, -0.7989362757516743, 0.608046256398751, 
               0.6080461841845182, 0.4588140422494069, 0.6080461768934038, 
               0.8613552552276218, 0.6080456744183236, 0.6080454625449212, 
               0.9197932501843313, 0.4424510135836637, -0.7989368405485351}, 
              "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 5}, {16, 17}, {-3, 
                6}, {-4, 7}, {8, -16}, {9, 10}, {-5, -17}, {-6, 11}, {-7, 
                12}, {13, -18}, {14, -19}, {-8, 15}, {-9, -20}, {-10, 18}, {
                20, 21}, {-11, 19}, {-12, -21}, {22, -22}, {26, -23}, {
                23, -24}, {24, -25}, {-13, 25}, {-14, -26}, {-15, -27}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1,
                 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 1, 6, 5, 6, 3, 1, 1, 4, 5, 3, 5, 5, 4, 
                4, 5, 3, 1, 3, 1, 1, 1, 2, 2, 2, 1, 3, 1, 2, 2, 4, 2, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.4588140187378902, -1.5560436843238126`, 
               0.23175765342661303`, -0.002239605559531007, \
-0.15769273761922942`, -0.2581576895037978, -1.860250919150026, \
-1.7876345487064977`, 
               0.6080460820196887, -0.8340155871461103, -0.2581591311642706, \
-0.8340145339969567, -0.0022391844065875154`, 0.6080456738685074, 
               0.6080463378357948, -0.0022403920400931067`, 
               0.45881288194540915`, -0.02185169615796778, \
-0.25815861199606216`, -0.48563414833747665`, -1.153600574001441, \
-0.025762602729459932`, 0.44245096171027987`, 
               0.44245081984368406`, -0.7989353848822596, -0.7038432361267173,
                0.4588132824516915, -0.5472756140211832, -0.7989366501422035, \
-0.09770600127952389, 
               0.861354758693337, -0.097707557068621, -1.30192590597051, 
               0.25678361572093733`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {29, 30}, {-1, 6}, {9, 
                10}, {7, 8}, {-2, -18}, {-3, -19}, {-4, -20}, {-5, 11}, {12, 
                13}, {-6, -21}, {14, 15}, {-7, 16}, {26, 27}, {17, 18}, {
                19, -22}, {22, -23}, {20, 21}, {-8, -24}, {-9, -25}, {
                23, -26}, {24, -27}, {25, -28}, {-10, -29}, {-11, 
                28}, {-12, -30}, {-13, -31}, {-14, 31}, {
                32, -32}, {-15, -33}, {33, -34}, {-16, 34}, {-17, -35}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1,
                 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
                2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{1, 2, 3, 1, 6, 1, 1, 6, 5, 1, 6, 5, 5, 1, 
                2, 2, 2, 3, 6, 2, 4, 3, 4, 3, 2, 2, 1, 3, 4, 2, 3, 1, 5, 4, 5,
                 5}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.880062122191478, 
               0.44245054598029565`, 
               0.45881442084038504`, -1.8505103194669204`, \
-0.15769150538175136`, -0.954871093198066, -1.879716704395607, 
               0.6212081869153128, -0.834015325076872, -1.4906779141754054`, \
-0.15769254774724395`, -0.002239916289770178, -0.0022404430473412507`, 
               1.3428618097443241`, 0.4424512225624633, 
               0.4424519365131392, -0.7989366577213906, -0.2581590071444415, \
-0.15769238172578137`, -0.7989354468306624, 
               0.861354796685224, -0.25815798687542335`, 
               0.6080459308254369, -0.2581583266299403, 
               0.442450471809511, -0.7989368123149134, 0.13453200166448198`, 
               0.45881386622927245`, 0.8613547020387635, -0.09770638213644878,
                0.6378911103134826, 
               0.07397018130793587, -0.0022392380235415794`, 
               0.861354192050535, -0.4181267490771985, \
-0.0022401364557495043`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {13, 14}, {5, 6}, {-2, 
                7}, {8, -23}, {-3, -24}, {9, 10}, {-4, 11}, {-5, -25}, {-6, 
                12}, {-7, -26}, {15, 16}, {29, 30}, {17, -27}, {24, -28}, {-8,
                 18}, {-9, 19}, {20, 21}, {-10, 22}, {-11, -29}, {-12, 
                23}, {-13, -30}, {-14, 25}, {26, 27}, {-15, 
                28}, {-16, -31}, {-17, -32}, {31, 32}, {-18, 36}, {
                33, -33}, {-19, -34}, {34, -35}, {-20, 
                35}, {-21, -36}, {-22, -37}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2,
                 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
                2, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 1, 1, 6, 3, 2, 5, 5, 6, 1, 1, 5, 1, 1, 
                6, 2, 1, 6, 4, 6, 2, 4, 3, 1, 2, 5, 3, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.34778599746444305`, 
               1.300716845773323, -0.6114335032994296, 
               0.23175767225052257`, -0.2581573307298073, 
               0.44245237155628825`, -0.0022391726784067832`, \
-0.002239435558946158, -0.15769157371285347`, -1.860250919150026, \
-1.485461130029842, -0.002239257828910178, -0.7401440101242258, \
-1.1033297763656496`, 
               0.6212081725933452, -0.7989367988193576, -1.229758102347846, \
-0.1576923764449305, 0.8613547354567492, -0.1576914473892832, 
               0.4424506452482251, 0.608045673579495, 
               0.45881288194540915`, -0.36240307777158254`, 
               0.44245213957290064`, -0.002238722405134796, \
-0.2581578625133103, -0.17824176501362787`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -15}, {7, 
                8}, {20, -16}, {9, 10}, {16, 17}, {11, 
                12}, {-3, -17}, {-4, -18}, {13, -19}, {14, -20}, {
                15, -21}, {-5, -22}, {-6, 18}, {-7, -23}, {
                19, -24}, {-8, -25}, {21, 22}, {23, 24}, {-9, 
                25}, {-10, -26}, {-11, -27}, {26, -28}, {-12, 27}, {-13, 
                28}, {-14, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1,
                 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 2, 2, 4, 2, 1, 4, 1, 4, 1, 2, 3, 4, 
                1, 1, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.0022404756471918544`, 
               0.4588128282357191, 0.44245074814158913`, 0.44245103527409047`,
                0.8613541726991043, 
               0.44245051152854, -0.1966571278826923, -0.34778711156875053`, \
-1.3008925225141095`, 0.7346997355154476, 
               0.6589527243205158, -0.7989352003442818, 0.45881442063793365`, 
               0.8613553058449339, 0.03729926772828385, 
               0.07109214836655364, -0.44832131054639435`, 
               0.6913658793655806}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {8, -12}, {
                6, -13}, {-1, -14}, {-2, 7}, {-3, -15}, {-4, 9}, {10, 
                11}, {-5, -16}, {12, 13}, {-6, 14}, {-7, 17}, {15, -17}, {-8, 
                16}, {-9, -18}, {-10, 18}, {-11, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
                 1, 2, 2, 2, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 5, 4, 5, 1, 1, 3, 6, 5, 4, 1, 4, 4, 1, 
                6, 5, 1, 4, 3, 6, 4, 2, 6, 1, 1, 1, 5, 5, 5, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.13012940509928184`, -0.002240235660080133, 
               0.8613552530150743, -0.0022403804513030645`, 
               0.7181219021247323, 0.27173743616024204`, 
               0.4588138800584276, -0.15769176149577402`, \
-0.002240001484321085, 0.6080451561087639, 0.17467902237559563`, 
               0.6080454753590026, 0.6080449184072085, -0.2570296599985351, 
               0.6212069669273301, -0.002240437227794014, 0.06462913935147852,
                0.6080462802622559, -0.25815825571775886`, 
               0.23175743635918677`, 0.608046358767508, -0.7989365023840751, 
               0.6212081628032822, 1.2371434111327062`, 
               1.3739102156354726`, -1.201443465422603, -0.8340152536315077, \
-0.8340145768297269, -0.41812698129248504`, -0.7454852607228286}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -19}, {7, -20}, {-1, 5}, {
                6, -21}, {-2, -22}, {8, 9}, {10, 11}, {25, 26}, {-3, -23}, {
                12, 13}, {14, 15}, {-4, 23}, {16, 17}, {18, 
                19}, {-5, -24}, {-6, -25}, {-7, 20}, {-8, 
                21}, {-9, -26}, {-10, 22}, {-11, -27}, {-12, 
                24}, {-13, -28}, {27, -29}, {-14, -30}, {-15, 28}, {-16, 
                29}, {-17, 30}, {-18, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1,
                 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], 
          "OOBConfusionMatrix" -> {{0.7245884819872958, 0.3085057040854102}, {
           0.2754115180127043, 0.6914942959145898}}, "Calibrator" -> 
          MachineLearning`CalibratorFunction[
           "TemperatureScaling", <|"Theta" -> 2.413021950167393|>], "Method" -> 
          "RandomForest", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "FeatureFraction" -> <|
             "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
            "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "Implementation" -> <|
             "Value" -> "Default", "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "RandomForest", 
               "Options" -> <|
                "FeatureFraction" -> <|"Value" -> Automatic|>, 
                 "LeafSize" -> <|"Value" -> Automatic|>, 
                 "TreeNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "Implementation" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
               Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
               0.5, "Implementation" -> Automatic}, "ModelUtility" -> 
             Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
          "InputDimension" -> 6, "OutputDimension" -> 1|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {35.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.1157, 
          "MaxTrainingMemory" -> 499456, "DataMemory" -> 142528, 
          "FunctionMemory" -> 263336, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 21.128346`8.07744048374102}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"7", "\<\"SupportVectorMachine[1,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.558890425531917`}, 
                    "StandardDeviation" -> {14.231309703345556`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.9935232134894427, 
                    0.05790466346643846, -0.09776847245635778}, {
                    0.1125684463409673, 
                    0.6188645136749821, -0.7773899012736196}, \
{-0.015490937543992968`, 0.7833605578931494, 0.6213744983432633}}, 
                    "Precisions" -> {0.9877134325391217, 10.804600642121471`, 
                    15.644875794114672`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037915272`, 0.05683790442600247, 
                    0.05944549517601183}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037917492`, 0.056837904426002527`,
                     0.05944549517601176}, 
                    "StandardDeviation" -> {1.000144225582724, 
                    0.29479625313041863`, 0.2858635350927444}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037917492`, 0.056837904426002527`,
                     0.05944549517601176}, 
                    "StandardDeviation" -> {1.000144225582724, 
                    0.29479625313041863`, 0.2858635350927444}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.054434, "MaxTrainingMemory" -> 295672,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 21.187218`8.078648918596576}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.2933471332274666`, \
-2.2933471332274666`, -2.2761947583636015`, -2.1684082886169747`, \
-2.0941346040075177`, -2.0692217346089716`, -2.019327516037719, \
-1.9407412371547892`, -1.8916872856928268`, -1.7478047565982726`, \
-1.709100437312944}, "LeftBoundary" -> -2.2761947583636015`, "LeftScale" -> 
                    0.008576187431932558, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.062990325486324, 0.19073110853600886`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.558890425531917`}, 
                 "StandardDeviation" -> {14.231309703345556`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5757575757575758, "survived" -> 
            0.42424242424242425`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "SVMParameters" -> <|
           "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
            0.0694112151988088, "SoftMarginParameter" -> 1., 
            "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
            "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
            "KernelCacheSize" -> 100|>, 
          "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1: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
zXprbtyg8K7PY62BfxI8LeaiNUi6beythp8Y9vzZjP7l2SYgArx1Xtph+GGG
Yz0L8v89Jui/tr6V6o/1V9khvtDLHZPAh9edeI9+19BP1YE+dbeuf4P8+J5l
k5M81U26tUfyQw99DdunoYeJOy2rlan6FkRd3YT56PlKbDf4/FjtccDTq5UU
GpZjPUHhL0uttL1B4XOYG+dNKfyfyVxjxPfq1nVD/OwD8pV/fCaIazfsHVCv
gnViNeiXHou7q1GvTz3RrZjXzh/3lyL/N9zey5aILJNMGj+/4LyKGh07kR+G
XKcJnLf/v+weLUr/zX7W7NspfxtsSX7yPm+SOL2cVIr8ew6LpaO+l+g230F8
srVKHvP0VMm+CvAR94+SssyZIO2sM23hh6d7l3mhN7UdgoLQ2zkpqVj4A/Hu
NRfwSjb66uq/Osgm3r+0ef30zS3JQOq8Ux8F1Ocpv6VTmnf3pPAH7aNLgece
krtydH6A/Kp6Ux7xq0fIynAq/vn5oWDwf23Ol+dM4Vexs55DvXzjtFrucDWT
qQed53HeToFPZvDPBcN1Etjfmnx8VuG8ipWOEj+ofjejc9ETXZgh5Ad3TCCf
sg45XPDPGEJjL87rd0TmOfg0OaeOYR/43sX3ySyyj+hNyRdBfjabh2+Av00+
fluN+fLGUWN1OIXn9SyVA3//69dUL+T3kaVr77idos77vNvsMPYTxa3h34So
+p6tOrSAfvlyQkAf/NVeO4vcGWNUL9llyYr4FkMXAuG3RO/ac+Cz4OHpif1z
eIr4i/p+vLFqZfBIH0nPlfHNiTpv7TYPc+hzZaSJDvRZuUuo+CB13reP1ZsX
qfNeMbEQvRP2jyBqBV+jfwM5nw+iv5akb5rDTzoCxKbQXx7WG3bT9odt3NnL
vH8JK0n2HZin2XK7haGHOBOBFPSjZf0SP+bLo/PH23Fe+XV1d1+/6SUl59bc
Rb0EJq1nMV9+KV97hP3nAd+6LhcKnzxwdRjxlSPG/j2mGyZbVm7ox/6z+31D
P/irM5u6oV6qdqZ3fOD/VYW0/fbpGZJ9wmGO3KQc5oL44v3c3Ijvd6ZrBPET
nyswYj85OGHOC/w31uLNAhatZM3u7W3Yz5s/XZmH3ly81ixJUvl/e7Q5Ef52
nnu6BvUdbxA75vvfApHioyOM85I6zs3oL0Nb8SnUd6P8UDD4xBdcTkD/mgte
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
5MzoI/jJ/wBJy+V0
              "], "supportVectorCoefficients" -> CompressedData["
1:eJxTTMoPSmVkYGCwBxFg8MEeF131W6BG/NEFDPFvbd+U9Zje49Q3XGluj+NM
+6P3DLg7Jum/P7v9zLMBd8cojZ9ecGa32NSPj2luT8z1zZm/La4NuH/pTbPc
c+tZEXeGoLpgJc5WPjdE+NxTs1AVc38N4++nNf1FN/bJs18XaG7PcKUPBC/W
+WR0e3+qu/Q1n4cvB9w9ozRp9JHnispmYTfpbq+LHqvj1X/7cMpnuO2Zo7nh
9oCHD71pAIQc9Kg=
              "], "rho" -> 0.20245136544239065`|>}, 
          "ProbabilityCoefficients" -> {{-3.177443742752075, 
           0.07608015835285187}}, "MulticlassStrategy" -> "OneVersusOne", 
          "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "SupportVectorMachine", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "KernelType" -> <|
             "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
            "GammaScalingParameter" -> <|
             "Value" -> 0.0694112151988088, "Options" -> <||>|>, 
            "SoftMarginParameter" -> <|"Value" -> 1., "Options" -> <||>|>, 
            "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
            "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
            "MulticlassStrategy" -> <|
             "Value" -> "OneVersusOne", "Options" -> <||>|>, 
            "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
            "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
          Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
          "PreprocessingTime" -> 0.119467`5.528792951523864, "LossName" -> 
          "MeanCrossEntropy", "BestModelInformation" -> 
          Dataset[<|
            "MeanCrossEntropy" -> 
             Around[0.46248824713099435`, 0.044757277562127676`], "Accuracy" -> 
             Around[0.8092663298898266, 0.02334077752121926], 
             "EvaluationTime" -> 5.77755266588891*^-6, "TestSize" -> 558, 
             "ModelMemory" -> 23016, "ModelUtility" -> 0.05881337363453609, 
             "Round" -> 2, "Iteration" -> 7, 
             "Time" -> {
              0.247962`5.845930124101224, 0.272336`5.88665004786545}, 
             "TrainingSize" -> 100, "TrainingTime" -> 0.015848931924611134`, 
             "TrainingMemory" -> 136024, "ExperimentCount" -> 1, 
             "MeanCrossEntropyHistory" -> {
               Around[0.46248824713099435`, 0.03164817447162899]}, 
             "AccuracyHistory" -> {
               Around[0.8092663298898266, 0.016504422063420673`]}, 
             "IterationHistory" -> {7}, 
             "TimeHistory" -> {{
               0.247962`5.845930124101224, 0.272336`5.88665004786545}}, 
             "Configuration" -> {
              "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
               "GammaScalingParameter" -> 0.0694112151988088, 
               "SoftMarginParameter" -> 1., "PolynomialDegree" -> 3, 
               "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
               "Shrinking" -> True, "KernelCacheSize" -> 100}, 
             "FinalTrainingSize" -> 658|>, 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
          "Configurations" -> 
          Dataset[<|<|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.04666752359332513|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8923592697965256, 0.046199045605494246`], 
                  "Accuracy" -> 
                  Around[0.5176378664245416, 0.0351806665919262], 
                  "EvaluationTime" -> 5.078597455720585*^-6, "TestSize" -> 
                  400, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5895650626965838, "Round" -> 1, 
                  "Iteration" -> 1, 
                  "Time" -> {
                   0.136354`5.586212876165603, 0.152109`5.633699904687046}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 102992, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.8923592697965256, 0.03266765843199155]}, 
                  "AccuracyHistory" -> {
                    Around[0.5176378664245416, 0.02487648791381404]}, 
                  "IterationHistory" -> {1}, 
                  "TimeHistory" -> {{
                    0.136354`5.586212876165603, 
                    0.152109`5.633699904687046}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8280821475727389, 0.039998707965639556`], 
                  "Accuracy" -> 
                  Around[0.5619735748159513, 0.029314148584585115`], 
                  "EvaluationTime" -> 8.152849114474134*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.5141219658864852, "Round" -> 2, 
                  "Iteration" -> 16, 
                  "Time" -> {
                   0.435268`6.090301733398, 0.460331`6.114615216001519}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 134984, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8280821475727389, 0.028283357641204102`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5619735748159513, 0.020728233248870166`]}, 
                  "IterationHistory" -> {16}, 
                  "TimeHistory" -> {{
                    0.435268`6.090301733398, 0.460331`6.114615216001519}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5238422066317181, 0.0988782233490733], "Accuracy" -> 
                  Around[0.7973838466741238, 0.06972148484028066], 
                  "EvaluationTime" -> 0.000013969173919801435`, "TestSize" -> 
                  132., "ModelMemory" -> 84728., 
                  "ModelUtility" -> -0.08364374160097732, "Round" -> 3, 
                  "Iteration" -> 32, 
                  "Time" -> {
                   0.957399`6.43263796302303, 0.981315`6.443353430848146}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 
                  1.2160826666666665`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6181813623603253, 0.08453993655430905], 
                    Around[0.4295030509031109, 0.03161807774795016]}, 
                  "AccuracyHistory" -> {
                    Around[0.7317421027116093, 0.03840477915008069], 
                    Around[0.8630255906366382, 0.029711619352999208`]}, 
                  "IterationHistory" -> {30, 32}, 
                  "TimeHistory" -> {{
                    0.90933`6.410266512769264, 0.932457`6.421173807066989}, {
                    0.957399`6.43263796302303, 
                    0.981315`6.443353430848146}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.000013969173919801435`, 
                 "MeanCrossEntropy" -> 
                 Around[0.5238422066317181, 0.0988782233490733], 
                 "ModelMemory" -> 84728., "TrainingMemory" -> 
                 1.2160826666666665`*^6, "TrainingTime" -> 
                 0.034959745308926274`|>, "Index" -> 1|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.007642779509540398|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8147757605173402, 0.036208815311699775`], 
                  "Accuracy" -> 
                  Around[0.5771286050001284, 0.027150235486122665`], 
                  "EvaluationTime" -> 4.366953114170442*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.4971568339209681, "Round" -> 1, 
                  "Iteration" -> 3, 
                  "Time" -> {
                   0.171476`5.68574833771765, 0.191001`5.732580634530845}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 111680, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8147757605173402, 0.025603498845634204`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5771286050001284, 0.019198115623048975`]}, 
                  "IterationHistory" -> {3}, 
                  "TimeHistory" -> {{
                    0.171476`5.68574833771765, 
                    0.191001`5.732580634530845}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8048623583020844, 0.04110563760883166], "Accuracy" -> 
                  Around[0.5619735748159513, 0.029314148584585115`], 
                  "EvaluationTime" -> 5.105473085900257*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.48622919386977603`, "Round" -> 2, 
                  "Iteration" -> 17, 
                  "Time" -> {
                   0.461401`6.115623524933779, 0.483812`6.136221629471297}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134768, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8048623583020844, 0.029066075098201645`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5619735748159513, 0.020728233248870166`]}, 
                  "IterationHistory" -> {17}, 
                  "TimeHistory" -> {{
                    0.461401`6.115623524933779, 
                    0.483812`6.136221629471297}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5011312929101895, 0.1092309369287355], "Accuracy" -> 
                  Around[0.8086546525515037, 0.044043006527032795`], 
                  "EvaluationTime" -> 8.316549674870251*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 83773.33333333333, 
                  "ModelUtility" -> -0.04493559181751361, "Round" -> 3, 
                  "Iteration" -> 33, 
                  "Time" -> {
                   0.982854`6.444034002982653, 1.004399`6.4534512651446825}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.023396783926626794`, "TrainingMemory" -> 
                  1.2015813333333333`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6032723924018425, 0.0854309209715787], 
                    Around[0.3989901934185366, 0.0434258825793817]}, 
                  "AccuracyHistory" -> {
                    Around[0.7715253696225539, 0.03630832591422457], 
                    Around[0.8457839354804536, 0.03126020849607563]}, 
                  "IterationHistory" -> {29, 33}, 
                  "TimeHistory" -> {{
                    0.880226`6.396139186045736, 0.908227`6.409739402068093}, {
                    0.982854`6.444034002982653, 
                    1.004399`6.4534512651446825}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.316549674870251*^-6, "MeanCrossEntropy" -> 
                 Around[0.5011312929101895, 0.1092309369287355], 
                 "ModelMemory" -> 83773.33333333333, "TrainingMemory" -> 
                 1.2015813333333333`*^6, "TrainingTime" -> 
                 0.0418574743151288|>, "Index" -> 2|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.17222802963895698`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7503039628295906, 0.033127997753802756`], 
                  "Accuracy" -> 
                  Around[0.5771286050001284, 0.027150235486122665`], 
                  "EvaluationTime" -> 5.01673482729195*^-6, "TestSize" -> 643,
                   "ModelMemory" -> 13032, 
                  "ModelUtility" -> -0.41466532597711414`, "Round" -> 1, 
                  "Iteration" -> 12, 
                  "Time" -> {
                   0.351431`5.997385061796753, 0.369597`6.019273430912186}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109488, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7503039628295906, 0.023425031858846642`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5771286050001284, 0.019198115623048975`]}, 
                  "IterationHistory" -> {12}, 
                  "TimeHistory" -> {{
                    0.351431`5.997385061796753, 
                    0.369597`6.019273430912186}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4860296556281253, 0.0409825323888814], "Accuracy" -> 
                  Around[0.7788641319185835, 0.024653717111631303`], 
                  "EvaluationTime" -> 5.252210370016134*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, "ModelUtility" -> 
                  0.01161136840004251, "Round" -> 2, "Iteration" -> 15, 
                  "Time" -> {
                   0.41198`6.066421126760983, 0.434201`6.089235812830823}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 135688, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.4860296556281253, 0.028979026562375356`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7788641319185835, 0.017432810551089317`]}, 
                  "IterationHistory" -> {15}, 
                  "TimeHistory" -> {{
                    0.41198`6.066421126760983, 
                    0.434201`6.089235812830823}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.650285648588729, 0.19366862952154468`], "Accuracy" -> 
                  Around[0.8152591076270403, 0.04546673860664453], 
                  "EvaluationTime" -> 8.621048801993047*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 58685.33333333333, 
                  "ModelUtility" -> -0.32066584788177577`, "Round" -> 3, 
                  "Iteration" -> 37, 
                  "Time" -> {
                   1.067821`6.480043451031573, 1.086857`6.4877174003271465}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 870520., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.8288402860067241, 0.1274810357145615], 
                    Around[0.47173101117073374`, 0.09275973329977655]}, 
                  "AccuracyHistory" -> {
                    Around[0.7762252345391701, 0.036137059871530465`], 
                    Around[0.8542929807149106, 0.030515486750531083`]}, 
                  "IterationHistory" -> {19, 37}, 
                  "TimeHistory" -> {{
                    0.506613`6.156221323356003, 0.524966`6.171676170253277}, {
                    1.067821`6.480043451031573, 
                    1.086857`6.4877174003271465}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.621048801993047*^-6, "MeanCrossEntropy" -> 
                 Around[0.650285648588729, 0.19366862952154468`], 
                 "ModelMemory" -> 58685.33333333333, "TrainingMemory" -> 
                 870520., "TrainingTime" -> 0.03241548454834875|>, "Index" -> 
               3|>, <|"Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.0694112151988088|>,
                  "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7137108109401157, 0.01776844851447472], "Accuracy" -> 
                  Around[0.6243511339103729, 0.028495568985611282`], 
                  "EvaluationTime" -> 5.389083241342996*^-6, "TestSize" -> 
                  643., "ModelMemory" -> 13117.333333333332`, 
                  "ModelUtility" -> -0.3608397997562901, "Round" -> 1, 
                  "Iteration" -> 14, 
                  "Time" -> {
                   0.390204`6.042836710550943, 0.410628`6.06499355331596}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.010863084705980556`, "TrainingMemory" -> 
                  109586.66666666666`, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.712541860721277, 0.023724735184437226`], 
                    Around[0.7148797611589544, 0.02668305552040219]}, 
                  "AccuracyHistory" -> {
                    Around[0.5991840621360538, 0.019132447868246267`], 
                    Around[0.6495182056846919, 0.01867694168217528]}, 
                  "IterationHistory" -> {6, 14}, 
                  "TimeHistory" -> {{
                    0.230148`5.813552198697122, 0.246913`5.844088949688071}, {
                    0.390204`6.042836710550943, 
                    0.410628`6.06499355331596}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.46248824713099435`, 0.044757277562127676`], 
                  "Accuracy" -> 
                  Around[0.8092663298898266, 0.02334077752121926], 
                  "EvaluationTime" -> 5.77755266588891*^-6, "TestSize" -> 558,
                   "ModelMemory" -> 23016, "ModelUtility" -> 
                  0.05881337363453609, "Round" -> 2, "Iteration" -> 7, 
                  "Time" -> {
                   0.247962`5.845930124101224, 0.272336`5.88665004786545}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 136024, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.46248824713099435`, 0.03164817447162899]}, 
                  "AccuracyHistory" -> {
                    Around[0.8092663298898266, 0.016504422063420673`]}, 
                  "IterationHistory" -> {7}, 
                  "TimeHistory" -> {{
                    0.247962`5.845930124101224, 
                    0.272336`5.88665004786545}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6214557595039615, 0.1585151328604224], "Accuracy" -> 
                  Around[0.8130913247510416, 0.04368983519957752], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 56637.33333333333, 
                  "ModelUtility" -> -0.2672166607975034, "Round" -> 3, 
                  "Iteration" -> 36, 
                  "Time" -> {
                   1.048839`6.472253821272097, 1.066452`6.479486306535748}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 839920., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.7629201889107877, 0.1163669153021468], 
                    Around[0.4799913300971353, 0.09066205584678681]}, 
                  "AccuracyHistory" -> {
                    Around[0.7762252345391701, 0.036137059871530465`], 
                    Around[0.8499574149629131, 0.03081032931439177]}, 
                  "IterationHistory" -> {20, 36}, 
                  "TimeHistory" -> {{
                    0.526154`6.1726578698959225, 
                    0.543848`6.187022529250513}, {
                    1.048839`6.472253821272097, 
                    1.066452`6.479486306535748}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.6214557595039615, 0.1585151328604224], 
                 "ModelMemory" -> 56637.33333333333, "TrainingMemory" -> 
                 839920., "TrainingTime" -> 0.03068931513638764|>, "Index" -> 
               4|>, <|"Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.02032890196258133|>, 
                 "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7241603405681942, 0.03600855804052743], "Accuracy" -> 
                  Around[0.6075653887143849, 0.026950070133640154`], 
                  "EvaluationTime" -> 4.8478865344213365`*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.3803037419018387, "Round" -> 1, 
                  "Iteration" -> 5, 
                  "Time" -> {
                   0.211392`5.776633541171274, 0.229095`5.811560604308653}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109952, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7241603405681942, 0.025461895571206324`]}, 
                  "AccuracyHistory" -> {
                    Around[0.6075653887143849, 0.019056577344949997`]}, 
                  "IterationHistory" -> {5}, 
                  "TimeHistory" -> {{
                    0.211392`5.776633541171274, 
                    0.229095`5.811560604308653}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4886295504744365, 0.04797015749648924], "Accuracy" -> 
                  Around[0.8066460518447135, 0.023514427633351875`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, "ModelUtility" -> 
                  0.0035556626056981733`, "Round" -> 2, "Iteration" -> 11, 
                  "Time" -> {
                   0.332612`5.9734829071701245, 0.35038`5.996084301786727}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 133400, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.4886295504744365, 0.03392002366035424]}, 
                  "AccuracyHistory" -> {
                    Around[0.8066460518447135, 0.01662721123526345]}, 
                  "IterationHistory" -> {11}, 
                  "TimeHistory" -> {{
                    0.332612`5.9734829071701245, 
                    0.35038`5.996084301786727}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6288478912343822, 0.14551185356890356`], 
                  "Accuracy" -> 
                  Around[0.8130913247510416, 0.04368983519957752], 
                  "EvaluationTime" -> 0.00001400736196621723, "TestSize" -> 
                  132., "ModelMemory" -> 56637.33333333333, 
                  "ModelUtility" -> -0.2745257420403261, "Round" -> 3, 
                  "Iteration" -> 35, 
                  "Time" -> {
                   1.029354`6.464109749995569, 1.047449`6.471677879971744}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 835440., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.7552015267988023, 0.11472006949510034`], 
                    Around[0.5024942556699622, 0.09284304301310141]}, 
                  "AccuracyHistory" -> {
                    Around[0.7762252345391701, 0.036137059871530465`], 
                    Around[0.8499574149629131, 0.03081032931439177]}, 
                  "IterationHistory" -> {18, 35}, 
                  "TimeHistory" -> {{
                    0.484857`6.13715866350387, 0.505574`6.1553297250146235}, {
                    1.029354`6.464109749995569, 
                    1.047449`6.471677879971744}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.00001400736196621723, 
                 "MeanCrossEntropy" -> 
                 Around[0.6288478912343822, 0.14551185356890356`], 
                 "ModelMemory" -> 56637.33333333333, "TrainingMemory" -> 
                 835440., "TrainingTime" -> 0.03241548454834875|>, "Index" -> 
               5|>, <|"Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.10989573329233468`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8121493528625066, 0.03588982996482153], "Accuracy" -> 
                  Around[0.5771286050001284, 0.027150235486122665`], 
                  "EvaluationTime" -> 5.472630629931157*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.493878782708021, "Round" -> 1, 
                  "Iteration" -> 13, 
                  "Time" -> {
                   0.370686`6.020551177481938, 0.389143`6.041654216155063}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109768, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8121493528625066, 0.025377942143757454`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5771286050001284, 0.019198115623048975`]}, 
                  "IterationHistory" -> {13}, 
                  "TimeHistory" -> {{
                    0.370686`6.020551177481938, 
                    0.389143`6.041654216155063}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.781198029740119, 0.03835971580437785], "Accuracy" -> 
                  Around[0.5619735748159513, 0.029314148584585115`], 
                  "EvaluationTime" -> 5.153304712744605*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.4559969084445735, "Round" -> 2, 
                  "Iteration" -> 25, 
                  "Time" -> {
                   0.621048`6.244670161030885, 0.649893`6.264386852700704}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.025118864315095794`, "TrainingMemory" -> 170392, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.781198029740119, 0.027124415169664354`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5619735748159513, 0.020728233248870166`]}, 
                  "IterationHistory" -> {25}, 
                  "TimeHistory" -> {{
                    0.621048`6.244670161030885, 
                    0.649893`6.264386852700704}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5758231450330022, 0.14757511146095], "Accuracy" -> 
                  Around[0.7994135448379952, 0.05026244808331711], 
                  "EvaluationTime" -> 0.000010379345348321636`, "TestSize" -> 
                  132., "ModelMemory" -> 81314.66666666666, 
                  "ModelUtility" -> -0.19118437402401356`, "Round" -> 3, 
                  "Iteration" -> 38, 
                  "Time" -> {
                   1.088337`6.488308387551644, 1.110323`6.496994329680761}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 
                  1.1958506666666665`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.7104320740111222, 0.1090348020250935], 
                    Around[0.44121421605488226`, 0.07270167478552579]}, 
                  "AccuracyHistory" -> {
                    Around[0.755275190109868, 0.03722520764914193], 
                    Around[0.8435518995661224, 0.0314955060968781]}, 
                  "IterationHistory" -> {31, 38}, 
                  "TimeHistory" -> {{
                    0.933728`6.421765375825549, 0.956313`6.432145053057499}, {
                    1.088337`6.488308387551644, 
                    1.110323`6.496994329680761}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.000010379345348321636`, 
                 "MeanCrossEntropy" -> 
                 Around[0.5758231450330022, 0.14757511146095], "ModelMemory" -> 
                 81314.66666666666, "TrainingMemory" -> 
                 1.1958506666666665`*^6, "TrainingTime" -> 
                 0.03754899942686794|>, "Index" -> 6|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.2187574552805577|>,
                  "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6686022200339065, 0.05520604813871034], "Accuracy" -> 
                  Around[0.7472611978825374, 0.024017376340644856`], 
                  "EvaluationTime" -> 5.177045967375583*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12648, 
                  "ModelUtility" -> -0.30696340672453826`, "Round" -> 1, 
                  "Iteration" -> 2, 
                  "Time" -> {
                   0.153132`5.636610948212831, 0.170458`5.683162382013793}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 108984, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6686022200339065, 0.03903657100139306]}, 
                  "AccuracyHistory" -> {
                    Around[0.7472611978825374, 0.016982849676779325`]}, 
                  "IterationHistory" -> {2}, 
                  "TimeHistory" -> {{
                    0.153132`5.636610948212831, 
                    0.170458`5.683162382013793}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5377901218223379, 0.046224068811514425`], 
                  "Accuracy" -> 
                  Around[0.8079853958104883, 0.02339744533085409], 
                  "EvaluationTime" -> 7.934874635231215*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 20456, 
                  "ModelUtility" -> -0.08990801222474709, "Round" -> 2, 
                  "Iteration" -> 8, 
                  "Time" -> {
                   0.273447`5.8884181565674165, 0.292056`5.917011126311453}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 130272, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5377901218223379, 0.03268535251065544]}, 
                  "AccuracyHistory" -> {
                    Around[0.8079853958104883, 0.01654449225588845]}, 
                  "IterationHistory" -> {8}, 
                  "TimeHistory" -> {{
                    0.273447`5.8884181565674165, 
                    0.292056`5.917011126311453}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6417065163292482, 0.19575480678141904`], 
                  "Accuracy" -> 
                  Around[0.8185457572518611, 0.05418216738005195], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 50493.33333333333, 
                  "ModelUtility" -> -0.3087492186691966, "Round" -> 3, 
                  "Iteration" -> 34, 
                  "Time" -> {
                   1.00584`6.454073896041422, 1.027953`6.463518251825192}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.01721682899963702, "TrainingMemory" -> 634048., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.8231563595126478, 0.12469580995384139`], 
                    Around[0.46025667314584867`, 0.09090409285347295]}, 
                  "AccuracyHistory" -> {
                    Around[0.7694265516543539, 0.03649957617839315], 
                    Around[0.8676649628493682, 0.029343577905735902`]}, 
                  "IterationHistory" -> {24, 34}, 
                  "TimeHistory" -> {{
                    0.601961`6.231113348485594, 0.619987`6.243927576724137}, {
                    1.00584`6.454073896041422, 
                    1.027953`6.463518251825192}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.6417065163292482, 0.19575480678141904`], 
                 "ModelMemory" -> 50493.33333333333, "TrainingMemory" -> 
                 634048., "TrainingTime" -> 0.03412665617452182|>, "Index" -> 
               7|>, <|"Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11963790958285683`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6619104762798843, 0.033764657242548936`], 
                  "Accuracy" -> 
                  Around[0.67135987174626, 0.026776867553081715`], 
                  "EvaluationTime" -> 6.979621153134094*^-6, "TestSize" -> 
                  600, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.29067592953707455`, "Round" -> 1, 
                  "Iteration" -> 10, 
                  "Time" -> {
                   0.313006`5.947097656096465, 0.33145`5.9719630168495215}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 108880, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6619104762798843, 0.023875218100645825`]}, 
                  "AccuracyHistory" -> {
                    Around[0.67135987174626, 0.018934104625718116`]}, 
                  "IterationHistory" -> {10}, 
                  "TimeHistory" -> {{
                    0.313006`5.947097656096465, 
                    0.33145`5.9719630168495215}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5423501359736701, 0.05059180329584774], "Accuracy" -> 
                  Around[0.7864456397774466, 0.024304045913295082`], 
                  "EvaluationTime" -> 5.067479074184996*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.09979181306301776, "Round" -> 2, 
                  "Iteration" -> 21, 
                  "Time" -> {
                   0.544917`6.187875350475188, 0.561087`6.200575200011459}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 128864, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5423501359736701, 0.03577380718294986]}, 
                  "AccuracyHistory" -> {
                    Around[0.7864456397774466, 0.017185555675560148`]}, 
                  "IterationHistory" -> {21}, 
                  "TimeHistory" -> {{
                    0.544917`6.187875350475188, 
                    0.561087`6.200575200011459}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6270532075583647, 0.1866428731233213], "Accuracy" -> 
                  Around[0.8115215561198852, 0.04876687568352991], 
                  "EvaluationTime" -> 8.208496048851409*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 54589.33333333333, 
                  "ModelUtility" -> -0.28425329532288823`, "Round" -> 3, 
                  "Iteration" -> 39, 
                  "Time" -> {
                   1.111784`6.497565413187982, 1.131968`6.505379143298884}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 
                  758165.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.799652169823581, 0.12212453591075423`], 
                    Around[0.45445424529314843`, 0.08731694119169887]}, 
                  "AccuracyHistory" -> {
                    Around[0.7687501315248597, 0.03655814936133459], 
                    Around[0.8542929807149106, 0.030515486750531083`]}, 
                  "IterationHistory" -> {26, 39}, 
                  "TimeHistory" -> {{
                    0.817481`6.364022661016615, 0.836054`6.373779322543408}, {
                    1.111784`6.497565413187982, 
                    1.131968`6.505379143298884}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.208496048851409*^-6, "MeanCrossEntropy" -> 
                 Around[0.6270532075583647, 0.1866428731233213], 
                 "ModelMemory" -> 54589.33333333333, "TrainingMemory" -> 
                 758165.3333333333, "TrainingTime" -> 0.03241548454834875|>, 
               "Index" -> 8|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11393838293550193`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7683808109085966, 0.033845114158427454`], 
                  "Accuracy" -> 
                  Around[0.5771286050001284, 0.027150235486122665`], 
                  "EvaluationTime" -> 4.527264254254074*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 13032, 
                  "ModelUtility" -> -0.4384514692793582, "Round" -> 1, 
                  "Iteration" -> 4, 
                  "Time" -> {
                   0.192015`5.734880150130629, 0.210402`5.774594857232595}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110800, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7683808109085966, 0.02393210973145688]}, 
                  "AccuracyHistory" -> {
                    Around[0.5771286050001284, 0.019198115623048975`]}, 
                  "IterationHistory" -> {4}, 
                  "TimeHistory" -> {{
                    0.192015`5.734880150130629, 
                    0.210402`5.774594857232595}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5138150371092944, 0.04119811175834394], "Accuracy" -> 
                  Around[0.767111922257864, 0.025130730011864184`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.04316771024828647, "Round" -> 2, 
                  "Iteration" -> 23, 
                  "Time" -> {
                   0.583481`6.217571712095862, 0.60094`6.230376106148103}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 133704, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5138150371092944, 0.029131464196406234`]}, 
                  "AccuracyHistory" -> {
                    Around[0.767111922257864, 0.017770109607557448`]}, 
                  "IterationHistory" -> {23}, 
                  "TimeHistory" -> {{
                    0.583481`6.217571712095862, 
                    0.60094`6.230376106148103}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6965250276658159, 0.20915831651793207`], 
                  "Accuracy" -> 
                  Around[0.8152591076270403, 0.04546673860664453], 
                  "EvaluationTime" -> 8.316549674870251*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 62781.33333333333, 
                  "ModelUtility" -> -0.38982360537481586`, "Round" -> 3, 
                  "Iteration" -> 40, 
                  "Time" -> {
                   1.133505`6.505968433677625, 1.153535`6.513575769705717}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 
                  909813.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.8891806783152684, 0.13955488816286324`], 
                    Around[0.5038693770163636, 0.10027090102366025`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7762252345391701, 0.036137059871530465`], 
                    Around[0.8542929807149106, 0.030515486750531083`]}, 
                  "IterationHistory" -> {27, 40}, 
                  "TimeHistory" -> {{
                    0.837114`6.374329598681135, 0.856666`6.384356524135113}, {
                    1.133505`6.505968433677625, 
                    1.153535`6.513575769705717}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.316549674870251*^-6, "MeanCrossEntropy" -> 
                 Around[0.6965250276658159, 0.20915831651793207`], 
                 "ModelMemory" -> 62781.33333333333, "TrainingMemory" -> 
                 909813.3333333333, "TrainingTime" -> 0.03241548454834875|>, 
               "Index" -> 9|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.14750911374959483`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8100053869937186, 0.03576221584140426], "Accuracy" -> 
                  Around[0.5771286050001284, 0.027150235486122665`], 
                  "EvaluationTime" -> 4.340283726068392*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.49122737961737306`, "Round" -> 1, 
                  "Iteration" -> 9, 
                  "Time" -> {
                   0.293172`5.918667483250295, 0.311937`5.945611884581418}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110440, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8100053869937186, 0.025287705331713924`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5771286050001284, 0.019198115623048975`]}, 
                  "IterationHistory" -> {9}, 
                  "TimeHistory" -> {{
                    0.293172`5.918667483250295, 
                    0.311937`5.945611884581418}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7373360908394845, 0.03687737124510166], "Accuracy" -> 
                  Around[0.5619735748159513, 0.029314148584585115`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.3983923837937039, "Round" -> 2, 
                  "Iteration" -> 22, 
                  "Time" -> {
                   0.562123`6.20137634888094, 0.582449`6.216802897463133}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134816, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7373360908394845, 0.02607623927974518]}, 
                  "AccuracyHistory" -> {
                    Around[0.5619735748159513, 0.020728233248870166`]}, 
                  "IterationHistory" -> {22}, 
                  "TimeHistory" -> {{
                    0.562123`6.20137634888094, 
                    0.582449`6.216802897463133}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7974786995762615, 0.17781334660251566`], 
                  "Accuracy" -> 
                  Around[0.7539536956033014, 0.0528088401699419], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 77664, 
                  "ModelUtility" -> -0.5104803125364471, "Round" -> 3, 
                  "Iteration" -> 28, 
                  "Time" -> {
                   0.857762`6.384911796000724, 0.879163`6.395614395802718}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 1152456, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7974786995762615, 0.12573302316811277`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7539536956033014, 0.037341488990762464`]}, 
                  "IterationHistory" -> {28}, 
                  "TimeHistory" -> {{
                    0.857762`6.384911796000724, 
                    0.879163`6.395614395802718}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.7974786995762615, 0.17781334660251566`], 
                 "ModelMemory" -> 77664, "TrainingMemory" -> 1152456, 
                 "TrainingTime" -> 0.03754899942686794|>, "Index" -> 10|>|>, 
            TypeSystem`Assoc[
             TypeSystem`Struct[{"Value", "Options"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["SupportVectorMachine"]], 
               
               TypeSystem`Struct[{
                "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                 "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                 "Shrinking", "KernelCacheSize"}, {
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[
                    TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[TypeSystem`Boolean]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}]}]}], 
             
             TypeSystem`Struct[{
              "Experiments", "PredictedPerformances", "Index"}, {
               TypeSystem`Tuple[{
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], 1], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 1]}], 
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}]}], 
               
               TypeSystem`Struct[{
                "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                 "TrainingMemory", "TrainingTime"}, {
                 TypeSystem`Atom[Real], TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Atom[Integer]}], 10], <||>], 
          "TrainingSizes" -> {15, 100, 526}, "MaxTrainingSize" -> 658, 
          "PreprocessorEvaluationTime" -> 2.09375*^-6, "PreprocessorMemory" -> 
          97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
          "BaselineLogProbability" -> -0.6816244336247836, "VariableBudget" -> 
          True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
          "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
          "RoundPartitioning" -> 
          Dataset[{<|
             "TrainingSizes" -> 15, "TimeBudgets" -> 0.19599999999999995`, 
              "ElapsedTimes" -> 0.20234999999999997`, "ExperimentCounts" -> 
              11|>, <|"TrainingSizes" -> 100, "TimeBudgets" -> 
              0.27999999999999997`, "ElapsedTimes" -> 0.381834, 
              "ExperimentCounts" -> 10|>, <|
             "TrainingSizes" -> 526, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
              0.4002279999999999, "ExperimentCounts" -> 19|>}, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
               "ExperimentCounts"}, {
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 1.18759, 
          "MaxTrainingMemory" -> 1813088, "DataMemory" -> 160264, 
          "FunctionMemory" -> 398216, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 22.316777`8.101206456929177}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"8", "\<\"SupportVectorMachine[2,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.261651367781162`}, 
                    "StandardDeviation" -> {14.042240580737108`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.992164788105549, 
                    0.06742846544193268, -0.10517811222691302`}, {
                    0.12280610913382206`, 
                    0.6811346161226084, -0.7217854904879417}, \
{-0.02297156509432449, 0.7290466629562562, 0.6840784095624304}}, 
                    "Precisions" -> {0.9855656441608992, 11.456042233073418`, 
                    14.930669666510521`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037878895`, 0.061397174942719714`,
                     0.06324488727327626}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037875707`, 0.0613971749427198, 
                    0.06324488727327611}, 
                    "StandardDeviation" -> {0.9999729557086863, 
                    0.3011526209000622, 0.27977376215818966`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037875707`, 0.0613971749427198, 
                    0.06324488727327611}, 
                    "StandardDeviation" -> {0.9999729557086863, 
                    0.3011526209000622, 0.27977376215818966`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, 
                    "Values" -> {0.3333}, "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.062674, "MaxTrainingMemory" -> 295944,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 22.384285`8.102518209843389}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.2725195877762445`, \
-2.2725195877762445`, -2.261706339907868, -2.1998338442812932`, \
-2.0718255618046744`, -2.046659532957121, -2.0242371707761415`, \
-1.9285332427273778`, -1.8676514740543015`, -1.7400963033013326`, \
-1.7030079972892438`}, "LeftBoundary" -> -2.261706339907868, "LeftScale" -> 
                    0.005406623934188337, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[6.034821316462681, 0.1917406386633689], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.261651367781162`}, 
                 "StandardDeviation" -> {14.042240580737108`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.593939393939394, "survived" -> 
            0.40606060606060607`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "SVMParameters" -> <|
           "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
            0.04666752359332513, "SoftMarginParameter" -> 0.1, 
            "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
            "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
            "KernelCacheSize" -> 100|>, 
          "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJwkXHc8V+8XN1pGiAgNM6RSpIi4JDSQhDIiZRUpK1JJEilJoaGihcwkq77p
UpQtIXtm7y2E333f3z/8c17n9X7OeZ/5PPcjcuq8gQ0TAwMDH/VnGfW/PPWI
0w27GtKSRUHL4ko92bLlvvVNthqyslYqkXlzKFnE7OF66fdn8tqJzAmWkHZi
77tPxZOxreQV0Vs33K/VElvE1QRuL9aTlwpnTPZa/SYXE2w23KDkhUrYTVZS
8kv8XivOik6TmtrXYi5S8o5quyODKfktIboPlCn5aJeIngMBNUTLHG8sp1Ak
WdJuPCl8ZYgctttkDfmTgyNztyj59HmbZjVKPj7xk901Sn/INwsbNkr/z+xm
78KX3eTpBY89kLdUueocRMk/nlGfhH6hj0Z++yj9O6ebX8xviCTv7w953NbT
Tl6a/qYL+WBt6wjgPx+/JV+Jkt9vcuSZN6Wf34M/Dvj5HugnW5ozqCV9UEy8
ONVBHNMnt7hw55MbDbaFN1p2EGZ3Nklep+TV+LI2sVLyi03rnLn+/CK3j6w2
h3yTyn+bHCj5M8pMOZBv86ltBH7Wrc9UoT/t8mfF54sNpFLTy4vOFJ7pYn/x
QAqPPStHO43/rZFCACUv3nJSC/J5/678ZCypJC9lKX6yovwVqCT18Bblr9BT
6fLj0qGka0pNGOxfOeZ1AfaZM3zHWJabT+6+NHDAg8KzvUZJ7hyFZ/Vqvb1N
FJ6vx1cJ3KHkcw4HDAB/Y7OAoolvO/nZzS0Y9uFOFDsM+zvufiMPPC6h8s8P
UvZ0iKuyW0/5a7R39nfm4iB5xSPntimF52yW0393KDw/fmUaH6X40/9gpcg5
Sj977TJf4JGzqNQQudtIpiUeLDOj5MuTzS4Av+iy2CNilLzYsmRpD0r+dEPB
asi77XJQtTHsJDOZNp0Bnpp1uzTuUHi0yx9f3kPhKf+85OdtSv6gpEgE7BMX
rOqk2z9G6Ev4j8P+anpHJM5Q5/0Uru+C82roJO6/SskfEONPY6fkWSeGRHjb
8sm6pOp2d0pez4Kh/zwlb3OJ/wv8NZjxd/0VSl52/gwP8NzvtCvPNsogZeVn
V0I+aMT6uDMlz/a1qrKZknf4MauE834sds5HvIhn/f35N66fjIhk7EK8aMuX
2dyl8D8KI9zVKfx8rM3u4L8J475vSyl7hskszW3oaSQXR/Tvwb+VGy8+QTxe
HbGP3knZp0b+WrkDpX92dudx4GHdsqR6TOAdoShXXQ37tz22EYX9i08zDJhQ
8i7MHiaulLzyZKk2/Mu4fWPWf2HdZNCZx9Wwp/mysxHw704F43jE15RA+sxF
Sn7KjiUG+k0KxjM5TCeItddWX3Wjzuvs2X8A/Hcy5LJtoc4b1OqWjfNqDUjO
Qz9XzjDDU4tWcucm2afgc3FisEMApf+0lJsh+MNozrvxAiX/X8z2+/CXXFD4
JxOXRaLm461wSwr/6/MsHOBDUF3O8hmKz282jj49RNknqvhfAwtlH4s2319e
TvNEauziJvg3JrNuB/z7+Z5pIvxlcpBtixelP+tnUgXwaBBubUqVk+Qjw94H
dL5KqNFBfDkukXKC/d8GTW5Afsi5+iWvnsoPKevZs7dGfiOVkm71ngCfl1uJ
3qbwSPm+GYT9T39kPQn+nLvheA74xR6den09v558lhE9e4HSL5r+pgv5p8dM
8IYqpX+HFUe/EyWvIZNQDj6ofjnUttbXn7zLknUT5zWYZ+/1p/R3xYiHjFHn
fWersc8F+SfmyiXof7q/eUPVkTxyh6vXceBJS8i/GkDJL45pJs1S8pdfhT2F
/N16ZU74S9X1zsoPAa2kUr9jP/C8+XOcA3zb8XXFHPBYF+vOwf5lFht0YB/W
T8+U+3U6SZs59yj4a6PGMXP4K/y9wjn4a4XMvyjEu2pr4Ia/lH0OeXXJserW
ksuF3V+DD0FPa63cKfvfmuI7Aj5kGl9SvUzpj1OTLkd8VUbdUFHWKiBMoq5V
4bzjN0Qiwc+Bp97OPJQ9LZvdClBfLr4eb4H82bVNlb80hon0zt9K8Nfb3+8d
4C8dZ+ER+EuY/a6YNoVna6h6/HKKD8a6vtey+m+T811hyicp/Qekn2cEUvoV
UlwmTSn9zz3mHkB/WHTCDpy3Lyd59OrtdnL0CnM49N98tV8e+T9oZ6oYzmsT
s8YD/Nnrn78DePQyZLVclyyQ8vWb0j0peRPFI0+Rf8JfxjHDns9f9j3XpPD8
yj2pyUzhmZ3YOnjItY3Q4px7DvtwFvz66kbZp3uJmQjyw/6ZvZv9gIdFY4iu
X8pfn/Wt6CRjeO0KEY9ODDvZ7lH6D44NtiO/NT7OaMV5H7wTFa6k7N+kumpD
9INp4gtPsAzy+ax/0tRZSn/BZbfbrZT+48EpHxHv5fNS+sBf/5SQn5cfIpsr
eDqBX7KDJwP8TO2TNiYo/f4Rxg3IJ1dr55LBTznXK2mHtFvJEtWqg+DbTrdl
XuAb/+7SpXspe2apKFyAfu71np+A/3uFjl5RYTtpy3+R5qcJi7M+4vfz/lAJ
I0re1kTxBepp08kntbC/yjoRM8O+fjLPPU0bfAt7u+El/Gtwi0UD9lTOjbxx
i5JnNnu4C/IjrX2uHq/bySgDga1ulDxrfUU08tUBr9pc2KdP5tR5+GtQuGIA
+E3tXxTMnMoihIMNOFwp+Q7NDVrQ7/D5xwXof88TsBnx3u2knDRG2fPNiX28
O9/3kksHvVyAX8tH7yvivVFyNQsnhb8uScEN+c01LyUA+u+FPH3h4NRKyofL
XAd/npQubUF8OYo8GQKegAMjYsif+po+y2Af5RIl8eSyv4Q96/op5KtQCVdN
e8pflX5cr5CvQgNdgmHPgedXDkG+5Z5dkpJwJylf83vag9JfsUHVH/3SUeu0
89B/qz5jEfEl/KVSGvYJFmoXNNvZSEa5f4qFfsFdE/w2lP7TzUGnEI+cbr9c
IT/r8PYe5MXsubq1PzGr/TJv4wR/GJb+l+lEyT9VeukN/pDlkWdhz65X/vLA
Y7pzs+A+3mly8fwmbhcKz7Vc39c4r22cwif0S+a2sxthzyVLD2VLU/y/vzSx
lut+L6ldsSwN/lrlKX4c/vp1tT0Z8pmn5+ZvUvqP5UTT+B8LSv1Zu2SM0OJm
7gY/P17NE4a82ERMFvyVZxOpCf5PVRVzkZS/GiTVAtmXdpJLiOpXkD/5JFcU
/l3jcyYL/eeaDQ4ntSj51r1NtsIUnhq17h1y7I1kbK4cP/AsqGkZQ/89q3Xf
EO+71611CqTwXAjv3ozzerF9DHolxJCTzmtcAf7oLOtOgf58i8UjkLfbvkQR
/vVff1wG8fVVvpol8NdfooU34yjifa/8yS3o97L3HjKE/eXC9gz5gM8vj5pA
v0ZJrfSl723E4q4z45Bv8FhNoJ5q17Q3gQ9BUrx86DdmPl2g60VK4QexQeVn
ZPadG/9MKH52CzFvAj+/nrENO0LxM4RD99V+6ry8Z4/HbqbOq5xeeDTmVSNZ
M+ixGf1D6LhjM+RzRz3d6qh6oaAe0u1P6WcUcgmF/Su00z/cHlggyxoiOMDn
25oB+5H/JaJe3cF5ZznnPBCPjC5VSThv+8sdq/859hAiOjv/oP9JTGTvQj8p
ov9BFfzZ7XK3F/LRvNbZOO/EqH5SQ1g7yRuv5ww8PZ3pD1Dvbm/Uer+ewj/s
7r4e9t8zaEjzM0nuoXnZv8fkodSV5uhnenWXxyD/CC+7XypNye+f+bcO9fT0
7bMSkPcQX8/9hnWMyFs4shJ8UJ5arYD8xraYfwn8CVlxVxr9Q+vRH5nlFH/Y
1K02SW2rJFce0mBA/3n7uhEX9JtZe58fpOxjM5EidJ7S/4j35g2cd2mzr5yp
wAQxnP9rF+Lls5rrPfR700/z18K/9ssZO9FvX+V2S4C/PnBbezLbMeQwpQkP
In5NGb16Yc8t0+vjEL8zfDa/3Sj5esdb0ZD/xBe0bsqtllxdVGwIe75zLXuL
fubV8JuL0K/UKlGD8x5WzaqGPf0/PXXu1p8gBgZOfQB/TMKOq6D+1skQD2H/
zR6yfeCPQ4yPAPAXyJeKBu1rJPW7YoWBX3ppgqUrJd8roiqIerRnaeJd2P9H
x3UDyHvc8Epe2NZBtARnjqOeCjWENMA+B4+eKmOg7M9mafwbfBOS6/yAepf6
N72nQ7eMdOewE0N9t5T5OeFHyVdvXqeH/m1HwPdS5Adb9WQG1OutsYb5nKWt
5KVwwRzE16AExy7El/SJmQ/ID4btz9cgXuYythqi/4n36t48lzpC/j0Q9gz1
8Y7MaxnU6/nya+tQv+SPt1vAvzPP75//Q/m3v9rz4St1ZrX0u/a95hSeFaxJ
19APXGgrF+ul8Hhs6RL2pPS778pZhfNWJ6walehvIAUeGAZg/o0+sCIB8RIs
O/t3A3XeFEP7NtRHDlktH/DthEZtTfP+SpKb+NqH/ipAqnEeePxkHq8G3xZE
fS8Bj7n9zJZcCk/X3qqwRNO/ZOxc1hDyj3jZXBT4aaFaNYjzvlYN73Sn9K+2
TCmHf0nplb/atuaTZarlp+HfLy8Mx1EvEhh3c2J+sa7y1ca8c2z4vRbwOGbM
GhzzrSX9Th21xHlTDZJ0YH9bjg/XdlH4WwvZzTCfOjKl1YJvhZ9GSrQbO8g1
ItbdwF+058Zn8HNJ6bFg9FcR4f/OIH7/TD4Kgf1Xepk7kkEsannJHxQQXyc8
jingvEfV/zljXoiOfXcI9eLyYEQD8F/wvn65NP8dUeP4zQj1wvy0Q6E/8om2
Vzz8ZVrxtA/9ZFhnxiZ2ig/H5hi1D+mXETwiiaKoX6Ibf6wG/93ibl3HeQ9p
n+tE/fp0a8QP/hq+NTpVHpxHXp/X56HrXU6GPfLnf8NalZDv25OxB3xu1tMy
A/7vCeq5xUO9pFFawUrw55w200PU06VrvAVx3he8DwzQH+YtNfAD/hq35TpB
yq3khkuef4Hf+WLZXsjzlHy9hHw4dq7pCvoZc+aPXsAz65ZWHrvYTrZvkzZG
vDCKS1hhXlPTN1+nTtn/229FkSBK3p5x3T/or696zXiQmmc5xDblQH/ZkY+2
4H+LcIU07CPB+uQL7OPRcnx6E2WfbZWlb9nXLZKPppdbgA/XVladRb9XfclM
CfGevvnxLfSfz5RGVq+g5LXFWK8TZmPE1vbr7bBPiwHDIOr7vq0f78E+bMcm
zTHva3ssYQL+1c0Ep/XhQWKNRsYZ6O8O5vN3pOSDUj46oB79jPVjwrwj6n9t
GPzZ091979uSTjJuqU8/7Dk2QWainjb69EXBnuKJz1Ox33B50XER5w1a+nLF
p8haUiHtHjPiyzVRSR75P7fQYAj9eVKFdzbmkWDOD5KQZzSPlC3ibCTju7bL
A790ZXEm+md9x97dOG/MoKE3+oc/H1x54F/TXRNbGIr+EJu65G2RPwXKmcvA
n7Ot3QTO62jEWgX+byp3Owl5/qBDp68sGyQEPA+v8qTktY+y2yIfVp8Ua0C+
jXc9swz1MWBHVwbiS25pzeCHa++IZ6K9FqhHwVdyJYH/mrSUliGFP27sAzvw
bFZ8fgf2eaHpsvrIkS4ige/jGuh33yszQtdHgwUr5Ns76soHEF//2nctQv+5
EyPrB3o6CcMbavXIzxs5V/jYUvJtGzc8Ax5vIeY07H82JHALwT7xw/55OoJ/
SCFnDSvEo9i97nbE18bskA7E42C5iyrwj2kPqEP/6ort/zqiE4lZH/kB8M0q
oVsR8es8sek98s+O9yxc6K8eMUYc/Unlq2bVjOxjr0rJvKgfm+Cvzb550ciH
IcvUqzD/rg56dhn5TZcv9xIb+Lar6KeGZg6xIv9hCPp5iYZlp8EHU81sdRVK
/9Jg83rIV4Zw/ftK6RccuVd2VbuWVLPdQaKf+RuUkoN5MJT3olo7lZ+1Li3x
QL99b6OBGc6bd7Z3tjmph3h4rncd/Fu8Ywkr9jMnbNwvwJ7s4zHFkPfX3CAJ
PkvIbQ/NYJwmE9d+fIHz3uE+fwN4MsvslcDPI4lLWzUoPHeFZYW6KTxSr/Q2
jB9rJnpFW8XhrxV/a9PhrwsjRkKwf4GtlT34/23m5Gu6njZ3hA9e7yUFL7xa
AT48PdV1C/XFTcCNlYOyz6/QPcWOlPxEZ8x38OGgzPUKr5szpNqFuRDk/x+6
RtmI93alc9thn2eb9koin1jn3uOG/gpl/T2K0e3k2I7pNPQPRaLb5OAvHU3z
UNSXn71Shsj/Luua4+Hf304b+qJn28l6t7YN4ENQqDIP+nP3Nssn6Id5hM50
Yp+29cqsGz3PapkkKv1pJ8+WxeTCv8uIkFrkK5takSd7KPy55TlJqI8lYVqX
IB/KwFCzi6+THC++NYN68fqfLwvm31d8EfLAc9RTehr5P19kmOZnp075aa6K
UeK8q7A18smbX1vqkE+0ZCzaYU/23RN/z2J+dBflAf632yc9Xv2tIwQ3OPTA
Pvbfg7NwXkM9Yxb4y+kymzX2Y3Fymm7rKL6tHVieYv5vkkwYkryPfvXzyNFm
nJe3rVUU9ow4ZM+IfqOV+fHbbZS85+38twFXhsgMGbsA8HO28hkLvf/hTOwA
fsePjiywT7tj2CBtTwbtljvPewjpEO1q5J/SGzz/Af8QO8sU+JZ3LWIO9ShL
6KIm7KNizPTBt6WOUMyPLATfBmeSDWCfppncCugXWZPJAzztRZ27wf/FEmtB
duIfUbqsRw/6lQXPOWNe4DGNZYP+XeoZe3wp/bcFBNho/UdyIySvLlWzfJ3m
B3vaJ1fR+S3qowYj8tvDjdZR6FeDOZI6YP9lDxJqBk+2kr9nW1vQXzXeTnsO
PE9m9T3o/d7TJ+aYN729zs3ivBc/DG8rmYslLFf9iAEf+hQ19IKQnxPtteQo
PoSZWv5EPdoWn3HzG4V/PK6X51t2HcHerl8FfsY86KyAPa3KZvbhvF0M/e8w
f93aFyxaTcnrZ5L3uv+lk6PzI5zA33fPqsQa9SiX8TfqyxeJquuw/zvun+Y4
b9SBaQbBtYPEH4HdopDXH3qxDOeNDN2iCvvUHXojhv5wW1ZyFOLLd+KXSivr
W+Ku088L6D/P82u+AJ8tuh5PYv8QpJ0VjvN6tmTNQJ4tnvHkAm8n2ZXMlQz7
sN4VZEJ+sJ5SDgD+Con0KvTbxp9/NNH20Vjg2OE7SaTeO+qL/uqyt1ca4t1l
MCp+jspXwkUX+GD/hb8eV1Fftrd2xdxuYFa7G27AD//2VAtdvUDh//p80hT+
mlX8nYR8XvD6qQvkawXP3tnh2EguF2nbiPnoZWryDdSX4g3mVh2U/tJbiZdR
XyRjMlVgH/v4d6ZfFqbIZJ2WVHp/FbnUG/wX/LZHCvzXPp79D/lc+otL9C/K
/sb/HQisD3hHvOCMmYc9zX9/OY5+6SVLlB3waN/7uQr5JCTzFZ0/t7WsNvnv
WR/BzGj+HvJ5c6fXwf4PJzr9UH9Fv//Yif4hlvXtRvBtKIzl+dTNNFKagdWM
nr/G7qeiv/1hmalP319of38I/luzGd9so/CcaCRFOQPyyA9phi3Yt7zj+r0L
88XF0z0rkf912k7Q+6Wqe3+86f3qsOrabcG15ANF9UfwbzGPRw/8a3g8nUGW
8u92E9cl4JufjK0eBxXvP/cnhm7m+0gqbf7tA38d2VjOi/pVwzzxYi3mF/7r
NvBvu+HLSpx3wWfjkXMCg8Qlxq+LyOcmCnvS0D//3vk+ip+Sn+P+Iw//mt1K
GAN/dO4pcudpzhPcNucb6P2bXlU87DlXVJAHez7eXbQd9SLvUbEw+DOjc41T
cyiZuMwWr47+cNDsuRzwG9s39zZR51Vu5ONHvfDSm5SGPRWWeM3/V9tL2lm+
twU/T3Uu8qI/V5USEoI9Y9LkuTF/bcrq6e2i7FkhU+0t2ldAlAnmMeC8P3f9
sgN++WUVQXwUfk2LTZ+xbzzp70T3PzN173LW3u8mN980DYM9wxsGSrGvM53m
MKml8CQtPzoI+2x7zv4T9tFNbM+6MN5BpkcJGCM/77Uy/Q/xrsg99Qt8IzZd
EcR5Rb7ziEFeMeq+sh5/JSmo91YSeJb3ubMjn7xY9vOcAIVn/UGeO+CP65tH
lsATcH3VIZXNLUTu9eP8sKd2VRE/5tkGAdkQ2HMq9aAf6qPvt3evYc/o04FM
dr3t5C/WXRLIPyk/Sq4gv73/rHUG8zW7T4Q2+CCyhUzBfYHwdFFDwpZBwmP+
oRD0L7Kv+oJ8K/M9pw36RXJLRpFPvAcHHIH//rh2Q8XNPiJua+9b8L9r5xph
zF8MJ54fB/+HkpRN0E9mBq49BPz7/hTuH941T3j0NDAi3kdHBqQgXyh8xQPy
dck/s1AvulVEjKBfNJLz1e3Vf8jl/CY9sE93dJk17B98eGEj+B9h3heAeXDy
dtsM5McHGpYGJ3eTP4wbGxHvEz7BdzCPHLnCbY/66B7/rQ549N6w8cM+MSsW
+lYxdRHiMi7/oV/adPWTP/pbZgfPCZz3Wb3KacRX99iD/++3317jtJuoIctV
gneCbyWDZBHi98xsP50Pw84oHUT+D45sbl5L2TM02vCzDlsnKZGs+wF88G1K
mgEe9fhWc8jbWH1/g/lLtKB5P+wzvfZb9g7TWdJ/rYwZ6i+fneoTev7aIP4Z
fI4YNUkDH2rrVc4Cv9HS6lKHgnbSkltXB/lEb39iEPivnPtSms4nRVIx4NvM
vVIFxMvznavuM20ZJ9YeXFMO/z5xbtKA/Y1kBMxhf5fD0UKYL9yT9n2FPFcX
85Iw2S5igilaHv0ef1zeN8wXj0JICchzKgg+xj7HY/fX8/R+oClF+4TSAFm/
cY4JeOo0C2qBR1rwVDPw5O5d7ot9Tqy9jCnkv//L8LzS0Epa2xBPwU+r9W83
wZ4hrKmVkLdWbqxHf64xME/Py2E73tZ58U2TEi+W5KJ/WOnhGoX4cuHLpPks
OcV9C/Y/qHSSEKPs33VH2rWv9Snp8kq3FPzJC217gPx5yFFyD/YzzcG+D1BP
7/Q4mNP9mBXBzfN3hvhwSy8P/PQ5r7sB9SgqZcwffLDx+XcL/lKZWhJKz0dh
hmw7ZScJX88VJPh/705gMPLb7bK19qjXroMruBCPN5u3W+K8ZkuzTRevdJOh
57Nb6P0Ak/EM7BMXYkTfv/8KlJLE/oQokLGHPF8K98f6wl/kKffUEfBZT6V5
F+JXIvxnCvqTXodb6+n7DtXBNjnqvO/rfb6uW19P5si8ywbfBDYSo9B/8P3q
Aujnkb9Dwv7PV4pfpe9zTQqb3uX2k9xXiz9gPn297pUO+km75NQ02NPUksUM
/r0h+NgefEsPEv9nu7WJtHf+fBDy8tHmptDPuyR2GHy+IjqjADwbPzg/FKXw
cJikndcXHCKDrLfOwL87B0TDgb9KY6gP8zvb1VVrwc8lIqo6wHO1jWHWKJxJ
bYE7phj5Vpyc0oO/tiunrVCj/EUsYWlEfW/2d6b5r8mwuT0wrI8IO3+YBf5a
P/qQG/XXa76Z3ie783bm4r6P8UBoAD2PvNo79TqskVxlcf4y5qnm4hIr9A81
T6OYcb8W76H9FvsND9aVL1C/EifUY+Rq20kl8ddhiEdJvn5m9D8GFrVn6P1V
w+tS9CfBYQLbwQeD1l3eHV96ybTTZtY47z0NzST0G9qBykKQ9+h7NIL+wTtz
xyDwLFm+dMJzE0NO7kvhAvj3ROSPefD5zy/xarp+rZwUofelxzleAs+PzUbZ
bDnL1a54Zcwhfm8UGRQhXx3vyF5G52cZ1hzsExJZakZgH5+WtxmOJ2rJyGQO
U+xvB9cJa6Afi9vCOMBKnZeD7Z0M8m3n9KMQuj9J+L5EpWyE3CxbYYj4YhmJ
cIa/YgJieeCvZ2PFnzCf7rKyjBik6uktcjTo3cteMnIg/A3y4RW1n97AX/Im
fgLz8j73X5zIt79lyr7ivMtFaizsuL4Q1kebfiLfhsryPsb9yypdfQH0q+73
nUsxHz3Q3x0O+d0eJ5L0HBjU1qkUiiH/rG+1XYL42he0gu4fOvrnQ+l9rPXF
EeC/7c0lb5P5j/xctuEF8BSfb1yK+8Em48HtiBdLAwMP5JMKhu9dsI9o1vc5
00MMar/OcjCAP7nyPNqYX4L5xlih/2epfQDy4WC8RDjdn6RzvF8s/0u4XHhe
hP5TVLr9BfqHZAk1ne2UPW8alZo6I3/GrImn+8McjhMa17uIVxmjavDX5aq3
xdD/fUtECPgpf9I4HvXFvNxaFPovVUys+vR3gDAs8vuEfMKwhEkN+/Pg3gsX
gceJZK1E/yPPymcN+Y9Rq1PZ94ySdz8xqoFvtkxPfsNf6wJXXgN/elm+2qEf
K+3096Hj/dBS88t/oolj/Ck/wOdLFZcrsA/5Wytdh3g/fi5oA/qB27vOtuD9
T25e0cnavH7yuMZWX9jzi+NPWcR7m6DKW8zLaq/cU6A/tCV9N/RfHn+4v+vH
crUAlqIxnFd33cQk/LXiavtN4NcKfRyE/LNyQ+Vf+r6sWfzGNsFS0n8xtBf9
ZHvHR/r9gNHdyvg1lD2bFGT2o3/7j+cgA/L5GTI04yDLIml7aMoG5738hHiE
857hOtoOfsocqzZDfOWXHnwE+xy03BDrW9VPfmC12wI+v9PenIHzvh8/wol4
fKUp9wX8r/+RyQf5vAt3tx+/3UiyXJk9iPMase1TRz0izu0RAn+EowOXgg9t
L7KCEO9ZLdoSr052kmonLeh+QNd94DHi/anApjzYp/rqurOQN1CwPAT7lNRK
PU1r6iPI2X2cyM8SM+5a0M84Z/QX+utUAv0wvy8OWR1cQ53Xfv1pY//9naT7
qh07oH9HlEIe4svtyIFSyEvMpaSi/5zmNNwLezabPbA7eiSCfHhm8iv0M1Rr
HIH+ryVCsvT7jXWnHqE+ci0OTi+BPf/MNxSLDxLdx7S8MF+QDvfT0V/9q7lU
3U31V0Gb8n1xP6Iqwf8H+WcorotL9X4++cTXog/z77P1nx7DX2fE9S5LIJ84
1MygHwuzd/OFPUt/F8S0MlLzl2HQc9jfJKjhJuqLYrCuLOxzo/wmG/hsan+0
FPYpj4njzK3pJ9nvRJ4CP/PKU48h3247X30a/AwSrE1Gf37BSSIJeE7dEk3S
s6Dq+Xohet8ryLGvx47iW2bOjSzwzeeTRRvys8yyrFPQ7zhb9IFTqJsMC9M6
ivrb7GXZCDyV69KWQb/VmuBZyI9mjtH3y20b9q06HTpFsOlrPgWfbTbfvYt8
69nrtIreP4ztUkC+lSzXpPGMnJ7Y+l/2crWdsc50P2kmd18e/Xnn8Ldg4Mk/
7CKI+1Dz5QdXQn9cXzPnCa9a0uNeyTXgYauSOwR/TT0y+of49Zmq1EK8OAQq
GcGeku7fXq41nCC2MBbywj49z9nvQ16zZEgF80VB1sQT1F+H1b01eB8VZfrh
68PuRvKwi/o76P+TN5oBewZINgsiXqoaml2QD00lQ+j7EcNDJhIK63KJP65f
JaE/6ds7R8RXwFrvx+BPmaR+BuKxtN9/Gv3GcZc2MXatblKBM9wH8mZxx66g
XzVs2/+Wvq9hHBNGP3NueM0v+r3KyaqAMArPmL17IOrv0pM/UlDfd9oW8i1S
fBtj4bJH/qybKwxEfF23uX9K6nk3ObxZKhLxrrnVww942pk0bIH/W9HXfdhn
lh6btId8QtTE9osi44RhxZYv4MPxXcPRmF8UfKsLYf+DPjIZ6B8WCrpv4rzO
bHOCTrYMaoz7do3Dvw3DnzmQb/X1dT/Bv+fYptjA56pfr5Igv/aH67u5Z1mk
C3F6F/ive0VWAPWULPrLjHnklAT3R5x3UbnvDPAkequKN+gkEOaOrGLQz8id
eRP982bj2Rbo912+3Q/ntQjKrIR+Yef9zKpOmaTftpu60P/lmu8DzL9yH9n+
9VD6edjYVMHP/v5VpeBPyrb+pnXc3WTjQpgr+qWPQvOhiEfy0cB52PM7v98a
7CevlZ94Bvv/zQ+9Jb2qi/j17O0Guv+X4JjBeZnTWHVRj14keF1HveZOG0sA
/tekjlXgaCnpQcZfhv3jK1LLwZ8PRrs2IH4zU3w+4j5FITDr0laKD0e5z0v4
zOaR7KL6w/CvvMtJdfRXiW6NF3Wp/CC+M+MK8u2hZ+++IV6ebN1sPvWplcwc
u/cK+S3iQcN15De1PO4h8Me6yicT++fWipicnZT+l1NmfSP9fwkOn8Ja1OtX
Mk8z0e+x65R1wb+3l156iHj5HDZOv3f1zR3f/9a/nXzJZmKJ/HO+6I0k4oUr
6mIZ9LNcy9yD+4U1+yzp/jx0nc6zg7smSPOf2+j7gjYlFiHweVvdHkWct1FG
gq7vP8uu0/1qOoPnAwb5RvL9hzfnkD8TXxZmw/5/f1xzWkGd16dkahv8dc/K
jH6fI+5+1eD5lloy76d7FvqxApfIMuzzt9rv1ZrCfTrTyl3I/6+dZhtxn3Xd
ODbMemKC3FCQPo198u5Ne7tRf4tfbPoKPN2tkVvpedCQ8xnsWV/XwJlMxBNB
Pe584MP+NRxzwLPlhTrHMQqP7mMDAngUsi2nYJ/DLwpNCva2kq+Svnag/5TL
vnkb/p0sX02/1zLazUr3V12/3On3Hj9rHpgq3cknZ9YJCcL+dVdn3mI+MphZ
cAB/Ds/4jcOevHa29PsH9cX3q//rqCSHBw/cwT5HWdNLHnhMG/MPmeG92T+9
c4hHuflfD2l+qnY7JNzvJdsUTi0AT7XSKxnUU+GAvaeBR0W0YRLxePzv88vg
p8qqzu5x4WmS9eS7EtS7mcDTw6jvLVKXxuj7QfOro9inKcy5XwY/Q7NeGtXY
NhO/dDSY0b/NvwiMRv7RZL6vjvsa/YMtLOj/O29/+wF73mXyOHlxUyVZ8smL
G/4an9l8CfH+fklyWhvlr68zWjmYX+aCtBbg34eFu4WEj3cRRwJWfgeexvN7
b8GegjzMBPylvb5RB/mTacR9HPf7y1om2AR8Sgm5nkfdyFc8B1r/4T5F95eD
BuyZLFzrBv3FC/924ryypf0iTjcayQLm1Hjw7Yzpmn/ID9cG4pbvp/BrxZ/7
i/2MQkM5fT8Yvn10icBoP5moFs+F+I2c8fiCeneys1ed3j+/LKsHnvG5A2Po
r74oWmT9kVgkXaQ/eQCPiAPnStwfTT6bMUa+Gl9ZuBP29FqfvoD6EmMc3J1M
zSPvXzeZIZ90jB29iPy2e0/2Y8Rj8zGhX8gnl0096PfSFsHvnY5G9pK2e0vy
EV8sqZ2fEF8fFl6K0O+XArYlAo/c+eqF1ZT+dfdWji0daifrTQxmwAc1t8Ys
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
T+C8+WN8zogv/otBZ/F+L8r9Z6VXUzupHHzjBfrb6tyeYpy3VaKKUKXw8L2z
LUB8aSTY3Rym5BcqIidHk0eIxH0XFlF/twm8Pg0+xw9utEL//9jZchzzQu34
wxrkq/eXrRmeUfaZ4OC8APus0BU1Qv5xfb5FnX4/H/Ovme5/mntZ8f5c+nBy
7rhnDXlkb9l68M3gGudUAP095j4P7P91PzIV0fXuq5Pdf5T8foMSh1dm3WSk
U1IZ7FPWfdQc+cpOYVQA/duys08GsC+6mCTng+8TDRTzbjRvZ8jJebSLFfXl
2ZG0PtinKGRbJD2vRXPR741vSP3pp9+zrWhKvfqsh1CZHlVBvB8Ky32N98Nv
+9w2AT/ndWkO7Ftadvkuo++PklIerOTuItzmPsSBbytUvy9BPrQr8rwHPsdu
D6rG/LIpgW8I9c4w+aRljVgtmdjKR+/Hhr8OiuK9R8qpC3FC1HnZr8fogv8V
3a988ij8Jn/OMRlZjpAjGtsOgZ8fFj/9hr+WzHYn4j40Yd3+EPj33LBtKL4v
NmTIY6pnriRf9RtuRb2TUJRfjvymN1ByB3zr/8KYA3k9yZBjyG9nlN9nJerV
kiyna5tgT8IstRz5ZIehQg7Oe/jUiAn8pT1WzYZ+O02sUvGIRCP57/4r+n1s
/untU+h/xFq6+sC3xT8E/T7KRSo2CHxIW6t0fjlPLFETcccY9St3y/AH9KuP
E3XZ+qn43RqlNoj8NrJzs3UzpV9lS7q+VUclya++ewP6w0J5MgT8ud5jbg88
rRYCa4Gfc3OAfgYlH/I6JWHGf5xMUPOvhf59E2KxiK8JpYY3J6jzThhkr0I8
+qi0rRqi5C8rJTFuP1JPsD06EYR6t/1RlBT867dkXTLiy3C8ywf9f1zCzS/0
e8v/wi69v8WodmNfCv3+YcfH2jDMC2Zq896oj/VeuyOwb3xnbjYP/8pIhozk
JJeSyw/lJiD/85ZX7Qbffgu+H0R/SDUvZYhfvj3FEbh/eSQYbawlVEb6nKh+
Dn7uyKtcjXx4oMJXGfL3vonNYJ9s9zaZk75vkl3+nI+3k7z/6JYl4vf76K1l
dP1iTZnH9yMD686pwz72po8+4j3hOrkeMW3/WbIrtpb+XuAc759yvCdMPLEu
B+dlbFVcj/j1WuSk38s1cm9oDYqeI9kOzSoi3vcuNWmDf1f8p+qIeMldeTgR
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
5ypw/5tV06GA/UwC084HyCfhz8LCwrJ6Sf+wJHX02xHrDieADyEmWsH43tlX
60cx5ou3BofLJyj97J2Jj1i5BsjQgB3rkE/+W7L/GfD8t/z/+Z/HmlUb7ytW
jTKWAv82hlv+XmN/iOMVbs8hf9Rm4hXicbZflxfxXr0rbAj1/YpPdBjsObVf
8WfxZBxhev8WN/rPYwHTLLB/WFAe/f27s41sDM5b83XRCv388rnnscmNo8SH
eEc6/9TENfwFH/JLesdg/+Uy4mnob7U/27xB/Q1SYjfu/dBPCo0efA17GkxI
0vufO74ZzvS+aChmGPfdJ97NDNH3NctOH71cV0fsH9OLgf7ch4f4gOfWh8o4
yFesyOnA/cveXS/H6P7K4dbvl+GN5J+To8aQl58Jk0O+jYpMXY/z8mXIRIBv
qwpJZvTDfe9au17oMqjd4RWUBR4LqVAR4NeoPycD/wqYDf8C/7eoatn+oOwf
sU7MWefyTyI4oPMI+Jm1xZkF++fJGKkvOG+VmVwAfZ9Y8XgS37PbL7wQCsut
IVUmjl+EPGt1jyPOy/ReZICOF7mXWuBnQfhtXcwj3camitZHuoh729/eAZ5P
pQcScd4r9aoRkHf6Vb1SB/mZjdsI/aqzhOmbUula0qxOMhTxvq9clX4/9tBT
j34/xq5f3wf+1K3l+Y18Ln35n5391ChRXatfjvupjVXbrqC+G1xZl4j8sJ35
TzfdD3P5T2KfeZur2CLlUy/5dgtXFPrVcz4moqjvtn/kHmG/ZD7puBZ8eNle
M4fvDYNfa+wu8egmm5qsxZE/pzZd6AeeGJFAR/S33TFlJOxjvdbuDeapV8vm
r2+g6l1g5Q9H1NPAm8+cML+s3n99DvoNSlfY4D46ZXQnA/hAyP/eFfi1nbzD
tnEl4qvXmfMR8HuPqA+gH/hTUVKP+YhtQYi+37yQ++VjrO0U0f8oqRz27zSs
GcI+fPne5XmwZ5pVC/39vqqQHC/kFd/WMqRfmiVtPxszwp7Nft6/UH9lmG5v
R/5XeOjmjvvc3nTLBvr3am6ohR3lqiSlPzUHYv5iV9wVDHnBzzfpffhBhquR
4OeXe9X0vKZu+rFLoCGfjDx52Qj91dYVvruRn8dun2Oif/9HjGCFPcVV7m3H
PLV/44uiBXKaGD23+Qj9exEmJR2oj0sv8XtinyzIPULvn2Onj3/AvKyor92k
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
1JDtYRs66d//DOpiRz01u/fXmP69XLY7DcDz5o8WH/Zp7BvuWK541U/Ktwbv
RX4zc1bxBH84t1ulTVJ8yE0aUgB/JvYnOcBfg0k/BF+7zxODBxzo3zeeNN3B
hnqxxXuVO/h/YX33IdjzzKk3geDPf5eeHjMyqieqdC6dBJ5ajdvc6Af8YoJq
6O9594c9hvz+vXWL+H2V2/ZHkisPTBLqtYLy4H8Gk8cR8D8sQXgL/T2mRUI+
8LDrnduIePy8fURa4eQksXAzcjPkF8u2FqLeOW1TiQcfNnitTYS/yp5o3gJ/
CmMmive+6yXvvAijf8+ztsV5HPVrLUcS/f5tj7/ZO+B5VZm0Cfn/s1a303ey
l9zt29CBeFlY0SKJ++WTcjcccX9UHcPKCPmi/3V07fFQZmGYaVwqlVsXlczq
Ireim1B9bGG2tsQsO8WUJKQiRJJoQ0uR1rBRykaRsKVCKj5afcqlmTVEqSis
iVy33CrynP/f3/d7zznP+7yX8573U+TUNU7IxzxqU0pW66bui0we47ymP13m
Cny6sh9aYv/9U7QvYv+fCq52Yf8N7bLz2o+20Bsdy3NgL1u+zCD9zKeo2knA
593AsjDcjyd+2S2BfyyIW78vkt1KCzaoluG80mLYhuDnCgnjjvj5kiSe2HtE
npYE9f85/oLhN/YtdGrQiUckfvAxXQF/9G9VhwHsMSVZPxnybP6SXNynRIRL
J/OTGmnTg06kniaq8S5Gfeml6qxFBG96R8SkP4qp/4T7iIDoXZoaKaO0gDup
EvGkZ5T+XOQvDne3hY1N4Me9Jeco5A/Ucv3gj474uRdbPO+jKE9LAb7vGKgw
H+dr2cQzxvflQuKjoY/WOYNQ2K/5QCfX2aSUiqhb7QF5p5w0gudOW7f7wI+g
KjAU+x+cqzYV902+mkaLPayllFGKxxXIs9TuDQGfLtMUybz0sHmjich/FaIv
q8N+Z3Hf5H3re0/vsfxtJfgtxUTkBP/SlH+pEPL2RRrG4CsNsxu2qC95W7AX
7LXvplRf3HgHvl0+3laBeMCrfHc9Z2L/taksO6z3d/8Ut1H0k3jayJhtfUvt
+Fx2AfhUZWUPwV/McXQaAp4z8uoZ5C8v1g76Ap9dzvVTfPl99PXUyD7Sr3tB
XAv+9N9V14r8sX9lXQ34QZTOTF82sd45flGzo4QttKhIoIF8lpV4k8y3Xzr/
lj/i28uxe4uwP8s9Nl2HvdAhlcHBaQ308ZPqJ4D/E7+MNOH73az3uqjnuJ6x
yYD+hv2slsXoH9auU7DxGaWXdio0w1+n3fvjI/izt0s2HvwsYzoagPxiy4EE
BvrXrEt6omPVTgdqUhng878ns/4En+ffeTgFeF5vpW+L/PSdbNlKxKt+ZwuO
n+sZpEMYfjfWO5BlrAv51uDwpeDbn2xN1sF+T9r+14b4QSV2XO+m6Vdq5xLx
dvCPmp+1FfgwgNubD3vP0HhM+sH4oc3bcd+hPknr+daeD3QW86ACfLvGkUkD
Pqs3v5rJQn7d6KwGvA2/tDuP/s9qR36mim0hbeDJWww8TM48tQn2GxdXmojv
XxHX70J8crSfIu+bOuMui8wNuimr7dY1yGfleOd/BJ+XlH8zR3+y2Mk1Dv76
lvzqAPQT6mQ0rnFpa6d6bL1f47zoaYwh4iWnhzsvYj/Pco9/gb3PHLiSCnuf
d7vRWaW5n9pR6EnmNUnT/WngZzhdx4DMy329sBH17U/uQnJfLFOqF63iJWNR
9c80IfDGcvVSA57HLVpPQ/8mRasG1Euz3YQzUE8TPp9ZWxUpphbFROoi3ltu
FRJC5okpFJSjX13QeiwUeHA46xw9C/NtQvpi3WrFlGysylfgP+Be3QWsl3Oz
+TXqS1XWlSLIC7SLdBCvirxendPbl0X5Cs2KoE8s45WF+rOusuJc2Lu2a4cz
+PDGYHhu4YT81fiR3OKOfoqtPDYG++XP/+aB9SrJNpB4rN0xRgq8dSWNkP87
1Ntszi8PvUVJHxgagZ+NzJLmIZ4Z91aXx/vxUD32GM6XWcXm4fttdQmS4tMd
9FuV3DVkfpHSRRfYS/+ecU3grYG/Qw7yCx3elVRPyJe4ef18myNT2tswTJP3
MtLZMuDPw9yIHNgj8/9aXeTj2yxc+oHP3rKYZ3IR5bS+kUSBvG/9a0MQ9l94
cj/BT9QdNgP+idrbQ86XnSr1Xjj0kXJx09kN/0gpqXNQb/daNIUHeZXiYHmc
r+e6J1pYb/Wvg2XKGV/pZZyCJOgjbT2sB33UDtL68F/iIJ4v8G/Xa9yRB3vn
bm7q3viZuuTxYQ/ws1qygrx3iLzGIfNYZoQfIue1YlXAVNjLtekOJQm8dnqj
5rGpsBduZaYA/BYrVN7ai36YQ/uLIf/D55YK1P957vZ3Mhe8ooIe2B+E/qYj
8pQPeT9ovg36309f+wJ4TolxOEP6YbIHfdwjnlHR6xMeo36YzKhWk/lyEXQY
8K/pW9YAPhzQ55tB/jsmqTQl
              "], "supportVectorCoefficients" -> CompressedData["
1:eJztxTERgDAABLAHEd1Rggck9K5z9RQnTFjroYGOyZKj9qttScqe3OPznLZt
24t+bdu2/z4BbucKIw==
              "], "rho" -> -0.5090469405055047|>}, 
          "ProbabilityCoefficients" -> {{-6.603964805603027, 
           4.342483043670654}}, "MulticlassStrategy" -> "OneVersusOne", 
          "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "SupportVectorMachine", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "KernelType" -> <|
             "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
            "GammaScalingParameter" -> <|
             "Value" -> 0.04666752359332513, "Options" -> <||>|>, 
            "SoftMarginParameter" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
            "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
            "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
            "MulticlassStrategy" -> <|
             "Value" -> "OneVersusOne", "Options" -> <||>|>, 
            "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
            "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
          Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
          "PreprocessingTime" -> 0.127187`5.555987717097756, "LossName" -> 
          "MeanCrossEntropy", "BestModelInformation" -> 
          Dataset[<|
            "MeanCrossEntropy" -> 
             Around[0.5657413124705853, 0.06513986345829437], "Accuracy" -> 
             Around[0.7306852097106047, 0.037239365885623495`], 
             "EvaluationTime" -> 8.621048801993047*^-6, "TestSize" -> 132., 
             "ModelMemory" -> 81965.33333333333, 
             "ModelUtility" -> -0.14630106202357973`, "Round" -> 3, 
             "Iteration" -> 31, 
             "Time" -> {
              0.92926`6.419682236840764, 0.957047`6.432478259736176}, 
             "TrainingSize" -> 526, "TrainingTime" -> 0.02511886431509579, 
             "TrainingMemory" -> 1.1257493333333333`*^6, "ExperimentCount" -> 
             2, "MeanCrossEntropyHistory" -> {
               Around[0.5217329426471322, 0.0684840306591587], 
               Around[0.6097496822940385, 0.06736686343081832]}, 
             "AccuracyHistory" -> {
               Around[0.7563210065909427, 0.03713536619499113], 
               Around[0.7050494128302666, 0.03935928066697757]}, 
             "IterationHistory" -> {26, 31}, 
             "TimeHistory" -> {{
               0.795251`6.352049217385667, 0.824636`6.36780728377222}, {
               0.92926`6.419682236840764, 0.957047`6.432478259736176}}, 
             "Configuration" -> {
              "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
               "GammaScalingParameter" -> 0.04666752359332513, 
               "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 3, 
               "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
               "Shrinking" -> True, "KernelCacheSize" -> 100}, 
             "FinalTrainingSize" -> 658|>, 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
          "Configurations" -> 
          Dataset[<|<|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.04666752359332513|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.9074449645606983, 0.05376652122089237], "Accuracy" -> 
                  Around[0.5100131576309402, 0.04069851681277517], 
                  "EvaluationTime" -> 9.49193960414243*^-6, "TestSize" -> 300,
                   "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.6078084723959126, "Round" -> 1, 
                  "Iteration" -> 1, 
                  "Time" -> {
                   0.148198`5.622387336175554, 0.167179`5.674726716617473}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 105072, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.9074449645606983, 0.038018671756103406`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5100131576309402, 0.028778197222548034`]}, 
                  "IterationHistory" -> {1}, 
                  "TimeHistory" -> {{
                    0.148198`5.622387336175554, 
                    0.167179`5.674726716617473}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7953348883880269, 0.03824189401401425], "Accuracy" -> 
                  Around[0.5860589528471247, 0.029035607475957893`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.473729292108402, "Round" -> 2, 
                  "Iteration" -> 20, 
                  "Time" -> {
                   0.556657`6.1971326682177095, 0.574841`6.211092729713106}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 130800, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7953348883880269, 0.02704110258272671]}, 
                  "AccuracyHistory" -> {
                    Around[0.5860589528471247, 0.02053127494212064]}, 
                  "IterationHistory" -> {20}, 
                  "TimeHistory" -> {{
                    0.556657`6.1971326682177095, 
                    0.574841`6.211092729713106}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5657413124705853, 0.06513986345829437], "Accuracy" -> 
                  Around[0.7306852097106047, 0.037239365885623495`], 
                  "EvaluationTime" -> 8.621048801993047*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 81965.33333333333, 
                  "ModelUtility" -> -0.14630106202357973`, "Round" -> 3, 
                  "Iteration" -> 31, 
                  "Time" -> {
                   0.92926`6.419682236840764, 0.957047`6.432478259736176}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.02511886431509579, "TrainingMemory" -> 
                  1.1257493333333333`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5217329426471322, 0.0684840306591587], 
                    Around[0.6097496822940385, 0.06736686343081832]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7050494128302666, 0.03935928066697757]}, 
                  "IterationHistory" -> {26, 31}, 
                  "TimeHistory" -> {{
                    0.795251`6.352049217385667, 0.824636`6.36780728377222}, {
                    0.92926`6.419682236840764, 
                    0.957047`6.432478259736176}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.621048801993047*^-6, "MeanCrossEntropy" -> 
                 Around[0.5657413124705853, 0.06513986345829437], 
                 "ModelMemory" -> 81965.33333333333, "TrainingMemory" -> 
                 1.1257493333333333`*^6, "TrainingTime" -> 
                 0.04401171175925922|>, "Index" -> 1|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.007642779509540398|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7952652087541435, 0.03602592305116341], "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 5.995072678143398*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.47309008382811624`, "Round" -> 1, 
                  "Iteration" -> 3, 
                  "Time" -> {
                   0.187125`5.723676806847084, 0.208412`5.770467714763311}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 111000, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7952652087541435, 0.0254741744879824]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {3}, 
                  "TimeHistory" -> {{
                    0.187125`5.723676806847084, 
                    0.208412`5.770467714763311}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7900412323830571, 0.03875554898090785], "Accuracy" -> 
                  Around[0.5860589528471247, 0.029035607475957893`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.46724375700114207`, "Round" -> 2, 
                  "Iteration" -> 16, 
                  "Time" -> {
                   0.468444`6.122202674216843, 0.492237`6.143719248721941}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 134896, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7900412323830571, 0.02740431149300733]}, 
                  "AccuracyHistory" -> {
                    Around[0.5860589528471247, 0.02053127494212064]}, 
                  "IterationHistory" -> {16}, 
                  "TimeHistory" -> {{
                    0.468444`6.122202674216843, 
                    0.492237`6.143719248721941}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6418733180139387, 0.05890560324134875], "Accuracy" -> 
                  Around[0.7218650823214723, 0.04393823831714873], 
                  "EvaluationTime" -> 7.382410949565029*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 81965.33333333333, 
                  "ModelUtility" -> -0.2679759644092643, "Round" -> 3, 
                  "Iteration" -> 33, 
                  "Time" -> {
                   0.977434`6.441632435365908, 1.001882`6.45236156755552}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.023396783926626794`, "TrainingMemory" -> 1.12576*^6, 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.650580522238538, 0.0993582581969889], 
                    Around[0.6331661137893393, 0.07191883124900265]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.687409158052002, 0.04015765748327848]}, 
                  "IterationHistory" -> {28, 33}, 
                  "TimeHistory" -> {{
                    0.845376`6.378594907659051, 
                    0.874824`6.3934656824987375}, {
                    0.977434`6.441632435365908, 
                    1.001882`6.45236156755552}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.382410949565029*^-6, "MeanCrossEntropy" -> 
                 Around[0.6418733180139387, 0.05890560324134875], 
                 "ModelMemory" -> 81965.33333333333, "TrainingMemory" -> 
                 1.12576*^6, "TrainingTime" -> 0.04511715212179826|>, "Index" -> 
               2|>, <|"Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.17222802963895698`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7811442660593727, 0.034762153596911545`], 
                  "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 5.049706302466315*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.45501591554062193`, "Round" -> 1, 
                  "Iteration" -> 12, 
                  "Time" -> {
                   0.37626`6.027033044654966, 0.393442`6.046425712563338}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109744, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7811442660593727, 0.024580554537024485`]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {12}, 
                  "TimeHistory" -> {{
                    0.37626`6.027033044654966, 
                    0.393442`6.046425712563338}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5383675187104906, 0.039527787310659826`], 
                  "Accuracy" -> 
                  Around[0.7630502251594268, 0.025334196337457794`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.08851440647532771, "Round" -> 2, 
                  "Iteration" -> 22, 
                  "Time" -> {
                   0.599767`6.229527560100926, 0.618676`6.243008262466144}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 135176, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5383675187104906, 0.027950366452667127`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7630502251594268, 0.0179139820261278]}, 
                  "IterationHistory" -> {22}, 
                  "TimeHistory" -> {{
                    0.599767`6.229527560100926, 
                    0.618676`6.243008262466144}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6831790317575173, 0.07405003123299678], "Accuracy" -> 
                  Around[0.7631737192970798, 0.026898717501856573`], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 64146.666666666664`, 
                  "ModelUtility" -> -0.3336000134410422, "Round" -> 3, 
                  "Iteration" -> 36, 
                  "Time" -> {
                   1.046818`6.4714161752069055, 1.065531`6.479111082865848}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.018584726074662904`, "TrainingMemory" -> 
                  900213.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.7014410000702181, 0.10276613741588868`], 
                    Around[0.6649170634448163, 0.10025640690792871`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7700264320032167, 0.03644506618390918]}, 
                  "IterationHistory" -> {25, 36}, 
                  "TimeHistory" -> {{
                    0.773223`6.339849757404639, 0.794198`6.351473782557182}, {
                    1.046818`6.4714161752069055, 
                    1.065531`6.479111082865848}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.6831790317575173, 0.07405003123299678], 
                 "ModelMemory" -> 64146.666666666664`, "TrainingMemory" -> 
                 900213.3333333333, "TrainingTime" -> 0.03583782780069488|>, 
               "Index" -> 3|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.0694112151988088|>,
                  "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7868416531213789, 0.0358318420454525], "Accuracy" -> 
                  Around[0.5920072564602398, 0.02794385592020113], 
                  "EvaluationTime" -> 7.080105865084616*^-6, "TestSize" -> 
                  600, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.4624886874727494, "Round" -> 1, 
                  "Iteration" -> 6, 
                  "Time" -> {
                   0.251734`5.852486870209087, 0.272165`5.886377268352294}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110560, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7868416531213789, 0.025336938492744713`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5920072564602398, 0.01975929001367407]}, 
                  "IterationHistory" -> {6}, 
                  "TimeHistory" -> {{
                    0.251734`5.852486870209087, 
                    0.272165`5.886377268352294}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5564731503182054, 0.045728147463848984`], 
                  "Accuracy" -> 
                  Around[0.7798383790797141, 0.02466919969478145], 
                  "EvaluationTime" -> 6.4254327984984265`*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23528, 
                  "ModelUtility" -> -0.12331574951230884`, "Round" -> 2, 
                  "Iteration" -> 15, 
                  "Time" -> {
                   0.441219`6.096199199479646, 0.467277`6.121119398490092}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 135944, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5564731503182054, 0.03233468316278604]}, 
                  "AccuracyHistory" -> {
                    Around[0.7798383790797141, 0.01744375839062507]}, 
                  "IterationHistory" -> {15}, 
                  "TimeHistory" -> {{
                    0.441219`6.096199199479646, 
                    0.467277`6.121119398490092}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6900185677041282, 0.07634544506676089], "Accuracy" -> 
                  Around[0.7631737192970798, 0.026898717501856573`], 
                  "EvaluationTime" -> 7.589177122637401*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 62098.666666666664`, 
                  "ModelUtility" -> -0.34400229916171177`, "Round" -> 3, 
                  "Iteration" -> 38, 
                  "Time" -> {
                   1.087678`6.488045337827887, 1.10487`6.494856175042909}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 
                  859453.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.7236543113024553, 0.10186292720222502`], 
                    Around[0.6563828241058012, 0.09264257889058167]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7700264320032167, 0.03644506618390918]}, 
                  "IterationHistory" -> {23, 38}, 
                  "TimeHistory" -> {{
                    0.619694`6.243722284740849, 0.637234`6.255843933284284}, {
                    1.087678`6.488045337827887, 
                    1.10487`6.494856175042909}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.589177122637401*^-6, "MeanCrossEntropy" -> 
                 Around[0.6900185677041282, 0.07634544506676089], 
                 "ModelMemory" -> 62098.666666666664`, "TrainingMemory" -> 
                 859453.3333333333, "TrainingTime" -> 0.03241548454834875|>, 
               "Index" -> 4|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.02032890196258133|>, 
                 "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8187063759116258, 0.04061319006331127], "Accuracy" -> 
                  Around[0.5755720118040855, 0.0308032808712893], 
                  "EvaluationTime" -> 8.04405466876365*^-6, "TestSize" -> 500,
                   "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5029930435783784, "Round" -> 1, 
                  "Iteration" -> 5, 
                  "Time" -> {
                   0.230399`5.814025583284371, 0.25055`5.850439400574468}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110400, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8187063759116258, 0.028717862099385507`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5755720118040855, 0.021781208786882528`]}, 
                  "IterationHistory" -> {5}, 
                  "TimeHistory" -> {{
                    0.230399`5.814025583284371, 
                    0.25055`5.850439400574468}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5733683021845246, 0.04704053310348586], "Accuracy" -> 
                  Around[0.7798383790797141, 0.02466919969478145], 
                  "EvaluationTime" -> 5.252210370016134*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23528, 
                  "ModelUtility" -> -0.15319902540876917`, "Round" -> 2, 
                  "Iteration" -> 8, 
                  "Time" -> {
                   0.29435`5.920409033644162, 0.312432`5.946300502413445}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 133552, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5733683021845246, 0.03326267994810512]}, 
                  "AccuracyHistory" -> {
                    Around[0.7798383790797141, 0.01744375839062507]}, 
                  "IterationHistory" -> {8}, 
                  "TimeHistory" -> {{
                    0.29435`5.920409033644162, 
                    0.312432`5.946300502413445}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7254840422631426, 0.08119344379518882], "Accuracy" -> 
                  Around[0.7631737192970798, 0.026898717501856573`], 
                  "EvaluationTime" -> 0.000010142213424009043`, "TestSize" -> 
                  132., "ModelMemory" -> 61416., 
                  "ModelUtility" -> -0.3943720340052922, "Round" -> 3, 
                  "Iteration" -> 37, 
                  "Time" -> {
                   1.06693`6.479680920314086, 1.086236`6.487469185565422}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.018584726074662904`, "TrainingMemory" -> 875760., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.7630885759229651, 0.10638875310766807`], 
                    Around[0.68787950860332, 0.09769981026618747]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7700264320032167, 0.03644506618390918]}, 
                  "IterationHistory" -> {17, 37}, 
                  "TimeHistory" -> {{
                    0.493285`6.1446429029652645, 
                    0.515083`6.163422209988808}, {
                    1.06693`6.479680920314086, 
                    1.086236`6.487469185565422}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.000010142213424009043`, 
                 "MeanCrossEntropy" -> 
                 Around[0.7254840422631426, 0.08119344379518882], 
                 "ModelMemory" -> 61416., "TrainingMemory" -> 875760., 
                 "TrainingTime" -> 0.03583782780069488|>, "Index" -> 5|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.10989573329233468`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7906858656740947, 0.03566422258543496], "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 5.926135158391306*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.46727651386838764`, "Round" -> 1, 
                  "Iteration" -> 14, 
                  "Time" -> {
                   0.419635`6.074416697214233, 0.440138`6.09513385916839}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110704, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7906858656740947, 0.02521841363590748]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {14}, 
                  "TimeHistory" -> {{
                    0.419635`6.074416697214233, 
                    0.440138`6.09513385916839}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.781077017381668, 0.03755668751470847], "Accuracy" -> 
                  Around[0.5860589528471247, 0.029035607475957893`], 
                  "EvaluationTime" -> 6.795997200038258*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.4556398721203123, "Round" -> 2, 
                  "Iteration" -> 24, 
                  "Time" -> {
                   0.638271`6.256550106097348, 0.666619`6.275422681274674}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 232136, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.781077017381668, 0.0265565884205545]}, 
                  "AccuracyHistory" -> {
                    Around[0.5860589528471247, 0.02053127494212064]}, 
                  "IterationHistory" -> {24}, 
                  "TimeHistory" -> {{
                    0.638271`6.256550106097348, 
                    0.666619`6.275422681274674}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.593545551199571, 0.13122825527438609`], "Accuracy" -> 
                  Around[0.7563210065909427, 0.05251733851664782], 
                  "EvaluationTime" -> 7.175644776492659*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 79840, 
                  "ModelUtility" -> -0.2147797225448257, "Round" -> 3, 
                  "Iteration" -> 30, 
                  "Time" -> {
                   0.900002`6.4057884680330766, 0.928161`6.419168309528314}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.025118864315095794`, "TrainingMemory" -> 1091224, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.593545551199571, 0.09279238918779772]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113]}, 
                  "IterationHistory" -> {30}, 
                  "TimeHistory" -> {{
                    0.900002`6.4057884680330766, 
                    0.928161`6.419168309528314}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.175644776492659*^-6, "MeanCrossEntropy" -> 
                 Around[0.593545551199571, 0.13122825527438609`], 
                 "ModelMemory" -> 79840, "TrainingMemory" -> 1091224, 
                 "TrainingTime" -> 0.04401171175925922|>, "Index" -> 6|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.2187574552805577|>,
                  "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7988182393612402, 0.04717791870167349], "Accuracy" -> 
                  Around[0.6063800795737466, 0.03415840337485155], 
                  "EvaluationTime" -> 0.000010047595143039011`, "TestSize" -> 
                  400, "ModelMemory" -> 13032, 
                  "ModelUtility" -> -0.48027127697840444`, "Round" -> 1, 
                  "Iteration" -> 2, 
                  "Time" -> {
                   0.168238`5.677469090346573, 0.186023`5.721111637474906}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109000, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7988182393612402, 0.03335982623622096]}, 
                  "AccuracyHistory" -> {
                    Around[0.6063800795737466, 0.024153638660862977`]}, 
                  "IterationHistory" -> {2}, 
                  "TimeHistory" -> {{
                    0.168238`5.677469090346573, 
                    0.186023`5.721111637474906}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6155598753136186, 0.059824932540202845`], 
                  "Accuracy" -> 
                  Around[0.7767097091522895, 0.024825663780457082`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 21480, 
                  "ModelUtility" -> -0.22717866219871352`, "Round" -> 2, 
                  "Iteration" -> 9, 
                  "Time" -> {
                   0.313469`5.947739591949394, 0.333473`5.97460567005229}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134448, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6155598753136186, 0.04230261548320518]}, 
                  "AccuracyHistory" -> {
                    Around[0.7767097091522895, 0.017554395206618462`]}, 
                  "IterationHistory" -> {9}, 
                  "TimeHistory" -> {{
                    0.313469`5.947739591949394, 
                    0.333473`5.97460567005229}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5942108762050368, 0.062183147717250066`], 
                  "Accuracy" -> 
                  Around[0.773822679287506, 0.030976313969321503`], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 57320., 
                  "ModelUtility" -> -0.19334432395788836`, "Round" -> 3, 
                  "Iteration" -> 32, 
                  "Time" -> {
                   0.958504`6.433138923098477, 0.976036`6.441010829925998}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 
                  720853.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5995505644726438, 0.0871362768469828], 
                    Around[0.5888711879374298, 0.08810257093824414]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7913243519840693, 0.03522950568079389]}, 
                  "IterationHistory" -> {19, 32}, 
                  "TimeHistory" -> {{
                    0.53791`6.182254611591635, 0.555629`6.196329898328462}, {
                    0.958504`6.433138923098477, 
                    0.976036`6.441010829925998}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.5942108762050368, 0.062183147717250066`], 
                 "ModelMemory" -> 57320., "TrainingMemory" -> 
                 720853.3333333333, "TrainingTime" -> 0.03241548454834875|>, 
               "Index" -> 7|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11963790958285683`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7734696610214962, 0.03403495445770342], "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 4.366953114170442*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.44504365961893977`, "Round" -> 1, 
                  "Iteration" -> 11, 
                  "Time" -> {
                   0.353194`5.999558310742886, 0.37522`6.025830972611704}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 111904, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7734696610214962, 0.024066347094417403`]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {11}, 
                  "TimeHistory" -> {{
                    0.353194`5.999558310742886, 
                    0.37522`6.025830972611704}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.61263849138177, 0.057626297196339916`], "Accuracy" -> 
                  Around[0.7798383790797141, 0.02466919969478145], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23528, 
                  "ModelUtility" -> -0.22180818627993637`, "Round" -> 2, 
                  "Iteration" -> 21, 
                  "Time" -> {
                   0.575858`6.211860398066165, 0.598713`6.228763681685036}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 135128, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.61263849138177, 0.04074794552220328]}, 
                  "AccuracyHistory" -> {
                    Around[0.7798383790797141, 0.01744375839062507]}, 
                  "IterationHistory" -> {21}, 
                  "TimeHistory" -> {{
                    0.575858`6.211860398066165, 
                    0.598713`6.228763681685036}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6596738555183543, 0.06955033870119733], "Accuracy" -> 
                  Around[0.7631737192970798, 0.026898717501856573`], 
                  "EvaluationTime" -> 8.05624648529001*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 60050.666666666664`, 
                  "ModelUtility" -> -0.2980090924650797, "Round" -> 3, 
                  "Iteration" -> 34, 
                  "Time" -> {
                   1.003319`6.4529840301189525, 1.023641`6.461692665901782}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 
                  801210.6666666666, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6795098834620098, 0.09675001469694705], 
                    Around[0.6398378275746989, 0.0919786095819469]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7700264320032167, 0.03644506618390918]}, 
                  "IterationHistory" -> {27, 34}, 
                  "TimeHistory" -> {{
                    0.825728`6.3683820050378905, 
                    0.844287`6.378035095724623}, {
                    1.003319`6.4529840301189525, 
                    1.023641`6.461692665901782}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.05624648529001*^-6, "MeanCrossEntropy" -> 
                 Around[0.6596738555183543, 0.06955033870119733], 
                 "ModelMemory" -> 60050.666666666664`, "TrainingMemory" -> 
                 801210.6666666666, "TrainingTime" -> 0.03567516235501822|>, 
               "Index" -> 8|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11393838293550193`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7855911966981322, 0.03516936781904204], "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 5.337357107459214*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.46074543251549593`, "Round" -> 1, 
                  "Iteration" -> 4, 
                  "Time" -> {
                   0.209445`5.772614990571688, 0.229324`5.811994501876726}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110728, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7855911966981322, 0.024868498474888565`]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {4}, 
                  "TimeHistory" -> {{
                    0.209445`5.772614990571688, 
                    0.229324`5.811994501876726}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5756856926901531, 0.03258913285841341], "Accuracy" -> 
                  Around[0.7351332952786167, 0.026223275248112965`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.15221549230586084`, "Round" -> 2, 
                  "Iteration" -> 7, 
                  "Time" -> {
                   0.273204`5.888032047089696, 0.293354`5.918937007868961}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 135664, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5756856926901531, 0.023043996837173456`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7351332952786167, 0.01854265575286202]}, 
                  "IterationHistory" -> {7}, 
                  "TimeHistory" -> {{
                    0.273204`5.888032047089696, 
                    0.293354`5.918937007868961}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.745286766045485, 0.1544949124881729], "Accuracy" -> 
                  Around[0.7563210065909427, 0.05251733851664782], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 67560, 
                  "ModelUtility" -> -0.4397885732270934, "Round" -> 3, 
                  "Iteration" -> 18, 
                  "Time" -> {
                   0.516196`6.164359628371281, 0.536869`6.1814133210620685}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 937984, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.745286766045485, 0.10924440027920927`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113]}, 
                  "IterationHistory" -> {18}, 
                  "TimeHistory" -> {{
                    0.516196`6.164359628371281, 
                    0.536869`6.1814133210620685}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.745286766045485, 0.1544949124881729], "ModelMemory" -> 
                 67560, "TrainingMemory" -> 937984, "TrainingTime" -> 
                 0.03241548454834875|>, "Index" -> 9|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.14750911374959483`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.7899026661906491, 0.03559497601969463], "Accuracy" -> 
                  Around[0.595882822454381, 0.02695820244798181], 
                  "EvaluationTime" -> 4.527264254254074*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.46627697812469704`, "Round" -> 1, 
                  "Iteration" -> 10, 
                  "Time" -> {
                   0.334488`5.975925535249246, 0.352115`5.998229519783058}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109120, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7899026661906491, 0.025169448919698613`]}, 
                  "AccuracyHistory" -> {
                    Around[0.595882822454381, 0.01906232775956772]}, 
                  "IterationHistory" -> {10}, 
                  "TimeHistory" -> {{
                    0.334488`5.975925535249246, 
                    0.352115`5.998229519783058}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7614702933394777, 0.0367608481302212], "Accuracy" -> 
                  Around[0.5860589528471247, 0.029035607475957893`], 
                  "EvaluationTime" -> 6.25506333491734*^-6, "TestSize" -> 558,
                   "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.4302554925129448, "Round" -> 2, 
                  "Iteration" -> 13, 
                  "Time" -> {
                   0.394466`6.047554569739192, 0.418588`6.073331767406707}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 135424, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7614702933394777, 0.025993844995048226`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5860589528471247, 0.02053127494212064]}, 
                  "IterationHistory" -> {13}, 
                  "TimeHistory" -> {{
                    0.394466`6.047554569739192, 
                    0.418588`6.073331767406707}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.605260208255557, 0.05824257817436009], "Accuracy" -> 
                  Around[0.7479254757000884, 0.027865375305958444`], 
                  "EvaluationTime" -> 0.000011488105570395368`, "TestSize" -> 
                  132., "ModelMemory" -> 80824., 
                  "ModelUtility" -> -0.21011818234770896`, "Round" -> 3, 
                  "Iteration" -> 35, 
                  "Time" -> {
                   1.025022`6.462278180230254, 1.045398`6.470826658389336}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.018584726074662904`, "TrainingMemory" -> 
                  1.1258186666666665`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6061250564180904, 0.09514536017665894], 
                    Around[0.6043953600930236, 0.07364215181361464]}, 
                  "AccuracyHistory" -> {
                    Around[0.7563210065909427, 0.03713536619499113], 
                    Around[0.7395299448092341, 0.038033601023375184`]}, 
                  "IterationHistory" -> {29, 35}, 
                  "TimeHistory" -> {{
                    0.875935`6.39401687342126, 0.898813`6.405214338715512}, {
                    1.025022`6.462278180230254, 
                    1.045398`6.470826658389336}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.000011488105570395368`, 
                 "MeanCrossEntropy" -> 
                 Around[0.605260208255557, 0.05824257817436009], 
                 "ModelMemory" -> 80824., "TrainingMemory" -> 
                 1.1258186666666665`*^6, "TrainingTime" -> 
                 0.03583782780069488|>, "Index" -> 10|>|>, 
            TypeSystem`Assoc[
             TypeSystem`Struct[{"Value", "Options"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["SupportVectorMachine"]], 
               
               TypeSystem`Struct[{
                "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                 "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                 "Shrinking", "KernelCacheSize"}, {
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[
                    TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[TypeSystem`Boolean]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}]}]}], 
             
             TypeSystem`Struct[{
              "Experiments", "PredictedPerformances", "Index"}, {
               TypeSystem`Tuple[{
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], 1], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 1]}], 
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], 1], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 1]}], 
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "Round", 
                   "Iteration", "Time", "TrainingSize", "TrainingTime", 
                   "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "AccuracyHistory", 
                   "IterationHistory", "TimeHistory"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                   TypeSystem`AnyType, TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                   TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}]}], 
               
               TypeSystem`Struct[{
                "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                 "TrainingMemory", "TrainingTime"}, {
                 TypeSystem`Atom[Real], TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Atom[Integer]}], 10], <||>], 
          "TrainingSizes" -> {15, 100, 526}, "MaxTrainingSize" -> 658, 
          "PreprocessorEvaluationTime" -> 2.10546875*^-6, 
          "PreprocessorMemory" -> 97488, "InputDimension" -> 6, 
          "OutputDimension" -> 1, 
          "BaselineLogProbability" -> -0.6753926350586972, "VariableBudget" -> 
          True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
          "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
          "RoundPartitioning" -> 
          Dataset[{<|
             "TrainingSizes" -> 15, "TimeBudgets" -> 0.19600000000000006`, 
              "ElapsedTimes" -> 0.19807200000000003`, "ExperimentCounts" -> 
              10|>, <|"TrainingSizes" -> 100, "TimeBudgets" -> 0.28, 
              "ElapsedTimes" -> 0.32822000000000007`, "ExperimentCounts" -> 
              10|>, <|"TrainingSizes" -> 526, "TimeBudgets" -> 0.4, 
              "ElapsedTimes" -> 0.399704, "ExperimentCounts" -> 18|>}, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
               "ExperimentCounts"}, {
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.3333}, 
               "ID" -> 1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 1.141458, 
          "MaxTrainingMemory" -> 2356192, "DataMemory" -> 160168, 
          "FunctionMemory" -> 431944, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 23.459188`8.12288795855948}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"9", "\<\"SupportVectorMachine[3,0.9]\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   PointSize[0.13], 
                   GrayLevel[0.45], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                   GrayLevel[0.7], 
                   
                   PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, 
                  LabelStyle -> {FontFamily -> "Arial"}, 
                  Method -> {"ScalingFunctions" -> None}, 
                  PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                  True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                  Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                 ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                 FrameStyle -> Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                 GrayLevel[0.94]], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["658", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 658, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 658, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.495187386018234`}, 
                    "StandardDeviation" -> {14.50105902244941}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{-0.9935986214718149, 
                    0.057053452515662365`, -0.09750222030985896}, {
                    0.11161655404679183`, 
                    0.6289110193501213, -0.7694235989380043}, \
{-0.017421947997533993`, 0.7753810890755811, 0.6312532316209849}}, 
                    "Precisions" -> {0.9888461123582454, 10.677295100096625`, 
                    15.009822083171317`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037951246`, 0.04569302094069337, 
                    0.048047318884218544`}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5063768416952767404|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037952292`, 0.04569302094069341, 
                    0.04804731888421849}, 
                    "StandardDeviation" -> {0.9996560395217333, 
                    0.29847010688257675`, 0.28837964325787463`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00013846368037952292`, 0.04569302094069341, 
                    0.04804731888421849}, 
                    "StandardDeviation" -> {0.9996560395217333, 
                    0.29847010688257675`, 0.28837964325787463`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.047281, "MaxTrainingMemory" -> 296136,
                     "DataMemory" -> 73632, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 40, 23.511022`8.123846490757364}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.2963731007420707`, \
-2.2963731007420707`, -2.2960331738652324`, -2.145368101764851, \
-2.0876357975924638`, -2.061516527911929, -2.0293765274979467`, \
-1.946816004065441, -1.8093184878264765`, -1.7658753661901316`, \
-1.7290802348444796`}, "LeftBoundary" -> -2.2960331738652324`, "LeftScale" -> 
                    0.00016996343841912953`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[6.050217996690307, 0.1932691449400386], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {30.495187386018234`}, 
                 "StandardDeviation" -> {14.50105902244941}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {
                    0.6550856232643127, -0.16462481021881104`, 
                    0.6367027759552002}, {-0.4138406813144684, \
-0.3600788414478302, -0.018719123676419258`}, {
                    0.3827793002128601, -0.42184707522392273`, \
-0.34968534111976624`}}], 
                   RawArray["Real32",{{0., 0.}, {
                    0.3676318824291229, -0.029414964839816093`}, \
{-0.11264773458242416`, 0.5800836682319641}}]}, "Version" -> {14.1, 0}, "ID" -> 
                 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5621212121212121, "survived" -> 
            0.43787878787878787`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "SVMParameters" -> <|
           "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
            0.10989573329233468`, "SoftMarginParameter" -> 0.1, 
            "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
            "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
            "KernelCacheSize" -> 100|>, 
          "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJwkXHc8l28XNpOEMqMiREUiLTQekozIyFZGQ2WUVbSorJSiqEQiRWYyI/TQ
z0hWyMjI3tkjJN7n+r5/+ed8zue6z7nOdc59nvtL5PRl/XMMdHR0c/R0dCuo
v8+/33U+mjxIhnZfibW42UweE50d82drJK3VRmb/SgaT65smQn0b8khWl4OP
VgV1EdNtfz4zeFSRP7SuWbnO9hBNKve5LnEVk96xAY2tlj3E3l/vb7lS9qN7
6C1h38SmvPJrUS559sfbxSueTUTa+aqRh8vNZFKLs4uidQNpwq0Rd9SvkYjZ
NRRfIPSKNP6cuFbvXQfp1dR915zCc+s/o/V+FJ7Vfo41Pyk8Jo8+5LhQ/qv/
bdVdTfmvE/UKaPcfJFf86Mxypvx/0Tvs7E/5p4/d9FyZ8v9ksn39Eco/t4lO
j7jwK/JDTnRt+5Ni8lP6kwhLyv8Tg6Oz8K//3kmrm/Jv31RedI/yv6o+TgL+
22rFn7MebCPzH3gtmlL2/cKM2+5T9l8u2oToSQWTQRza0eqUf15bk3dSlP+u
sUzmxKYi4mdyfdcVKj7HLeiGL1PxOXdt3WfEZyRrbuNNyv/Ofxe52Sj/x8K/
5nrnNBIK135ruFH2so2Kcg6UPQ/P8cNtlP0Xk7UCDyj7Ah2/34gnV38T/96M
LkJaSZDTjTqve5jLrC91Xr6fCyP7qfNabdEVRDz73r+kH6TiKXt60+2rIsXE
uIrMMTMKf/rypwYfCj/TQn+SEoVf/2H7K3vKv8/Xs2bw32gm1P1GeYnYmhPF
707hKfHvTr5A4TnwO+jwLwrPj5ZfzuCD2Zago7DfQV/hsVWFriCs358F+TVl
dVrzgMITsPui0mEKj42pfJQHZd9m9aIJ9q5KdkU7GaOJso1ZnxH/9X7mw+Db
anmeSnYKz5SMgYYfZW+02M/CTtnffZbGKM47SqbcS6yF/9kE9R7kdzjs0grk
99OSnLoGdd6ixYQLm6j4bw1419Dxtoe8WWIy4kTZT8bv3Aa+dV/32gp7DZ19
B8DP2zp9PazAf1O781/CCHljINUe9j62rnz3KPvFiLzSg5S97+4bxQ6UvX5i
sAH4sHIuUOfF+lHiYnGhmDWFn51FNATx3DLox7mbwn/7k0Un8O9YkX0a9js2
sb5f/m+YUH/XIQD8LR7VXx9R/vUEKqMOUP6NmBn+aFL4ta9J7fhH5evOaOTk
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
+DvKVpvj/YA9Q0YT5me1zb9VDgmOEt99ksaApz1EIxD64P6h6AL4dmhTbRzw
bLrFP91KnfdqbOORA+psSpnptgOo34uEli3wD75Ji8K8IWAn+hf+l866XKLd
7+RD+2r4e0lb292MmG8Dw5Ro73unhY+uhT4/W65uRD9ye5caivtmWPWnONu/
PaSH/5e9wP+ALuII+FBo8bED8bnPM2mG+n3u1D+4j7IX64usfXh5mvQNSaZ9
/wrboJNI+32u6dFH+L3S3aOl5ZgH4vR1qqcp/N0uQw4nrk+Tv9Ym78X877M6
zAr6OWG9vBH8iXkZ9g38N55Z2Qn8A/IxkWw8/eRQzZFS6ENouU4G+HzvsufJ
PRR+KZWS5+Bb7X1NzrUUHgHLcr65vC6SnTvkHPZLWzgWmjH/jDPvD4F+7mj5
GYL5Su/Qy2L8vwLb+wtKfJfoCnijsryAR9hdTBb73h8/7dZjXpL1+9dK64+h
3MqjlP1uS81AWeloIjbGkA7xsRBJksY+oScvSB35SvYbaIF/X+ZHjLh/SYvL
L+XcGibLDF3KsB8I3F7yG3gEPz9agX6R4aCyFvtwXreS3bT3dWqfk0q6xojj
j3eogG/TNTnL0Id/t9nCe6l4fl/5Rxnxvy0SLI3958wthsvNHWPEtpZl2v9z
6H/N+BLz7eP4uBOo38uCr8+gH31lXWmJfk1f03//cN0IcdJ+lRjs6bk++mCe
lDJaaEd+hZemjGjzvyvHRQ7KP/OKrK4yuu/k1MkfNP3h0w/TQfz/GX4Swfv8
056ZieAn23RMIuZD7uC89LD0JnLk+0cv6KG7+1VXxNPhM0sq9ic/33/PxvzW
f1DEkPbeZvJWijRLNylvaJyOeAbJ/2DHvP1ctX4T4il5QJa2LzXLWTmHebtr
2MHcwpquIOCs9Dzm2z2/RZ9Cb3+ojA5h/syP2u+E8/q27zfBPDD2Ji0h5WEx
aTMpcxjx3PgwywTzSWg+T+I2Cn/65dqt0MOiqtab+H2lXF+C9jzvJHmXMfUD
8iVme+43+KlZEeEJ/qicGOGD//RAFlseCg8TwcXTydtECknsJcA39oO5p7A/
Ny5lXIP7rJfNgRm8V0/aoHAd8//ag3ZKWx4ME8WDZ2YxX3GxKWxE/501J2oR
f/3Klecw732Y2EMH/XeUSY8tq/lDpg95pWAeYL1T3wL+VJ/QSMV5Y1PrS7Cf
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
kiUl
              "], "supportVectorCoefficients" -> CompressedData["
1:eJxTTMoPSmVkYGD4ASRmzQSBnfaj9Cg9So/So/QoPUoPO3r/KD1Kj9Kj9Cg9
So/Sw4cGAPg0erM=
              "], "rho" -> 0.07830269485712095|>}, 
          "ProbabilityCoefficients" -> {{-5.578457832336426, 
           1.6939724683761597`}}, "MulticlassStrategy" -> "OneVersusOne", 
          "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "SupportVectorMachine", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "KernelType" -> <|
             "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
            "GammaScalingParameter" -> <|
             "Value" -> 0.10989573329233468`, "Options" -> <||>|>, 
            "SoftMarginParameter" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
            "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
            "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
            "MulticlassStrategy" -> <|
             "Value" -> "OneVersusOne", "Options" -> <||>|>, 
            "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
            "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
          Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
          "PreprocessingTime" -> 0.104745`5.471678294592671, "LossName" -> 
          "MeanCrossEntropy", "BestModelInformation" -> 
          Dataset[<|
            "MeanCrossEntropy" -> 
             Around[0.3891521153777675, 0.06585882543021275], "Accuracy" -> 
             Around[0.8156227863809504, 0.023816932959115408`], 
             "EvaluationTime" -> 7.382410949565029*^-6, "TestSize" -> 132., 
             "ModelMemory" -> 83037.33333333333, "ModelUtility" -> 
             0.2173453979445954, "Round" -> 3, "Iteration" -> 36, 
             "Time" -> {
              0.989148`6.446806270709438, 1.010556`6.456105378459726}, 
             "TrainingSize" -> 526, "TrainingTime" -> 0.019952623149688785`, 
             "TrainingMemory" -> 1.2454133333333333`*^6, "ExperimentCount" -> 
             2, "MeanCrossEntropyHistory" -> {
               Around[0.44233955689150667`, 0.0623422394834495], 
               Around[0.3359646738640283, 0.049652331222881964`]}, 
             "AccuracyHistory" -> {
               Around[0.8136546330073089, 0.033758925925582134`], 
               Around[0.8175909397545918, 0.03337836479078159]}, 
             "IterationHistory" -> {34, 36}, 
             "TimeHistory" -> {{
               0.939674`6.42452220394955, 0.960609`6.434091644747519}, {
               0.989148`6.446806270709438, 1.010556`6.456105378459726}}, 
             "Configuration" -> {
              "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
               "GammaScalingParameter" -> 0.10989573329233468`, 
               "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 3, 
               "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
               "Shrinking" -> True, "KernelCacheSize" -> 100}, 
             "FinalTrainingSize" -> 658|>, 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
          "Configurations" -> 
          Dataset[<|<|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.04666752359332513|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8439301214397855, 0.037186055122376535`], 
                  "Accuracy" -> 
                  Around[0.5547786030884142, 0.028301521084085034`], 
                  "EvaluationTime" -> 4.712755538992046*^-6, "TestSize" -> 
                  600, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5322388046619222, "Round" -> 1, 
                  "Iteration" -> 1, 
                  "Time" -> {
                   0.122152`5.538445575586048, 0.139903`5.597372020850392}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 103728, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8439301214397855, 0.0262945117426092]}, 
                  "AccuracyHistory" -> {
                    Around[0.5547786030884142, 0.020012197476450576`]}, 
                  "IterationHistory" -> {1}, 
                  "TimeHistory" -> {{
                    0.122152`5.538445575586048, 
                    0.139903`5.597372020850392}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8677685057176336, 0.040744688356682456`], 
                  "Accuracy" -> 
                  Around[0.5456159928978409, 0.02943747217208678], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.5606672451122188, "Round" -> 2, 
                  "Iteration" -> 8, 
                  "Time" -> {
                   0.262659`5.870937279972894, 0.286662`5.9089151200521615}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 134368, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8677685057176336, 0.02881084543434273]}, 
                  "AccuracyHistory" -> {
                    Around[0.5456159928978409, 0.020815436193872848`]}, 
                  "IterationHistory" -> {8}, 
                  "TimeHistory" -> {{
                    0.262659`5.870937279972894, 
                    0.286662`5.9089151200521615}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7409378410823857, 0.043156630346614946`], 
                  "Accuracy" -> 
                  Around[0.5000578227091143, 0.06131160122794463], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 85912, 
                  "ModelUtility" -> -0.40489584677487134`, "Round" -> 3, 
                  "Iteration" -> 33, 
                  "Time" -> {
                   0.920012`6.4153384855152185, 0.938488`6.423973717371717}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 1248760, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7409378410823857, 0.03051634597125257]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000578227091143, 0.0433538489936851]}, 
                  "IterationHistory" -> {33}, 
                  "TimeHistory" -> {{
                    0.920012`6.4153384855152185, 
                    0.938488`6.423973717371717}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.7409378410823857, 0.043156630346614946`], 
                 "ModelMemory" -> 85912, "TrainingMemory" -> 1248760, 
                 "TrainingTime" -> 0.03241548454834875|>, "Index" -> 1|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.007642779509540398|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8419603148720739, 0.037001579224496504`], 
                  "Accuracy" -> 
                  Around[0.5547786030884142, 0.028301521084085034`], 
                  "EvaluationTime" -> 5.272639267326165*^-6, "TestSize" -> 
                  600, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5298789890466593, "Round" -> 1, 
                  "Iteration" -> 3, 
                  "Time" -> {
                   0.158307`5.651045112364392, 0.176661`5.698685677953323}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109952, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8419603148720739, 0.026164067584252753`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5547786030884142, 0.020012197476450576`]}, 
                  "IterationHistory" -> {3}, 
                  "TimeHistory" -> {{
                    0.158307`5.651045112364392, 
                    0.176661`5.698685677953323}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8599231386229831, 0.04108052734299613], "Accuracy" -> 
                  Around[0.5456159928978409, 0.02943747217208678], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.551747522578478, "Round" -> 2, 
                  "Iteration" -> 11, 
                  "Time" -> {
                   0.331453`5.971966947691427, 0.354492`6.001151432182735}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 135312, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8599231386229831, 0.029048319458951945`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5456159928978409, 0.020815436193872848`]}, 
                  "IterationHistory" -> {11}, 
                  "TimeHistory" -> {{
                    0.331453`5.971966947691427, 
                    0.354492`6.001151432182735}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.42310197033398295`, 0.043468411079776455`], 
                  "Accuracy" -> 
                  Around[0.824550627958579, 0.023513493840623442`], 
                  "EvaluationTime" -> 9.381721243472329*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 86258.66666666666, "ModelUtility" -> 
                  0.14665028939959812`, "Round" -> 3, "Iteration" -> 35, 
                  "Time" -> {
                   0.961846`6.434650536735373, 0.987591`6.446122117011694}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 
                  1.2366933333333333`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.4486050970279575, 0.04952237070588451], 
                    Around[0.3975988436400084, 0.050044512295346295`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8284425870866655, 0.032687433435397456`], 
                    Around[0.8206586688304927, 0.03290246739337342]}, 
                  "IterationHistory" -> {32, 35}, 
                  "TimeHistory" -> {{
                    0.896637`6.404161649690122, 0.918802`6.414766925369439}, {
                    0.961846`6.434650536735373, 
                    0.987591`6.446122117011694}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 9.381721243472329*^-6, "MeanCrossEntropy" -> 
                 Around[0.42310197033398295`, 0.043468411079776455`], 
                 "ModelMemory" -> 86258.66666666666, "TrainingMemory" -> 
                 1.2366933333333333`*^6, "TrainingTime" -> 
                 0.03754899942686794|>, "Index" -> 2|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.17222802963895698`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8215609940394873, 0.0349568782576325], "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 5.337357107459214*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5050751669448412, "Round" -> 1, 
                  "Iteration" -> 12, 
                  "Time" -> {
                   0.355534`6.002426132475456, 0.372691`6.02289389873296}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 108512, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8215609940394873, 0.024718245665084525`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {12}, 
                  "TimeHistory" -> {{
                    0.355534`6.002426132475456, 
                    0.372691`6.02289389873296}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5238871772949569, 0.035603499658542946`], 
                  "Accuracy" -> 
                  Around[0.7656120836023248, 0.02513075807533313], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, 
                  "ModelUtility" -> -0.06017227205849052, "Round" -> 2, 
                  "Iteration" -> 14, 
                  "Time" -> {
                   0.39457`6.047669055330163, 0.412756`6.0672383885693915}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 133896, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5238871772949569, 0.025175476042528646`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7656120836023248, 0.017770129451426645`]}, 
                  "IterationHistory" -> {14}, 
                  "TimeHistory" -> {{
                    0.39457`6.047669055330163, 
                    0.412756`6.0672383885693915}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5992747640955812, 0.1452615907096404], "Accuracy" -> 
                  Around[0.8060457038245008, 0.04848400383845162], 
                  "EvaluationTime" -> 7.175644776492659*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 61416, 
                  "ModelUtility" -> -0.22845739802145304`, "Round" -> 3, 
                  "Iteration" -> 22, 
                  "Time" -> {
                   0.551057`6.192741517039475, 0.568938`6.206609935242591}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 841824, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5992747640955812, 0.10271545583673151`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8060457038245008, 0.03428336789324374]}, 
                  "IterationHistory" -> {22}, 
                  "TimeHistory" -> {{
                    0.551057`6.192741517039475, 
                    0.568938`6.206609935242591}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.175644776492659*^-6, "MeanCrossEntropy" -> 
                 Around[0.5992747640955812, 0.1452615907096404], 
                 "ModelMemory" -> 61416, "TrainingMemory" -> 841824, 
                 "TrainingTime" -> 0.03241548454834875|>, "Index" -> 3|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.0694112151988088|>,
                  "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8176051025226393, 0.03409806116420723], "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 6.2281482591799915`*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5000809503673194, "Round" -> 1, 
                  "Iteration" -> 6, 
                  "Time" -> {
                   0.217464`5.788932365612423, 0.239389`5.830649184056518}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 111504, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8176051025226393, 0.024110970274524596`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {6}, 
                  "TimeHistory" -> {{
                    0.217464`5.788932365612423, 
                    0.239389`5.830649184056518}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4823055842066417, 0.035156275165334386`], 
                  "Accuracy" -> 
                  Around[0.7877304624642185, 0.024329072883904693`], 
                  "EvaluationTime" -> 4.3187162757313584`*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, "ModelUtility" -> 
                  0.021553499753968697`, "Round" -> 2, "Iteration" -> 21, 
                  "Time" -> {
                   0.528117`6.174275141077937, 0.55002`6.191923475229701}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134536, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.4823055842066417, 0.024859240570668153`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7877304624642185, 0.01720325241619076]}, 
                  "IterationHistory" -> {21}, 
                  "TimeHistory" -> {{
                    0.528117`6.174275141077937, 
                    0.55002`6.191923475229701}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.636095801551506, 0.14943436480918063`], "Accuracy" -> 
                  Around[0.8060457038245008, 0.04848400383845162], 
                  "EvaluationTime" -> 0.000022826315644976148`, "TestSize" -> 
                  132, "ModelMemory" -> 59368, 
                  "ModelUtility" -> -0.2866601475543671, "Round" -> 3, 
                  "Iteration" -> 25, 
                  "Time" -> {
                   0.61617`6.241245543121773, 0.639815`6.257599411083488}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 793664, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.636095801551506, 0.105666052698876]}, 
                  "AccuracyHistory" -> {
                    Around[0.8060457038245008, 0.03428336789324374]}, 
                  "IterationHistory" -> {25}, 
                  "TimeHistory" -> {{
                    0.61617`6.241245543121773, 
                    0.639815`6.257599411083488}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 0.000022826315644976148`, 
                 "MeanCrossEntropy" -> 
                 Around[0.636095801551506, 0.14943436480918063`], 
                 "ModelMemory" -> 59368, "TrainingMemory" -> 793664, 
                 "TrainingTime" -> 0.04080867723353741|>, "Index" -> 4|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.02032890196258133|>, 
                 "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8188458343878764, 0.034310933017509065`], 
                  "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 5.303782337060543*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5016363473413388, "Round" -> 1, 
                  "Iteration" -> 5, 
                  "Time" -> {
                   0.197453`5.747008730067131, 0.216398`5.786798236099739}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109616, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8188458343878764, 0.02426149340551807]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {5}, 
                  "TimeHistory" -> {{
                    0.197453`5.747008730067131, 
                    0.216398`5.786798236099739}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.46653567925911005`, 0.037920328890656496`], 
                  "Accuracy" -> 
                  Around[0.798000814327786, 0.023932466184215215`], 
                  "EvaluationTime" -> 5.436941665847272*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, "ModelUtility" -> 
                  0.053144667324051986`, "Round" -> 2, "Iteration" -> 15, 
                  "Time" -> {
                   0.413783`6.06831763749158, 0.436318`6.091348123373516}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134752, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.46653567925911005`, 0.026813721703407355`]}, 
                  "AccuracyHistory" -> {
                    Around[0.798000814327786, 0.016922809129376316`]}, 
                  "IterationHistory" -> {15}, 
                  "TimeHistory" -> {{
                    0.413783`6.06831763749158, 
                    0.436318`6.091348123373516}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6435854595196441, 0.14972206495339532`], 
                  "Accuracy" -> 
                  Around[0.8060457038245008, 0.04848400383845162], 
                  "EvaluationTime" -> 7.175644776492659*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 57320, 
                  "ModelUtility" -> -0.29792876534366763`, "Round" -> 3, 
                  "Iteration" -> 18, 
                  "Time" -> {
                   0.473286`6.12666865153956, 0.490518`6.142199942331698}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 789256, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6435854595196441, 0.10586948742179855`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8060457038245008, 0.03428336789324374]}, 
                  "IterationHistory" -> {18}, 
                  "TimeHistory" -> {{
                    0.473286`6.12666865153956, 
                    0.490518`6.142199942331698}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.175644776492659*^-6, "MeanCrossEntropy" -> 
                 Around[0.6435854595196441, 0.14972206495339532`], 
                 "ModelMemory" -> 57320, "TrainingMemory" -> 789256, 
                 "TrainingTime" -> 0.03241548454834875|>, "Index" -> 5|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.10989573329233468`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.831318713107265, 0.03567650389904926], "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 5.135537339414236*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5169548580777362, "Round" -> 1, 
                  "Iteration" -> 13, 
                  "Time" -> {
                   0.373705`6.024073902043718, 0.39356`6.046555945394379}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 111568, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.831318713107265, 0.02522709783604603]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {13}, 
                  "TimeHistory" -> {{
                    0.373705`6.024073902043718, 
                    0.39356`6.046555945394379}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8335628070835208, 0.03893223698041015], "Accuracy" -> 
                  Around[0.5456159928978409, 0.02943747217208678], 
                  "EvaluationTime" -> 4.698016482522719*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.5204022591065505, "Round" -> 2, 
                  "Iteration" -> 24, 
                  "Time" -> {
                   0.593076`6.224655343294846, 0.61513`6.240511901655703}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134472, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8335628070835208, 0.02752924877560969]}, 
                  "AccuracyHistory" -> {
                    Around[0.5456159928978409, 0.020815436193872848`]}, 
                  "IterationHistory" -> {24}, 
                  "TimeHistory" -> {{
                    0.593076`6.224655343294846, 
                    0.61513`6.240511901655703}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.3891521153777675, 0.06585882543021275], "Accuracy" -> 
                  Around[0.8156227863809504, 0.023816932959115408`], 
                  "EvaluationTime" -> 7.382410949565029*^-6, "TestSize" -> 
                  132., "ModelMemory" -> 83037.33333333333, "ModelUtility" -> 
                  0.2173453979445954, "Round" -> 3, "Iteration" -> 36, 
                  "Time" -> {
                   0.989148`6.446806270709438, 1.010556`6.456105378459726}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 
                  1.2454133333333333`*^6, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.44233955689150667`, 0.0623422394834495], 
                    Around[0.3359646738640283, 0.049652331222881964`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8136546330073089, 0.033758925925582134`], 
                    Around[0.8175909397545918, 0.03337836479078159]}, 
                  "IterationHistory" -> {34, 36}, 
                  "TimeHistory" -> {{
                    0.939674`6.42452220394955, 0.960609`6.434091644747519}, {
                    0.989148`6.446806270709438, 
                    1.010556`6.456105378459726}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.382410949565029*^-6, "MeanCrossEntropy" -> 
                 Around[0.3891521153777675, 0.06585882543021275], 
                 "ModelMemory" -> 83037.33333333333, "TrainingMemory" -> 
                 1.2454133333333333`*^6, "TrainingTime" -> 
                 0.040808677233537406`|>, "Index" -> 6|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|"Value" -> 0.2187574552805577|>,
                  "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.774950814637056, 0.032301456413812886`], 
                  "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 4.011124293114147*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.446496515869485, "Round" -> 1, 
                  "Iteration" -> 2, 
                  "Time" -> {
                   0.140954`5.6006223983100405, 0.157254`5.648146694709201}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 108784, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.774950814637056, 0.022840578872408788`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {2}, 
                  "TimeHistory" -> {{
                    0.140954`5.6006223983100405, 
                    0.157254`5.648146694709201}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5122530147287158, 0.06743999173469828], "Accuracy" -> 
                  Around[0.8187284497624239, 0.027078988434089266`], 
                  "EvaluationTime" -> 8.287920838697083*^-6, "TestSize" -> 
                  400, "ModelMemory" -> 21992, 
                  "ModelUtility" -> -0.05020411017833515, "Round" -> 2, 
                  "Iteration" -> 7, 
                  "Time" -> {
                   0.240509`5.83267632608609, 0.261592`5.869169451768304}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 135680, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5122530147287158, 0.047687275478769865`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8187284497624239, 0.01914773634941661]}, 
                  "IterationHistory" -> {7}, 
                  "TimeHistory" -> {{
                    0.240509`5.83267632608609, 
                    0.261592`5.869169451768304}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.48022236885834546`, 0.11699163625369402`], 
                  "Accuracy" -> 
                  Around[0.8284425870866657, 0.046227011683506854`], 
                  "EvaluationTime" -> 7.175644776492659*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 53224, 
                  "ModelUtility" -> -0.007219694782372499, "Round" -> 3, 
                  "Iteration" -> 19, 
                  "Time" -> {
                   0.491572`6.143132130949179, 0.508319`6.157681336605992}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 625520, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.48022236885834546`, 0.08272557933709697]}, 
                  "AccuracyHistory" -> {
                    Around[0.8284425870866657, 0.032687433435397456`]}, 
                  "IterationHistory" -> {19}, 
                  "TimeHistory" -> {{
                    0.491572`6.143132130949179, 
                    0.508319`6.157681336605992}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.175644776492659*^-6, "MeanCrossEntropy" -> 
                 Around[0.48022236885834546`, 0.11699163625369402`], 
                 "ModelMemory" -> 53224, "TrainingMemory" -> 625520, 
                 "TrainingTime" -> 0.029826230430407087`|>, "Index" -> 7|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11963790958285683`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.817376661320853, 0.03350609821575246], "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 5.210017442549947*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.49966016287606385`, "Round" -> 1, 
                  "Iteration" -> 10, 
                  "Time" -> {
                   0.311584`5.945120141822183, 0.330422`5.970613949095038}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 110280, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.817376661320853, 0.023692389259461048`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {10}, 
                  "TimeHistory" -> {{
                    0.311584`5.945120141822183, 
                    0.330422`5.970613949095038}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.45182228417955866`, 0.04058384068932441], 
                  "Accuracy" -> 
                  Around[0.8170552095510946, 0.023025782791265503`], 
                  "EvaluationTime" -> 4.3187162757313584`*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 23016, "ModelUtility" -> 
                  0.08351059915067383, "Round" -> 2, "Iteration" -> 16, 
                  "Time" -> {
                   0.437349`6.092373131342667, 0.454243`6.1088332369393425}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 133424, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.45182228417955866`, 0.02869710895801582]}, 
                  "AccuracyHistory" -> {
                    Around[0.8170552095510946, 0.016281687153832346`]}, 
                  "IterationHistory" -> {16}, 
                  "TimeHistory" -> {{
                    0.437349`6.092373131342667, 
                    0.454243`6.1088332369393425}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5740147776313634, 0.13550462095147178`], 
                  "Accuracy" -> 
                  Around[0.8060457038245008, 0.04848400383845162], 
                  "EvaluationTime" -> 7.175644776492659*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 57320, 
                  "ModelUtility" -> -0.18418384785799025`, "Round" -> 3, 
                  "Iteration" -> 17, 
                  "Time" -> {
                   0.455315`6.109856951535156, 0.472229`6.125697647465376}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 748016, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5740147776313634, 0.09581623635689841]}, 
                  "AccuracyHistory" -> {
                    Around[0.8060457038245008, 0.03428336789324374]}, 
                  "IterationHistory" -> {17}, 
                  "TimeHistory" -> {{
                    0.455315`6.109856951535156, 
                    0.472229`6.125697647465376}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.175644776492659*^-6, "MeanCrossEntropy" -> 
                 Around[0.5740147776313634, 0.13550462095147178`], 
                 "ModelMemory" -> 57320, "TrainingMemory" -> 748016, 
                 "TrainingTime" -> 0.03241548454834875|>, "Index" -> 8|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11393838293550193`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.9013764435713492, 0.04454536466425192], "Accuracy" -> 
                  Around[0.5000384558720634, 0.035266849577765755`], 
                  "EvaluationTime" -> 0.000010047595143039011`, "TestSize" -> 
                  400, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.5991534312379826, "Round" -> 1, 
                  "Iteration" -> 4, 
                  "Time" -> {
                   0.17766`5.701134651268914, 0.19641`5.7447085891376295}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 109888, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.9013764435713492, 0.03149832942452015]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000384558720634, 0.024937428487524095`]}, 
                  "IterationHistory" -> {4}, 
                  "TimeHistory" -> {{
                    0.17766`5.701134651268914, 
                    0.19641`5.7447085891376295}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5958932490837131, 0.03311099839279349], "Accuracy" -> 
                  Around[0.6301478220241514, 0.028624092015491123`], 
                  "EvaluationTime" -> 4.3187162757313584`*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.18650870634066885`, "Round" -> 2, 
                  "Iteration" -> 23, 
                  "Time" -> {
                   0.569993`6.207414515694707, 0.592028`6.223887240688366}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 130984, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5958932490837131, 0.02341301149540115]}, 
                  "AccuracyHistory" -> {
                    Around[0.6301478220241514, 0.020240289569461483`]}, 
                  "IterationHistory" -> {23}, 
                  "TimeHistory" -> {{
                    0.569993`6.207414515694707, 
                    0.592028`6.223887240688366}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6389588057408737, 0.1555256640958546], "Accuracy" -> 
                  Around[0.8060457038245008, 0.04848400383845162], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 65512, 
                  "ModelUtility" -> -0.2927697938985745, "Round" -> 3, 
                  "Iteration" -> 30, 
                  "Time" -> {
                   0.856783`6.3844158342802775, 0.874336`6.3932233539379775}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 929200, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6389588057408737, 0.10997325173071995`]}, 
                  "AccuracyHistory" -> {
                    Around[0.8060457038245008, 0.03428336789324374]}, 
                  "IterationHistory" -> {30}, 
                  "TimeHistory" -> {{
                    0.856783`6.3844158342802775, 
                    0.874336`6.3932233539379775}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.6389588057408737, 0.1555256640958546], 
                 "ModelMemory" -> 65512, "TrainingMemory" -> 929200, 
                 "TrainingTime" -> 0.03241548454834875|>, "Index" -> 9|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.14750911374959483`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.8306488795948662, 0.035626913467478934`], 
                  "Accuracy" -> 
                  Around[0.5632414349638076, 0.027247412853035908`], 
                  "EvaluationTime" -> 5.3030228333718475`*^-6, "TestSize" -> 
                  643, "ModelMemory" -> 12904, 
                  "ModelUtility" -> -0.516143809242367, "Round" -> 1, 
                  "Iteration" -> 9, 
                  "Time" -> {
                   0.287703`5.91048938398085, 0.310506`5.943614990091389}, 
                  "TrainingSize" -> 15, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 110072, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8306488795948662, 0.025192032105600688`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5632414349638076, 0.019266830398171182`]}, 
                  "IterationHistory" -> {9}, 
                  "TimeHistory" -> {{
                    0.287703`5.91048938398085, 
                    0.310506`5.943614990091389}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.8207796501262515, 0.03833496500068639], "Accuracy" -> 
                  Around[0.5456159928978409, 0.02943747217208678], 
                  "EvaluationTime" -> 4.404541914290967*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.5049478333052899, "Round" -> 2, 
                  "Iteration" -> 20, 
                  "Time" -> {
                   0.509357`6.1585672724609095, 0.527066`6.173409995124251}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 130320, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8207796501262515, 0.027106913708534304`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5456159928978409, 0.020815436193872848`]}, 
                  "IterationHistory" -> {20}, 
                  "TimeHistory" -> {{
                    0.509357`6.1585672724609095, 
                    0.527066`6.173409995124251}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4745474554735481, 0.1122216281979999], "Accuracy" -> 
                  Around[0.8284425870866657, 0.046227011683506854`], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 79840, "ModelUtility" -> 
                  0.0060294386559568425`, "Round" -> 3, "Iteration" -> 29, 
                  "Time" -> {
                   0.831656`6.371488718590411, 0.855569`6.383800033803081}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 1213768, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.4745474554735481, 0.0793526742946012]}, 
                  "AccuracyHistory" -> {
                    Around[0.8284425870866657, 0.032687433435397456`]}, 
                  "IterationHistory" -> {29}, 
                  "TimeHistory" -> {{
                    0.831656`6.371488718590411, 
                    0.855569`6.383800033803081}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.4745474554735481, 0.1122216281979999], 
                 "ModelMemory" -> 79840, "TrainingMemory" -> 1213768, 
                 "TrainingTime" -> 0.04080867723353741|>, "Index" -> 10|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.11929444716171297`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 3|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.5568541909872359, 0.06620315444813898], "Accuracy" -> 
                  Around[0.8161402694358776, 0.023057561888709673`], 
                  "EvaluationTime" -> 5.446084085941896*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 21992, 
                  "ModelUtility" -> -0.13119808759479812`, "Round" -> 2, 
                  "Iteration" -> 26, 
                  "Time" -> {
                   0.74875`6.325881828893341, 0.778341`6.342714901504516}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 130752, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5568541909872359, 0.04681269944621942]}, 
                  "AccuracyHistory" -> {
                    Around[0.8161402694358776, 0.016304158369135107`]}, 
                  "IterationHistory" -> {26}, 
                  "TimeHistory" -> {{
                    0.74875`6.325881828893341, 
                    0.778341`6.342714901504516}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4802530423314485, 0.10330502475165199`], 
                  "Accuracy" -> 
                  Around[0.8214179046058993, 0.04694927292322276], 
                  "EvaluationTime" -> 7.795943295709771*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 53224, 
                  "ModelUtility" -> -0.0018308218068279203`, "Round" -> 3, 
                  "Iteration" -> 28, 
                  "Time" -> {
                   0.809794`6.359919548125767, 0.830478`6.370873125641417}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.01995262314968879, "TrainingMemory" -> 664856, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.4802530423314485, 0.07304768353253725]}, 
                  "AccuracyHistory" -> {
                    Around[0.8214179046058993, 0.033198149255788775`]}, 
                  "IterationHistory" -> {28}, 
                  "TimeHistory" -> {{
                    0.809794`6.359919548125767, 
                    0.830478`6.370873125641417}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 7.795943295709771*^-6, "MeanCrossEntropy" -> 
                 Around[0.4802530423314485, 0.10330502475165199`], 
                 "ModelMemory" -> 53224, "TrainingMemory" -> 664856, 
                 "TrainingTime" -> 0.04080867723353741|>, "Index" -> 11|>, <|
              "Value" -> "SupportVectorMachine", 
               "Options" -> <|
                "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                 "GammaScalingParameter" -> <|
                  "Value" -> 0.010014714055653767`|>, 
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                 "PolynomialDegree" -> <|"Value" -> 3|>, 
                 "BiasParameter" -> <|"Value" -> 1|>, 
                 "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                 "Shrinking" -> <|"Value" -> True|>, 
                 "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.863148867761764, 0.040284322917792464`], 
                  "Accuracy" -> 
                  Around[0.5456159928978409, 0.02943747217208678], 
                  "EvaluationTime" -> 4.3187162757313584`*^-6, "TestSize" -> 
                  558, "ModelMemory" -> 22504, 
                  "ModelUtility" -> -0.5552735516295296, "Round" -> 2, 
                  "Iteration" -> 27, 
                  "Time" -> {
                   0.779491`6.343356098687412, 0.808617`6.359287861001399}, 
                  "TrainingSize" -> 100, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 134096, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.863148867761764, 0.028485317910679694`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5456159928978409, 0.020815436193872848`]}, 
                  "IterationHistory" -> {27}, 
                  "TimeHistory" -> {{
                    0.779491`6.343356098687412, 
                    0.808617`6.359287861001399}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.7423258841572546, 0.04262910993682897], "Accuracy" -> 
                  Around[0.5000578227091143, 0.06131160122794463], 
                  "EvaluationTime" -> 8.576852864450492*^-6, "TestSize" -> 
                  132, "ModelMemory" -> 85912, 
                  "ModelUtility" -> -0.40660542028714475`, "Round" -> 3, 
                  "Iteration" -> 31, 
                  "Time" -> {
                   0.875523`6.393812552986687, 0.895457`6.403589729285607}, 
                  "TrainingSize" -> 526, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 1248760, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7423258841572546, 0.0301433327122786]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000578227091143, 0.0433538489936851]}, 
                  "IterationHistory" -> {31}, 
                  "TimeHistory" -> {{
                    0.875523`6.393812552986687, 
                    0.895457`6.403589729285607}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 8.576852864450492*^-6, "MeanCrossEntropy" -> 
                 Around[0.7423258841572546, 0.04262910993682897], 
                 "ModelMemory" -> 85912, "TrainingMemory" -> 1248760, 
                 "TrainingTime" -> 0.03567516235501822|>, "Index" -> 12|>|>, 
            TypeSystem`Assoc[
             TypeSystem`Struct[{"Value", "Options"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["SupportVectorMachine"]], 
               
               TypeSystem`Struct[{
                "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                 "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                 "Shrinking", "KernelCacheSize"}, {
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[
                    TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Real]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}], 
                 TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[TypeSystem`Boolean]}], 
                 TypeSystem`Struct[{"Value"}, {
                   TypeSystem`Atom[Integer]}]}]}], 
             
             TypeSystem`Struct[{
              "Experiments", "PredictedPerformances", "Index"}, {
               TypeSystem`Vector[
                
                TypeSystem`Struct[{
                 "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize",
                   "ModelMemory", "ModelUtility", "Round", "Iteration", 
                  "Time", "TrainingSize", "TrainingTime", "TrainingMemory", 
                  "ExperimentCount", "MeanCrossEntropyHistory", 
                  "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                 TypeSystem`AnyType, TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                  TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                  TypeSystem`Vector[
                   TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                  TypeSystem`Vector[
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
                TypeSystem`AnyLength], 
               
               TypeSystem`Struct[{
                "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                 "TrainingMemory", "TrainingTime"}, {
                 TypeSystem`Atom[Real], TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Atom[Integer]}], 12], <||>], 
          "TrainingSizes" -> {15, 100, 526}, "MaxTrainingSize" -> 658, 
          "PreprocessorEvaluationTime" -> 2.08203125*^-6, 
          "PreprocessorMemory" -> 97488, "InputDimension" -> 6, 
          "OutputDimension" -> 1, 
          "BaselineLogProbability" -> -0.6854091106388783, "VariableBudget" -> 
          True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
          "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
          "RoundPartitioning" -> 
          Dataset[{<|
             "TrainingSizes" -> 15, "TimeBudgets" -> 0.196, "ElapsedTimes" -> 
              0.19280599999999998`, "ExperimentCounts" -> 10|>, <|
             "TrainingSizes" -> 100, "TimeBudgets" -> 0.27999999999999997`, 
              "ElapsedTimes" -> 0.27068899999999996`, "ExperimentCounts" -> 
              12|>, <|"TrainingSizes" -> 526, "TimeBudgets" -> 0.4, 
              "ElapsedTimes" -> 0.394798, "ExperimentCounts" -> 14|>}, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
               "ExperimentCounts"}, {
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 1.04841, 
          "MaxTrainingMemory" -> 2404960, "DataMemory" -> 160336, 
          "FunctionMemory" -> 449136, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 40, 24.508606`8.141893592775606}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{Automatic}}, "Rows" -> {
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96]}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {
      1 -> GrayLevel[0], 2 -> GrayLevel[0], 3 -> GrayLevel[0.8], 4 -> 
       GrayLevel[0.8], 4 -> GrayLevel[0]}, 
     "Rows" -> {True, True, {False}, True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.932296397571745*^9, {3.9322964848201323`*^9, 3.932296495785227*^9}, 
   3.93229663719835*^9, 3.932296824614953*^9},
 CellLabel->"Out[9]=",
 CellID->1560235310,ExpressionUUID->"0b224654-b5c1-4b7c-b638-04ffe0259d6e"]
}, Open  ]],

Cell["Compute classifier measurements:", "ExampleText",
 CellChangeTimes->{{3.9322965793226213`*^9, 3.9322965868969803`*^9}, {
  3.932296697730775*^9, 3.932296700600655*^9}, {3.932296814936654*^9, 
  3.932296815623439*^9}},
 CellID->1356887892,ExpressionUUID->"beecf9db-052d-4e8a-8e72-c1bf8d669e82"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"measures", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EnsembleClassifierMeasurements", "[", 
   RowBox[{"aCLs", ",", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"testData", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", 
        RowBox[{"1", ";;", 
         RowBox[{"-", "2"}]}]}], "\[RightDoubleBracket]"}], "\[Rule]", 
      RowBox[{"testData", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "\[RightDoubleBracket]"}]}], "]"}], ",", 
    "measures"}], "]"}], "//", 
  RowBox[{
   RowBox[{"AssociationThread", "[", 
    RowBox[{"measures", ",", "#"}], "]"}], "&"}]}]}], "Input",
 CellChangeTimes->{{3.7066572643935966`*^9, 3.706657287592332*^9}, {
  3.706657318429618*^9, 3.706657333931768*^9}, {3.9322967258817463`*^9, 
  3.93229679007598*^9}},
 CellLabel->"In[10]:=",
 CellID->1139785810,ExpressionUUID->"b431ff44-3fb3-41ba-86a6-df8b7a014667"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7802547770700637`"}], ",", 
   RowBox[{"\<\"Precision\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.8121827411167513`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7264957264957266`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Recall\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.8333333333333333`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6967213114754098`"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.9322968164263353`*^9, 3.932296824717558*^9}},
 CellLabel->"Out[11]=",
 CellID->2099525300,ExpressionUUID->"19080328-8905-489e-8127-db1a324cefa9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "More Examples",
 Cell[BoxData[
  TemplateBox[{"MoreExamples", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Extended examples in standardized sections.", "MoreInfoText"], 
       BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "73ba482d-8107-4b25-9908-c355a91a40ef"]
}], "ExtendedExamplesSection",
 CellTags->"ExtendedExamples",
 CellID->1252026263,ExpressionUUID->"09deac8d-585d-40cd-ad21-ef57167ecce8"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Scope", "ExampleSection",ExpressionUUID->
   "36b76ff2-67a8-4732-bda1-272d5322fdfa"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1760628935,ExpressionUUID->"09a61cdc-5c5b-43ab-bee9-95328b638662"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Generalizations & Extensions", "ExampleSection",ExpressionUUID->
   "25142633-5120-4696-a072-1a7c3f975dfb"],
  $Line = 0; Null]], "ExampleSection",
 CellID->713338532,ExpressionUUID->"a95613db-43d3-41e2-9906-761e83dda924"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Options", "ExampleSection",ExpressionUUID->
   "3aafaaee-6829-4e57-91bd-c856dfb92c71"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1826989770,ExpressionUUID->"cfbd1f4f-a634-4d43-b733-1f165c613e47"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "c7d06887-53fc-4a58-a910-bcc9b2846bde"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->1495879584,ExpressionUUID->"8d5b2eae-125c-48d1-93de-b1425f3982a6"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "14f25fde-1186-44db-93f2-0129e3b44eb8"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->657112859,ExpressionUUID->"fa82cdfe-3ba1-47c3-b788-b31114c7d2bb"]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell[
  "Applications", "ExampleSection",ExpressionUUID->
   "f91d2daf-613b-4322-a4cc-a5801f540fe6"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1734908339,ExpressionUUID->"1bc32dfb-9b1b-4b4e-8bef-e7f88bfddbe1"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Properties & Relations", "ExampleSection",ExpressionUUID->
   "a37f82b5-ec3a-43f5-8aba-0125b1d6cfff"],
  $Line = 0; Null]], "ExampleSection",
 CellID->71494607,ExpressionUUID->"442bedc6-5dc5-4f1d-bb2f-e45eacf40572"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Possible Issues", "ExampleSection",ExpressionUUID->
   "771d2be9-7e48-4a55-a167-2cece20c6797"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1166501176,ExpressionUUID->"928d518b-1fdd-435f-824f-8b918fe785bb"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Interactive Examples", "ExampleSection",ExpressionUUID->
   "ac5c3e26-d14e-4aa3-90fe-8ec868171f94"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1007051569,ExpressionUUID->"34b0a11e-17aa-494f-a35f-77d7ce5cc869"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Neat Examples", "ExampleSection",ExpressionUUID->
   "ecbf6cb2-711c-41bf-9d40-456ca79a5cdc"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1197098176,ExpressionUUID->"e2da16ee-6d8c-4139-b8b7-bf5659be6e20"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->2002238936,ExpressionUUID->"b71bb694-803f-46b9-ae01-ab53bc3888e6"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"2ba3dfd1-5160-4a9b-84be-1e26956de99a"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"de61ec1f-348a-4692-acc3-4d50b4ab50b1"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "58a3123a-0ad1-4f1d-a2fa-5312696343de"]
}], "History",
 CellChangeTimes->{{3.864923683926749*^9, 3.864923685610183*^9}, {
  3.932296835480403*^9, 3.9322968366278563`*^9}},
 CellID->561048862,ExpressionUUID->"4a8d4280-72ef-4229-adfb-d76f16e76300"],

Cell[CellGroupData[{

Cell[TextData[{
 "Categorization",
 Cell[BoxData[
  TemplateBox[{"Metadata", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Metadata such as page URI, context, and type of documentation page.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "7c837eb3-1007-43fb-b795-9bb76b524902"]
}], "CategorizationSection",
 CellID->2095013304,ExpressionUUID->"c6661890-4c4e-438c-ba87-71b40a7f332f"],

Cell["Symbol", "Categorization",
 CellLabel->"Entity Type",
 CellID->746724116,ExpressionUUID->"acacc1a7-4a69-4c68-8333-7dd30759b844"],

Cell["AntonAntonov/ClassifierEnsembles", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1713216937,ExpressionUUID->"21c7f32c-d77e-484b-b497-104e72e136fc"],

Cell["AntonAntonov`ClassifierEnsembles`", "Categorization",
 CellLabel->"Context",
 CellID->576321183,ExpressionUUID->"603d9268-f0e9-4aab-a65b-f359e738b4f7"],

Cell["\<\
AntonAntonov/ClassifierEnsembles/ref/ResamplingEnsembleClassifier\
\>", "Categorization",
 CellLabel->"URI",
 CellID->1078874711,ExpressionUUID->"cf03b907-0589-4671-a3e7-ead92c96674b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->673925570,ExpressionUUID->"04c837ba-dd40-4ee8-87d7-a5b85e8b28c1"],

Cell["XXXX", "Keywords",
 CellID->838300712,ExpressionUUID->"c5480465-cd2a-43c6-8388-7bfaafc934f5"]
}, Closed]],

Cell[CellGroupData[{

Cell["Syntax Templates", "TemplatesSection",
 CellID->1827342264,ExpressionUUID->"4de58c01-7bfd-4fda-b21c-dec7573eb119"],

Cell[BoxData[""], "Template",
 CellLabel->"Additional Function Template",
 CellID->977795301,ExpressionUUID->"f88b0f59-82be-40bf-90d5-e3f3bb17b8a3"],

Cell[BoxData[""], "Template",
 CellLabel->"Arguments Pattern",
 CellID->1260757063,ExpressionUUID->"eb595477-6358-48ab-88e8-d2dc56a22c51"],

Cell[BoxData[""], "Template",
 CellLabel->"Local Variables",
 CellID->322812892,ExpressionUUID->"6ab6dc01-f7c5-4449-b21e-e51b25a534cd"],

Cell[BoxData[""], "Template",
 CellLabel->"Color Equal Signs",
 CellID->972583522,ExpressionUUID->"066602bc-9ea4-4641-9887-9d76b65c8337"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1392, 991},
WindowMargins->{{Automatic, 968}, {Automatic, 61}},
TaggingRules-><|"Paclet" -> "AntonAntonov/ClassifierEnsembles"|>,
CellContext->"Global`",
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "FunctionPageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"4fe52515-7c8e-40da-b915-02c9832c20fc"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ExtendedExamples"->{
  Cell[927468, 16440, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"09deac8d-585d-40cd-ad21-ef57167ecce8",
   CellTags->"ExtendedExamples",
   CellID->1252026263]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ExtendedExamples", 934000, 16633}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 126, 1, 90, "ObjectName",ExpressionUUID->"682df69d-2ae5-459a-9a25-a4058d20c36f",
 CellID->1624440531],
Cell[705, 25, 1125, 30, 118, "Usage",ExpressionUUID->"7a324f2c-3f89-4f44-ad58-ad75bf0ac7e4",
 CellID->1012400206],
Cell[1833, 57, 96, 1, 32, "Notes",ExpressionUUID->"5d80d149-0ab7-44a1-bfbb-624555c4d057",
 CellID->897327061]
}, Open  ]],
Cell[CellGroupData[{
Cell[1966, 63, 459, 13, 48, "SeeAlsoSection",ExpressionUUID->"a19367a0-e6f0-47de-b1bb-cd7e61e2fe66",
 CellID->1745744993],
Cell[2428, 78, 1825, 45, 26, "SeeAlso",ExpressionUUID->"4a3b8eed-5c56-4d77-9973-7742207b08ac",
 CellID->1814512037]
}, Open  ]],
Cell[CellGroupData[{
Cell[4290, 128, 434, 12, 49, "TechNotesSection",ExpressionUUID->"4d939abc-f55d-433e-8fbd-90fbb6c5f0be",
 CellID->88534812],
Cell[4727, 142, 101, 1, 22, "Tutorials",ExpressionUUID->"617783c5-f947-471b-9b70-27c37fa63543",
 CellID->1945901560]
}, Open  ]],
Cell[CellGroupData[{
Cell[4865, 148, 117, 1, 47, "MoreAboutSection",ExpressionUUID->"f86ea839-7084-4b75-8ce0-f519141be287",
 CellID->739058757],
Cell[4985, 151, 100, 1, 22, "MoreAbout",ExpressionUUID->"ac793388-cd1a-456c-bcca-f7bac316f3d7",
 CellID->315114651]
}, Open  ]],
Cell[CellGroupData[{
Cell[5122, 157, 472, 13, 48, "RelatedLinksSection",ExpressionUUID->"55388d56-8216-4aab-840f-61f76768e3bd",
 CellID->437265855],
Cell[5597, 172, 103, 1, 22, "RelatedLinks",ExpressionUUID->"bd880d1a-a818-4cf6-a6c9-b7e99c89411c",
 CellID->438184951]
}, Open  ]],
Cell[CellGroupData[{
Cell[5737, 178, 530, 14, 86, "ExamplesInitializationSection",ExpressionUUID->"5883615e-77a7-46b7-bb52-50a0db6e4856",
 CellID->853045894],
Cell[6270, 194, 192, 3, 57, "ExampleInitialization",ExpressionUUID->"8f41e62c-de78-4405-871a-ad16d4e22542",
 CellID->541513086]
}, Open  ]],
Cell[CellGroupData[{
Cell[6499, 202, 442, 12, 88, "PrimaryExamplesSection",ExpressionUUID->"7f30db3d-7173-4f1f-bb88-4bdb211453d7",
 CellID->174740416],
Cell[6944, 216, 201, 3, 28, "ExampleText",ExpressionUUID->"784edf58-c09f-416e-9c82-2392391f042a",
 CellID->657007628],
Cell[7148, 221, 1001, 31, 79, "Input",ExpressionUUID->"7b4652bf-4a58-4a5d-a963-a3b8cfa13437",
 CellID->1250247880],
Cell[8152, 254, 203, 3, 28, "ExampleText",ExpressionUUID->"f11a7d43-ec7b-4621-8acd-feebcc7ad07e",
 CellID->2010608312],
Cell[8358, 259, 1020, 32, 79, "Input",ExpressionUUID->"48fb692a-9b05-415e-ab1d-db499e31be22",
 CellID->231973877],
Cell[9381, 293, 217, 2, 28, "ExampleText",ExpressionUUID->"f87a376c-b696-4747-bd8f-aefa4b1b2e1f",
 CellID->1282629811],
Cell[CellGroupData[{
Cell[9623, 299, 1549, 34, 126, "Input",ExpressionUUID->"44db882e-49b8-40c3-a7c3-3341e33b128e",
 CellID->1824665387],
Cell[11175, 335, 192, 3, 31, "Output",ExpressionUUID->"7998725e-3c31-40e7-8bb8-aee3175048b8",
 CellID->597943489]
}, Open  ]],
Cell[11382, 341, 261, 3, 28, "ExampleText",ExpressionUUID->"766c0a2e-e1ad-4e06-8375-7f34319ebb89",
 CellID->876245005],
Cell[CellGroupData[{
Cell[11668, 348, 941, 18, 56, "Input",ExpressionUUID->"d3e904c5-ac93-4961-870e-b6a7e188f55b",
 CellID->1822858045],
Cell[12612, 368, 912517, 16008, 953, "Output",ExpressionUUID->"0b224654-b5c1-4b7c-b638-04ffe0259d6e",
 CellID->1560235310]
}, Open  ]],
Cell[925144, 16379, 299, 4, 28, "ExampleText",ExpressionUUID->"beecf9db-052d-4e8a-8e72-c1bf8d669e82",
 CellID->1356887892],
Cell[CellGroupData[{
Cell[925468, 16387, 1070, 27, 103, "Input",ExpressionUUID->"b431ff44-3fb3-41ba-86a6-df8b7a014667",
 CellID->1139785810],
Cell[926541, 16416, 878, 18, 54, "Output",ExpressionUUID->"19080328-8905-489e-8127-db1a324cefa9",
 CellID->2099525300]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[927468, 16440, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"09deac8d-585d-40cd-ad21-ef57167ecce8",
 CellTags->"ExtendedExamples",
 CellID->1252026263],
Cell[927959, 16455, 242, 5, 40, "ExampleSection",ExpressionUUID->"09a61cdc-5c5b-43ab-bee9-95328b638662",
 CellID->1760628935],
Cell[928204, 16462, 264, 5, 24, "ExampleSection",ExpressionUUID->"a95613db-43d3-41e2-9906-761e83dda924",
 CellID->713338532],
Cell[CellGroupData[{
Cell[928493, 16471, 244, 5, 24, "ExampleSection",ExpressionUUID->"cfbd1f4f-a634-4d43-b733-1f165c613e47",
 CellID->1826989770],
Cell[928740, 16478, 247, 5, 28, "ExampleSubsection",ExpressionUUID->"8d5b2eae-125c-48d1-93de-b1425f3982a6",
 CellID->1495879584],
Cell[928990, 16485, 246, 5, 22, "ExampleSubsection",ExpressionUUID->"fa82cdfe-3ba1-47c3-b788-b31114c7d2bb",
 CellID->657112859]
}, Open  ]],
Cell[929251, 16493, 249, 5, 40, "ExampleSection",ExpressionUUID->"1bc32dfb-9b1b-4b4e-8bef-e7f88bfddbe1",
 CellID->1734908339],
Cell[929503, 16500, 257, 5, 24, "ExampleSection",ExpressionUUID->"442bedc6-5dc5-4f1d-bb2f-e45eacf40572",
 CellID->71494607],
Cell[929763, 16507, 252, 5, 24, "ExampleSection",ExpressionUUID->"928d518b-1fdd-435f-824f-8b918fe785bb",
 CellID->1166501176],
Cell[930018, 16514, 257, 5, 24, "ExampleSection",ExpressionUUID->"34b0a11e-17aa-494f-a35f-77d7ce5cc869",
 CellID->1007051569],
Cell[930278, 16521, 250, 5, 24, "ExampleSection",ExpressionUUID->"e2da16ee-6d8c-4139-b8b7-bf5659be6e20",
 CellID->1197098176]
}, Open  ]],
Cell[CellGroupData[{
Cell[930565, 16531, 111, 1, 88, "MetadataSection",ExpressionUUID->"b71bb694-803f-46b9-ae01-ab53bc3888e6",
 CellID->2002238936],
Cell[930679, 16534, 596, 14, 31, "History",ExpressionUUID->"4a8d4280-72ef-4229-adfb-d76f16e76300",
 CellID->561048862],
Cell[CellGroupData[{
Cell[931300, 16552, 485, 13, 25, "CategorizationSection",ExpressionUUID->"c6661890-4c4e-438c-ba87-71b40a7f332f",
 CellID->2095013304],
Cell[931788, 16567, 134, 2, 42, "Categorization",ExpressionUUID->"acacc1a7-4a69-4c68-8333-7dd30759b844",
 CellID->746724116],
Cell[931925, 16571, 161, 2, 42, "Categorization",ExpressionUUID->"21c7f32c-d77e-484b-b497-104e72e136fc",
 CellID->1713216937],
Cell[932089, 16575, 157, 2, 42, "Categorization",ExpressionUUID->"603d9268-f0e9-4aab-a65b-f359e738b4f7",
 CellID->576321183],
Cell[932249, 16579, 194, 4, 42, "Categorization",ExpressionUUID->"cf03b907-0589-4671-a3e7-ead92c96674b",
 CellID->1078874711]
}, Closed]],
Cell[CellGroupData[{
Cell[932480, 16588, 110, 1, 24, "KeywordsSection",ExpressionUUID->"04c837ba-dd40-4ee8-87d7-a5b85e8b28c1",
 CellID->673925570],
Cell[932593, 16591, 99, 1, 87, "Keywords",ExpressionUUID->"c5480465-cd2a-43c6-8388-7bfaafc934f5",
 CellID->838300712]
}, Closed]],
Cell[CellGroupData[{
Cell[932729, 16597, 120, 1, 24, "TemplatesSection",ExpressionUUID->"4de58c01-7bfd-4fda-b21c-dec7573eb119",
 CellID->1827342264],
Cell[932852, 16600, 148, 2, 87, "Template",ExpressionUUID->"f88b0f59-82be-40bf-90d5-e3f3bb17b8a3",
 CellID->977795301],
Cell[933003, 16604, 138, 2, 87, "Template",ExpressionUUID->"eb595477-6358-48ab-88e8-d2dc56a22c51",
 CellID->1260757063],
Cell[933144, 16608, 135, 2, 87, "Template",ExpressionUUID->"6ab6dc01-f7c5-4449-b21e-e51b25a534cd",
 CellID->322812892],
Cell[933282, 16612, 137, 2, 87, "Template",ExpressionUUID->"066602bc-9ea4-4641-9887-9d76b65c8337",
 CellID->972583522]
}, Closed]]
}, Open  ]]
}
]
*)

