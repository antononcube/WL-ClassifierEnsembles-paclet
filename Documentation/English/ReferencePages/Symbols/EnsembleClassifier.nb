(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    318996,       5901]
NotebookOptionsPosition[    311197,       5736]
NotebookOutlinePosition[    312027,       5763]
CellTagsIndexPosition[    311946,       5758]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["EnsembleClassifier", "ObjectName",
 CellID->1287779630,ExpressionUUID->"d2f3fd81-113f-4967-ac8c-fd9efb132990"],

Cell[TextData[{
 Cell["   ", "ModInfo",ExpressionUUID->"54d807d3-8e1a-4829-b0e6-2dc6e55951a0"],
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{
     ButtonBox["EnsembleClassifier",
      BaseStyle->"Link",
      ButtonData->
       "paclet:AntonAntonovClassifierEnsembles/ref/EnsembleClassifier"], "[", 
     " ", 
     RowBox[{
      RowBox[{
       StyleBox["cls", "TI"], " ", ":", " ", 
       RowBox[{"(", 
        RowBox[{
         ButtonBox["Automatic",
          BaseStyle->"Link"], " ", "|", " ", "_String", " ", "|", " ", 
         RowBox[{"{", 
          RowBox[{"_String", ".."}], "}"}]}], " ", ")"}]}], ",", 
      StyleBox["args__", "TI"]}]}], ")"}], " ", "]"}]], "InlineFormula",
  ExpressionUUID->"002ff120-9c3d-4c63-ab45-1d2d3864671f"],
 "\[LineSeparator]creates an ensemble of classifiers over the same data using \
",
 Cell[BoxData[
  ButtonBox["Classify",
   BaseStyle->"Link"]], "InlineFormula",ExpressionUUID->
  "3c5718d3-8aa4-4322-8fad-58c2a2473500"],
 ". Returns an ",
 Cell[BoxData[
  ButtonBox["Association",
   BaseStyle->"Link"]], "InlineFormula",ExpressionUUID->
  "542ec1bd-5467-4cf9-b352-f41eb542619b"],
 " of IDs mapped to classifier functions. The argument cls is expected to be \
specify which ",
 Cell[BoxData[
  ButtonBox["Classify",
   BaseStyle->"Link"]], "InlineFormula",ExpressionUUID->
  "3fc24e4a-c31e-4b4c-a0c2-bab108a12d92"],
 " methods to be used."
}], "Usage",
 CellChangeTimes->{{3.93225149465945*^9, 3.932251494808796*^9}},
 CellID->1372046944,ExpressionUUID->"0b2a8b35-e90a-434a-85bf-0471e5d9b44f"],

Cell["XXXX", "Notes",
 CellID->313586322,ExpressionUUID->"cc96ba81-4fd4-41d0-8939-1ec80923ca54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "See Also",
 Cell[BoxData[
  TemplateBox[{"SeeAlso", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related reference (function) pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "0a9d00f8-d6e8-4654-b788-0c8d62e7f61b"]
}], "SeeAlsoSection",
 CellID->520444116,ExpressionUUID->"c6c1e3c1-e025-46e4-8881-394b98a2630e"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["EnsembleClassifierMeasurements",
   BaseStyle->"Link",
   ButtonData->
    "paclet:AntonAntonov/ClassifierEnsembles/ref/\
EnsembleClassifierMeasurements"]], "InlineSeeAlsoFunction",
  TaggingRules->{"PageType" -> "Function"},ExpressionUUID->
  "1fc6107c-2f8b-4678-b49f-9f1763c66168"],
 Cell[BoxData[
  RowBox[{
  Cell[TextData[StyleBox[
   " \[FilledVerySmallSquare] ", "InlineSeparator"]],ExpressionUUID->
    "54833f16-6a58-4215-ae50-7cf3d4d7ff2d"], 
   DynamicModuleBox[{$CellContext`nbobj$$ = NotebookObject[
    "027daaf6-f46e-4dae-8d22-74862f933d26", 
     "a08e1f6e-2e78-49fb-a17a-3b343dc126c9"], $CellContext`cellobj$$ = 
    CellObject[
    "0e25eb49-8dd5-4417-81eb-8dacd5bd04c5", 
     "2cebf147-8c16-4bf0-bc22-575609384b8c"]}, 
    TemplateBox[{
      GraphicsBox[{{
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         CircleBox[{0, 0}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{0, 0.62}, {0, -0.62}}]}, {
         Thickness[0.06], 
         StrokeForm[
          Hue[0.4167, 0.406, 0.502]], 
         LineBox[{{-0.62, 0}, {0.62, 0}}]}}, 
       ImagePadding -> {{1., 1.}, {2.4, 1.}}, ImageSize -> 16, 
       PlotRange -> {{-1.06, 1.06}, {-1.06, 1.06}}, 
       BaselinePosition -> (Center -> 
        Center)], $CellContext`nbobj$$, $CellContext`cellobj$$},
     "InlineListingAddButton"],
    Initialization:>($CellContext`nbobj$$ = 
      EvaluationNotebook[]; $CellContext`cellobj$$ = EvaluationCell[])]}]], 
  "InlineListingAddButton",ExpressionUUID->
  "0e25eb49-8dd5-4417-81eb-8dacd5bd04c5"]
}], "SeeAlso",
 CellChangeTimes->{{3.93229695934896*^9, 3.9322969672196503`*^9}},
 CellID->403363381,ExpressionUUID->"6b3a48d2-9bf5-45ac-bf2a-2c7b9cefd96a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tech Notes",
 Cell[BoxData[
  TemplateBox[{"TechNotes", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Insert links to related tech notes.", "MoreInfoText"], BaseStyle -> 
       "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "d082fe4a-7f34-46df-ac7b-742091430f6c"]
}], "TechNotesSection",
 CellID->1869954535,ExpressionUUID->"fdd0d7b0-96da-46b1-bc6a-a6a1008492a7"],

Cell["XXXX", "Tutorials",
 CellID->2050179547,ExpressionUUID->"fbb8b091-20cd-4a56-ba0c-46cb3a730c72"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "MoreAboutSection",
 CellID->992530314,ExpressionUUID->"4cc53708-7947-45dc-899f-9e9c9745a668"],

Cell["XXXX", "MoreAbout",
 CellID->1951501149,ExpressionUUID->"a51fa630-d9f1-4173-bd7d-3e67c3f87961"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Links",
 Cell[BoxData[
  TemplateBox[{"RelatedLinks", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Insert links to any related page, including web pages.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "107d98d7-a6c4-457c-b1ac-0f7e1ae14a72"]
}], "RelatedLinksSection",
 CellID->362070612,ExpressionUUID->"18d9c33b-8347-4a9c-84d3-6a99ea91e9e1"],

Cell["XXXX", "RelatedLinks",
 CellID->1499603933,ExpressionUUID->"d64dafdf-5782-4fde-bee2-7908a57014ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples Initialization",
 Cell[BoxData[
  TemplateBox[{"ExamplesInitialization", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Input that is to be evaluated before any examples are run, e.g. \
Needs[\[Ellipsis]].", "MoreInfoText"], BaseStyle -> "IFrameBox"]], 
     "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "21cda360-08a6-4121-9170-18e9cb7a0cac"]
}], "ExamplesInitializationSection",
 CellID->975220739,ExpressionUUID->"e47559e4-544b-449a-9df5-08573346fbed"],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<AntonAntonov`ClassifierEnsembles`\>\"", 
  "]"}]], "ExampleInitialization",
 CellID->939766469,ExpressionUUID->"1acd05f5-207e-4bb0-9797-9918da7e1cb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     StyleBox[
      RowBox[{"Basic", " ", "Examples"}], "PrimaryExamplesSection"], 
     ButtonBox[
      RowBox[{
       RowBox[{"More", " ", "Examples"}], " ", "\[RightTriangle]"}],
      BaseStyle->"ExtendedExamplesLink",
      ButtonData:>"ExtendedExamples"]}
   }],
  $Line = 0; Null]], "PrimaryExamplesSection",
 CellID->2060304445,ExpressionUUID->"c457a434-f2b1-45ea-9203-a22f03f895ad"],

Cell["Get training data:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.932251684695414*^9, 3.932251689577181*^9}},
 CellID->657007628,ExpressionUUID->"66e866b6-5be9-4dd5-89a0-2e97883e6c98"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Flatten", "@*", "List"}], ")"}], "@@@", "data"}], ")"}], "[", 
    
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "_Missing", ",", "___"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.932251610569993*^9, 3.932251616668548*^9}},
 CellLabel->"In[1]:=",
 CellID->1250247880,ExpressionUUID->"06af7db7-5473-4f91-a6c7-3ab7b5759bf7"],

Cell["Get testing data:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.9322516920947104`*^9, 3.932251695966352*^9}},
 CellID->2010608312,ExpressionUUID->"d0c5a979-d861-45d0-88ef-03770ce41e77"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Flatten", "@*", "List"}], ")"}], "@@@", "data"}], ")"}], "[", 
    
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "_Missing", ",", "___"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.932251610569993*^9, 3.932251616668548*^9}, 
   3.9322516503845587`*^9},
 CellLabel->"In[4]:=",
 CellID->231973877,ExpressionUUID->"552fdee3-a267-4adb-8742-9d4860e49e22"],

Cell["Make an ensemble classifier using three different methods:", \
"ExampleText",
 CellChangeTimes->{{3.932296282081286*^9, 3.932296299113987*^9}, {
  3.932296881290965*^9, 3.932296895548564*^9}},
 CellID->1282629811,ExpressionUUID->"44fd99d1-ebc7-4167-88c7-141c08460cf8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aCLs", "=", 
   RowBox[{"EnsembleClassifier", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<NearestNeighbors\>\"", ",", "\"\<RandomForest\>\"", ",", 
       "\"\<LogisticRegression\>\""}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"trainingData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", 
         RowBox[{"1", ";;", 
          RowBox[{"-", "2"}]}]}], "\[RightDoubleBracket]"}], "\[Rule]", 
       RowBox[{"trainingData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", 
         RowBox[{"-", "1"}]}], "\[RightDoubleBracket]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"aCLs", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.706656453867037*^9, 3.706656453968857*^9}, {
  3.706656824951811*^9, 3.7066568767270937`*^9}, {3.706657226786166*^9, 
  3.706657250321175*^9}, {3.7066572913978662`*^9, 3.706657309770399*^9}, {
  3.706658252523445*^9, 3.706658269678029*^9}, {3.706658308963687*^9, 
  3.706658310909718*^9}, {3.706658485458063*^9, 3.706658497561164*^9}, {
  3.70665954210775*^9, 3.706659546911448*^9}, {3.706684896670835*^9, 
  3.706684896676652*^9}, {3.93229633755827*^9, 3.932296433555485*^9}, {
  3.9322968764540663`*^9, 3.9322969197771587`*^9}},
 CellLabel->"In[7]:=",
 CellID->1824665387,ExpressionUUID->"fa0feaf9-10c8-4a30-94e0-b43295c53a52"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.9322966358247643`*^9, 3.932296824510098*^9, 
  3.93229692685518*^9, 3.9322997425181837`*^9},
 CellLabel->"Out[8]=",
 CellID->385569074,ExpressionUUID->"8227c7a9-2486-47a9-847f-fe13c9e2ba4e"]
}, Open  ]],

Cell["Display the elements of the ensemble classifier:", "ExampleText",
 CellChangeTimes->{{3.932296435253552*^9, 3.932296439323402*^9}, {
  3.932296515567194*^9, 3.932296531734251*^9}},
 CellID->876245005,ExpressionUUID->"aff5aff3-0fe1-4851-b406-13cfe22ef816"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<GridTableForm\>\"", "]"}], "[", 
  RowBox[{
   RowBox[{"List", "@@@", 
    RowBox[{"Normal", "[", "aCLs", "]"}]}], ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Classifier name\>\"", ",", "\"\<Classifier\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.706656453867037*^9, 3.706656453968857*^9}, {
  3.706656824951811*^9, 3.7066568767270937`*^9}, {3.706657226786166*^9, 
  3.706657250321175*^9}, {3.7066572913978662`*^9, 3.706657309770399*^9}, {
  3.706658252523445*^9, 3.706658269678029*^9}, {3.706658308963687*^9, 
  3.706658310909718*^9}, {3.706658485458063*^9, 3.706658497561164*^9}, {
  3.70665954210775*^9, 3.706659546911448*^9}, {3.706684896670835*^9, 
  3.706684896676652*^9}, {3.93229633755827*^9, 3.9322964953966427`*^9}},
 CellLabel->"In[9]:=",
 CellID->1822858045,ExpressionUUID->"770351ce-6ba1-4915-92ad-8233ee314d72"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"#\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Classifier name\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"Classifier\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontColor->RGBColor[0, 0, 1]]},
    {"1", "\<\"NearestNeighbors\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"], 
                   ImageSizeCache -> {
                    12.344414062500002`, {0., 12.344414062500002`}}], 
                  Appearance -> None, BaseStyle -> {}, 
                  ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, AutoDelete -> 
                 False, BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
            GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], Appearance -> None, 
                  BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False),
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, AutoDelete -> False, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 732, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.051197, "MaxTrainingMemory" -> 318936,
                     "DataMemory" -> 81824, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 42, 5.455704`7.489425787374622}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.41643893442623}, 
                 "StandardDeviation" -> {14.237916921543757`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                   RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                 "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5831062670299727, "survived" -> 
            0.41689373297002724`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "NeighborsFunction" -> 
          MachineLearning`PackageScope`NeighborsFunction["Nearest", 
            NearestFunction[
             Hold[
              Nearest[CompressedData["
1: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
I6pHd4qinnw5ZDUG/mVfhzghXsyx7jXAv03bin5v5rQ++duRH42k2OE/0tAD
t+9HHvi36LSoB55Pjx7eQX5JL3spep7i552T6s92plfk9eTuAeDJMQ2bR75n
uG6Jg/3vXUcK6PpTeJ4P/Jx1HjsheXuUeEwcNQOeaVEBf+BZG6JwFXpY9myS
5rMxz46k+9HmN8HqXNNkzH9iUthPhTnMdeB9ztj+imHwP7iklK7nu7Ol6f1+
7KrWXey130mXU6OSwG+65M5R5Jfaa1tJ8N/83/I2+D/hb9SD9Qp1h3h01XSQ
MotK9H1HAaN4NfQv3lndivy1iJV7hvVeWdPsj/el+ixchYzbG0nBuOw/yMen
txQeIl4rq7iKYb/9fMoq+n55/NWjOcr+QIhh5OHTbeSZo6b6WG+29JvdyEcu
UeF01KsXK34JIF6/7STWYb1ixdrTt24OEfduPh8Ent0nd8VAP998VYpQPz/+
tciEHqYKd8jCvtojq6nCsJWUV/lJ98f1IgpJmB/G3+57i/WarluoQr7UhWWM
wX75hH+R+9cO8sfFgO3gx02wSxL2OYKcjMh3z8ER+v3MQP43el61kNE67yM6
Q+atiN8APLo1r5aDT9uTPeew3rHX6VXgf2PyzCT8R0k8eXnuXBc5JWE+A37c
3xCT4HN3dvsM/D+MCSsGfv5nt06iPnhLB9/e9KaD9OVbcgH2xu/C+aAfCd++
M9Bz3AnOJtRPgWU+iidwfp56LqFmtJJ865VzBPaKR+cEYc/m2RAJ+3vtmifA
Z29M3Qbgr3dk3NLE3ES8ZH/oBP4r5T85Yf45zuzkDf3b/m6Io897t5vL1lP+
L3Katdxp+k0+vPvEGP6H/kkJQ/+XL/5th56lK0t/Af+WWKVnwN+cLdqiLz5A
zMsTK8Dn/EpVRfBzWcCxBes9K6OaSdfDc0HiwJN829z5+7MO8mZf0XPMG7K9
d0Whh+tbzqthv3bg62kb6C3in9qRJLxPcHSequYbIB8YMu8A/34PCXXw+Xo6
+wP4X5AOv4h5ienXc0s9yl7yjPHyidfvSCc3/1WYN+z9B33wvuXTZtlNeP9Q
5baFfq84GDxFv7+6pdG4M8B4iNjB+F0G5y1iQvstkY8ptfWiyEcO1t/0+4cD
wv/50f3xqfDtja0LZIXzL0HUTy3DD/R7+8afLvXQ85jX4//PM1Xn+/soPH4e
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
16A8vou4cLdTAvXZ9GVNIOaZctNH3ZgnvYaT6PmnwL+Xfh/+hZ8U+q7YQDrP
NLNDPzYLnvdRr1LeBubQ9xdMJ+h+4bL5Wzb4j/6RFzvh10pKZP/8gnq4sbG1
hf6e+nZNNubtiUOKKcgvI+cpD9wPvrqpsmN6YpQo4mkMRL8ODNvJjXq+XyLh
EOqtn5PpZdSTibMnKun3eLo7GRxLP5MvbQyPg59Mw5ls8HPV92UY8LiJqAbC
XvGnNX1+LnrJUeikaRPx+otpHurhi81bXgFPXNgvTvSLQ7U9fJg3Bs6sLTbE
93S+bvL6GtPE7C/DAOxHDi9+58H5PK/iq2+4j1tnmCaKeJ1vvZ+G9S7hKJQo
sioiv4Y82gQ9f9RXN4Y+f4mrbkO9umssUEK/v73FJg88e/6rYDsT0E4OXW9j
A35N83ubkb9rf3Yww16qQ7Eb9VlsJNEa89IB7SlBpsV+4s1FZX3w+bic2Qb4
W89pOGCecfXwy8N6j4/eqqb1M/BfidxiP2k1EyICvTkadB5CPtbbFWxFv+ga
Ls8B/y2XnSWbKf9DY8OVDb9+k825LfuAx2xDxHX6vkPNwxr7lyG2FVPAP3PQ
lQf4I+8KM6rlpZDGl03VwE/9l9N60NuxXW/3Yt4oW/7zCOx3xx2RAZ6S8bVK
/7X0EeGdG93p9/m+S1SA587UzAnsf+O8i7ShH9HCcGvwOWRnPBrD10BaH3tC
fz/Fu2JfHPpv9PgZP+jnwq7j2djv6E75luP7xz0+F3PN6xnVTzDssUQ9f71T
nN7vx607qIf4yn2+yQb7PXW9XlI4b/x4Zb3Y2UpyvIVVFvGa3c68G/WWXTKe
GfnFrty7CD71L9hsoL8vTlxxLW20kXgqxzoLPLJPxoOgz8eKf0+C//0WBjQe
HZ/nDejvZ8aYbydr1ZPjFhvU6H408Jo+v+IeS1eD/wW2Z+ugn1gnb32sV8M3
8VrUcB/xYVimDPmrw+CfBr3x8QzuwH6tNnErM/gR5t+4H3j0+WT3b7JrJz3F
e07DPpR8dBj3ufPn7AVxn+snJHQe8f2zX2lKnFpvUP5M383X40QFq+wu+j3n
3ehr0I+zo2A85oErt8QmUQ+drjyWRry6jd6aMfF0EsQNp/3A7xSm9wj94p33
uCn9+wAvVBlg71OVT7/3GBF5sOrY2QqyqdA2HfWzevHQKV4KT997g+Ooh6FT
q11Qf6i8ZXtK4VFMM9IfujBCeJ7UGkM9KblyIxD5q1yb1g//DgLH6e/9x4w/
fYbeFq8fU3iV10gqbZZQQHwDk5yMEN+T98oYsX+cID660vXh/AcS9tFcGu1Z
qffILmH+1ajPmpab/PC9Z++u1hB8f5Htz/0YeAITHkhh/5WoOf3wgVI9yWw9
dwH2D2y/bcZ+ednPYnqeyV8Y14aeb2gYpNLflx3NX3/nZztZoJBzGPjPWyXT
5ye1Ily1iK+afcU04vWJe4T+3uffgxhBsqOR9OyVOYF8GTBI/oj3h1Y3+c0R
r4Wne/UQr3UiHCa4T1Ge/bLSzb+VFF2qEIP+vkdYvwXzzNfbydGoDykrkq7C
vjrEx0WZ4pP90omcmcbfJPtSs1fAU+U8cZc+r97B3QY+hc7vfQQ8jZHJIfT3
p9v/88qQfE+4GXYxId8ryjpuwt4u6KUI9mtJic+EwP9kWu//12uXyK93ro+c
vXiKvl/e7OAqgvqmt97KFPVkbcRF+n2dlUfCHay3ZHvWd9nafrKnfswC+WLD
me2PfLlqfKgM+aJWZ9sA+xinbvp7q1aWWhuh68mk7rvPdP3hqsyLR76c/CrS
iHouZ6pYSp/n1ywvh/4/OxoLFXjHk7+O/DeP9f4oVhsEniHtmiPgPyqd2wjr
ZeRwcKTnvcComICMOSIgN94L/eXgDvsQ1JM337ZnAU8SCxd9PlZoHU5/Hz2c
r6yc4ZlGDK9aoL8nitlxZAH8/Cs9dxV8qo4q0O/z/16euYXvhd+8OPU7yK6G
tCzMj0M/Fcy8489G6Uf/VFUV3gOfNmLyQL7rlozHwH9vqR9DW+d3UoFQr8M8
GVD1Ugv7I5feK1dh/2Hj/QL0IymPjvNKlP8ani/Hi9j/ktcPM64CHkszPVnk
y/vDM3mIV5mHagn03HNf5KU3Ze/d7zZceLSQNNA/Jwg9x+Sl/0Z/59e9twJ6
lvTjugP8y3I6L7VR9hOyp2SXFjUQDzfGRiO+i+fEL0Bvl9V8L0FvB7b9vgD8
Xz8x0u/f7tnE1+0KryWekUnhqCddmYWnMM9HSFZ+Qn0eT341gP51Muq3uwTl
/7PoqTDZhXbiiyZHPex/8uXT7502rt3+H/L3tYYePT9fiap6Cn7uKcX1ulLz
tqumghTsB6N8lyDfmzTfv8L7h/6xGgbU2799FcPd0L+/INO7t8zqOaWqUeC/
xVFkJ9arLy7Bh/MBoouXfp/wc2iIkT5/26KbFP1ugeSX/LWI7+OclT+loD7s
Etffjnkp3nuyCvh/uBye/0L5ZznFMLfCYowsfrjzO/rF3kPv2MD/y6UjatAD
0b7aAPj/k55mwn3ckVoxWSeHaaKcpZ2uVyJeWxihf8XNlvuxv4iSF7Sn37P9
mwrDenW7fZ/t7S0kby6zK4L/FYuxo/T9i6cKvX9Rlc2m5w3dLgb6920CYy5d
OHqmnRR5MrJIr1e+wRz62SR35zfwT3/1G0Q9zNy89B/y92Rrx3L99o/EshJZ
W/j3KDjwEXrW8LqujHx5wOjYBvxFVmL0/qLSynyvTm4TUb2nVBL5e/FhK11v
H8tuYwN+E0XBR+D/xiUz3SncF0xxBe/xW6L+WizzGvKRmN0Qjfl2hyzPAeiT
o/XLXaz31ZlIEnjCjN5/mrMcJYb02N2gNxEOewHwmTrf4gL74uUvC4E/UP/X
ccTLQ+XEk6c1E8TKDWvtkb8/NGX/on8dvCb2DPvHdeo76f3gpQZCE/418tO+
/0j4R7j5OfUBf9bPkr2w3zexWRv6FBNpuoH4ulpmKsagP8a43jisX0+muurQ
5/lu/Ncfg59XvaOnoP/FsZvJwMNq8od+Dyn81KDam3ma/OsQk4LzwCbLhJcL
mA/Nf37E/BxlP66G9U73W3nAPmpWy7z1RA+pbWprS9dbb8s0+L+go6KK+V/M
5MVT+PdqsX9B/x5R34vIqKtjJMfcUfo+6EJj/lroQeCezi/ooYl79T7kO//h
kFU1FP7uQ56jBz5Mkh2nxujvN0Nj0mtQPzsdTl8Bn1cW1AjEa/dV5b5GvBd6
fz53k/0seWaqhP49kKyrqXXI9+gFpTewz/50VAH14d+Fk/8qKfsOJ6ctnWyd
5PSYHf3e9fG6vsOIb8DJsQ7o/9mAYSTWe0IoLhHrXd1/0DXqxkdCUNhuGPfv
fJa7PqOfDphJa6HfMT7dyAb8n4+JNKD/JhfpthwJ7CI2VvvSv4/hXxcYBz18
2ze3A+vd02KyA/qcL1Og31fMf1MKWOo7SlQFCldg3tgYM5GF+eeAYqgD+vsa
YU9b+jz2kN6xNZT//kxp5VD7IcLd+9cOxEtFYHku7kcOLmWvwTxvPLNwGv4l
ks4/g3+Gt93h8qEjhHqeVzT0xuwi9gf17WFU11PUq1qBoM/wn7/u5Pw1ip/d
J7UcFL52kE/LtHXp9/Z8h3Zgvn0xI3AO+ZVoyKAN/qsu/SCaKPvq74d3PXZs
IjSP1A7hPOSBA9NR6JPLa8su9CP+svBYep7s2MJ5jLJPqxm7oWH/gvihuPE7
+K9sECcQ39zm7brg59eJ6XjgeUT8rcf7Io53WRxDf/pIvXS1d9ADR1TDWfRH
54dyPtDzrt2EL+K7fy/jAvCU3O/K/tI/STbkLND3xYaWNfR+fPORMHHEV+PU
SkvE94XAJ/p726y4biHpK+1k0U4bNtgfr5Mpgz6FK6YY4N8h+lc9/V7lWo00
A4XHOrh/cHbhM8mx4fIP6OFk73d6f12X7RFL/15NJClCvzfQYloO/pW5iq5L
M5UQgu67X6H+d6pFqaJ+LrD8rMI879wdT+/XHjebbmyg8JvpEnzu8XOE3NqL
9Pvkh4+bdRCv2pxjnKhXtVUX6POEd6VmF+n90Xj5SQlqnjkyaX4U8U03fS4D
+4M5T+6gnijMF/GD/8WtmtdxPhbhMedQN1tPaCSHywH/xF6tSbwH1nDs+ozv
E2stXnkB/4aSmJvgp9WBaU+RYCP5sCqGk35fOnjVGfnVZGiXBz7tU01roH/9
3rqb+F4g5ojE5amNDWSjhPBT1GcWz5C39PcdnOtkUB9q1e5eA//HdTTD6fr/
93h6cm4jURg664v6JulgYov6HGyyxxr75YiI0jtYL29RM33+/+6F7f5d6ZVU
/09Ow3pHrtlug958pFiYwedXbfF7qD9+P/Lp98mpxZ1RAXaj5LzWiCPwe8nc
pX8PITviGAv2gz3yPz7Cv6JgyCjeh6wdtC0z8X5ARlQzaWLeuMOz3Jg+7x1d
Gg1+/Lp35dL7fTKj7QXmDSWVRRbTOmJ99GlZ6KdC4qUt6uGmiyFfoZ9PD9ds
Av92I3LT+L4sg6mgW4Z5inigQ9L1/2De60zES4olcA3y8apyNf3+xOBsuxPW
WyCakVDxYIjQFdhsCPsCmxOnoJ+PPJ6hyC9Vs38j9H2HyOlwN8r/zpZbf2aT
G8kO00H69zSOcETvh57Pst4LQP6GHhEIRX1IlzxC8zlpZb6rRG6UbN2Q1IR8
1B30WA9742R5CdhfTLeQoX8vRSL7E+rz8QPdxwZDu4h+pTvb4P8/78NlqG/3
FAwOwJ73W8EA9BxkpDeB85lNrHZSv+payRP/Ctmgh0ubQun3tw0tJL0/3SfI
VI78Wpb8le0C5X+Fu8fzX2FFRLKDpBn9PX7y9dXAc8BJaQbzuVffWfr7QeOz
Olq3KHt7t52vQnL6yb6LwR3Il+cJVfR7zivfODvA5zlZo2v07yf0L30EPWxZ
8nDQV7WHTD+0/Qzqm0PPLnnsl3cXyt2lzyseLymCfYVE0jjy99JMULjUfxVk
3pGN9PzgbskuDX0K+Bop8tDnq+t2QM/HrO5toM9DxELvPWJlKNUzW1sL/wvO
XyuRL9zv3On7R+3vHW3QJ3f629X072UNWaXkvO0jU87sP0d/j/DlDn3/uNo4
bhjxNZQaG0Z8dwzkeuzH+//7zTLfRF6RwxeC/aFPH0tpTnwv3Lte4Ry+z1r5
tqEe+hk8fEIF+bVw6f3B5I2V5Jo89jTsr5n5BjTwXshBUOwKzg8DGL+5wr9E
seit35R/uadtCjKrM4kif3Zl9KMHPuc6cB7SyDaejfsOvzUNLFjv8ygiBfyk
t10Zi6xtI+IjOZahvuUGt2ciH9fMdr8GPwcqWGIRr2PWQkEWlP/fU8edN1yp
IPcvCM2An9OXuN9CP5nrbrTT74veN6uD/2SWu0/o93V1e4rz3qcSrn9PMYOf
UyZtnPD/IZaVDfMz1wFDJfg/7uZ6G/k4OL3z6xabRlKeYzEW/r/LHPMH/zfN
br9H/Vmusfwd/V5xYJb+PZ/XmfvF0qb/kso5z1Zi/rRRfm+N/jt8mcEX37N4
sSX+B/0ntR3jV6D8P469pz7qxaTuZhUQDDzW35sEoQcLT3N+rNf85xJ6Ppyc
cG+jf09MoVFTK7aPZHwhVQH/r51DD2A/5ffVYRzn7aHP66vh36twscmG8n/i
xIFk0Zo5oj9USQ96c2AVUoAedKMLraGH+mBO+vd2ZI1qltH39Zdmzm5U7SKD
z2iEYD8u517cj/24ySgnG857b4e9m0d+rcmRrOxF/j7aGsV7pIuUqFqRg3x8
Y3/mCvJrXeORdaiH/baOPsB/bmcxE+I7+T4l83PMKKHlyTGL9e78IyaL+iOQ
30z/vsEdYu9u8Dmy4gr9/cJpi8nxI+uaiMPSD2eRvz9vpB+g5+ETWtPQ/9/4
Cvr98Lt3f7/jPmK0YUa7pfI1UcsYcwb17RvnUvr+i/N9SC39Ptz5SBr9+3X7
/mqOUfZrYx6oikc0ktUayeKI7zv3Fxno72fMf/mhnnxX8ckBHtFGV/o8k/dN
Uc1hjzqC9Hy3B/q3mZEXhv5Z5rq1cB6lVOuyin5vsF40gqD8x99xC1HY2kka
DcqUg58KP6U69It2mTR5zCfWTQcj0R99FQ/Q3wscG/7RO/NnkRQNXauKfHRJ
spVAPiovUatDv9jd9v4H1rtOdN9+QZxXK658v2y6mHzRxNmP/ZrUZ78ZZsq+
SdD1DvTmrjNM/x6X1Pj6y/R7+xV5Md5DE8Ri+80B8LO5PmYb9DYtFRINvb3W
KaLfG2R98qbfX6mQ9/sufxwnzMqmA9HvDLuiDmJ+yzETigX+7gOmkcj3stfb
6o9iv3D5j/jk7CAZkh4qh3hJFP3ogx4mqqpvIR/HN76mv4/Om+dns8P5QNHN
XV02M8SAVg99/jO4a1Ug3qNmTR8/j/1pteUSej/o/ugT/XuVrv9CuSJLe4hT
rpmT0E9q/mgA9Kzq1JAO/JWScXng5+SCfvYg5Z/5lFrTlQd9ZIL7nRngGX+f
uI1+L3GHXQ/nq/dCFaTA/38BZfWIb+lI7vmz7+dJKd0KW5w/ZByRcMM8zPBk
5CjqW9Ka84rA82TUIA35npwu8/xs5RjBvOwD/X3NccmVDtDb0bg1XzBfxR5a
T78nzGo+YQ4+r3I2ahzZ848MqWPeBb1dSAyi+ZQ7aeUPvXl3PqtFvbr1IZA+
DxeeFvU5bvKaMK5+XYB6yLPxiTXq1a0oG/r9vNvj0Mv094mPsjlh3y3Wc+29
ZCN5gndbG/Jdu40hGfzYMd7LB54LKhe3g/+CvOEy/D7GVa/7cgrfJ4i4WDN3
9Guzz1b0+9jTq9eeQn80PNOnBH5eJnzYS//+T8VJ++YbfeQd8dQS8MndmFoF
/AWW++j3Wla3XoXA/5PrMS4eFP/CoRE2rhH1pKxd0V36PsvY8z/Yx0wnqkI/
wy1R1dBPn3zmIt7jHTp9cE4ua45MGpWl37c4XjA+h3qbxr1vBPzoDGlVoT7L
vl/9APmVWyTc81Swk/w7yFaC/jKwOaUb/UXtzb9vuB93jnlsBj6vPdvdh3nM
465Smuj5B0T4GJc54rXWv2U79J8csFmfvv9dmkS/bx9Y6G83pfx3MbVcNo1r
J3277OnvATenawfTv5e7f/NazKuRFe1ByK+DA9cmoM/jQ6m+UamzhIrsy174
v/t3eSLOc0hmJ3fMD98uHjsKftI8lvHYoj7XnDjndquBSBvv7cP8zHPjNiu+
Hz+1/bA99oP2iqNrwP+87vMZ8C/AeuuL8/QbouWB4SjsGXyPbkH913Af34fz
q2+710gBf5tQIhPOk7nH1ZRWyy5Tf57WfR/5Un9GLxh4usv6DqAeVvc8MoL/
k6pzSfT3HY/8MmN1MwiL7p9Xgf+Ey166/+p8yJjH+cApn7v0fSLrfr1b9Pt5
p6LqaYse0qhcWQHxKqlZz4D47ozcvBb6iTK9VgB96uv+oe8vtp365+J+ZZTY
7SB/Ano2XR1aS5+3BxxhxLx9INxuKf3+KmS/NfyvFOSPCvzbT27w0qG/v7i6
oFqK+p/xvjwL/dfIg/E2/d7Y+j79vb+tsqhOgkIlIV7z6R/q52AHYzfqycGF
taI4//mj2ET/flesqQHPKMUPw+DGiJ0rGsgLbzfeBp/Ri88LGSn7ktTqPJw3
sunXdNP3+xtqRej3RY3EM9mZRfJMwvdU5IuaRSf9+5Cb13xthj61bycHQZ+N
vHE13yj/Dh9aRHeG9pGPOQ3o75se5inLAb9t3s482KcHXqW/ZxHnV6LPV6fH
DcUvsDeQHGp5BdiPa+W/D8Xvc459SD+J+HYtPJRAfNe8LXoQge9hv51S1eDv
JXbrDwuAzzuyRcHgs0xy2AT9ND4qnQHxdco7MQP/jsnBxQaXWkmP7m43+j1G
btx56KHJK7wB+m+8NCML/PfVqhSeY3+9RFXsYNwcuebtjw/I39u3tZ6jnm8K
Sd6L/n53NP0T4jXw1iiafj9ZvnTg15N6snrL9mn6+3fbxqc0P4f4rsN+h6/E
UdhzFE29oL9Pz7xbMRX7mEg4e4AbeAyLDy2gfl4USPwKfer2CVTSv0ea4UF/
Lyx71a6uet8oeYVxzh561hMSpvOLffkmefr3bEuDGlFPFraxTuK9rv6D7GfH
BtpJg92DrMDzKmHLKvTfyJSHMtCny4HRAvDZHhEZgd874gufrgnybCM0Xu15
g/lqle4TXpxfpbHyEph/TqVvoM+Ht173fKRN+efoJ7kHpQdIIf0wej8ybC/+
Dv6TuTm2oD6ILPl8kv4e3Owv/f3pqa0/vFxGGgm91qw39O+ztScXoD6b1+Xw
Yb1WFiOF0POsiDM9T95l9lfMH3xFTt7/Mwl9RqzZkIf3OctuBMTh+wv9iI/r
6feQpa307w8P2wbXun9KIsqEtzwEP/bPzwfB/8+RwDHoYWxVnBbwPxBQKsb5
/OjtL2fNOTrJoBAzS+BP/JKRBn2WS0bb0L9HVyNWDjxh76To76kZO9cUNeoN
EFuUR3jp3yPSUf+A86voiT8mOC+6feT8LuhNh1c/g/5+TWajvMa7PpLPnpn+
XuNzj7sj9BD6JaoS+o8uveoMfvhCAujf4ypgENeoDxwnZ7JT5TFfdW+KksZ+
2Y+Lb4UY5T+Ov1ID+et5jZET+zX9XS97Te/2EsqrdDhQH4YOnqXvK/eMKY1h
3jBJ/RpI/36L4zkenD+3/lm21ie7gxTb+vYl8pG54ddq+j4o53U28DBkn1tK
/14iM2cH/XtTL0Qd/h5mVD96d98Z5BfH70QR6PO+hI4f8uXXy84K8GMonEt/
P1j0NmH+xP86uu64nrso3JIUIqGoEC1UyK8lfRMNKQ2RpERSFJEKFUpGS9FS
mnqbMlKkQl9N0dbU0pB2SouG3p77//3cz7nnPOfcc+8957kyLVR33ncX5A+H
khQLsR+dsBY/jHhSU+7oA/+6o2fIqzovv+1wuFmaUzGV961bCfIrMay+QJ7d
4ubkfNpu3CIJefzDm1owf4wa4xmjdYzy3/MhC/jJaNzEgDy8gi1akIeZd2wI
9hXuy2mvwHuiKX9x0fz5PZK3SoXwq/CwEj6l86+vE77EK/WJhP+w1EK1idR7
KGuqFwTN0vcze94gft7LTO3HfZSFXeon2DfRu4/wqepXn+MmfNe1Mc27hWto
hopLCPQpU3V6L/DD+mTlDPRfZ5lP+JQ4NEy1NqJfbOMvhofiJ8rPTrYO49un
2+dQT8UlX2GM/GFfLnMdziMNtxUJn8kmF251sW2d1Nf1fbvgjyxnOTxQ3+61
7+5byCPtS8tB/icfZU6TetfmDFf/X4Pz8TLHipyXpbx5kc+XhtVKYr/4qBRM
zr+SmxNcdqD+x1Xw9MOicXp7kDDhO7J3uR+H/atz1QHC9/7HrZHkV+dXXVmA
+dPdmBTNWD5Q8gOFFrCXasfpCIw/uWHuFfCzUebBClKv+FSG8JnEpUgq9Ox6
QjGYWbVIf9ZogQfis/GiS8OwV7ZlyUusV5JroTXhp5WxVn7Emk3zjzj7AP/r
Xne/Qj3q+cvbOJHPK64dWg35d/y8vwr1+aOPTDPmV0nb8JlfhPzFsSLryHul
dEki5FecfOUF/W8/O6uP++qg3vD8gIwWih4P2oz5d1G3x3G+szfuPgS+r1rz
jdOE/+3U61Lk86b8z+zdr3bRSyojTIAfrgNToYhvOVMJyogPrrFtYaR+/lpD
GPylJZDj683vs1TZxUFSr8KndCoZ6w3aayOL9XJWjZD4wDI5+BX6eXa5kO+W
aA3NqXVlPez1ao/MK9LPZccxAPyzjP0Mh34S0lsuETyol107I/mXfhfpewT7
IxPFo4R6s87ip0/Bx+t/6rMR5BdOHyoMm5e/myVaTVb5D+WcMuEG/dRHp/AQ
PsmOO+R+RnzcywHz86/O9cH88SZ7by61baF62MpJfcujjiNV6N9cNP6uCvP7
pG8kfEFeXrK5eH8Uki6taDFqoe4yDXeQ96/WNHI//GGpTS3k/6LDJgX9SKc9
HIB9Uw9GP927kunjmMfET+B5R3/ffuwvMnx673C+aPQ/dgD6kf/OoU34eC9Y
yXtb9dJiOeakntBGY1QA9wlFGrmTqM+cTPN9APkbk4NeQp+Bu3Nzf0xW0B8+
PVaHPnXt9xC+C8FdS88CD0oDDwi/tHOTCcnH3jKci+/XZdFxh5tcgecMBdGV
0D//F5c8+K/Q+AeSP4guDsjF/CyHjOp/rmD6KJPE+Rbx3Mg84RfwUPayjRX+
Feh29g3pB7FprLCd10913FXX/S8rqX9KNnHQZ93H8teof4j/KfsN9XI3uHkJ
P9JNHX9RrLf+skjAyp42OuZZ9iXIr3e/VQvyu6lvFyD1wzXiwtC/Mn9ec9D8
/BMLn7GdWfqJqv73Po70l8XdOIb8PGWQVR74bOy5v5fwA5hdIv0mU4ojR4IH
u6mZvRnLEc+Pm6xYgPjZTx87D3wu3bf8N+xlHZxG3kOFXvAdfDfRQbflhjyC
fmRcXXWx3iAN01rIoxousBfjj/BuJP9B7PAJiYhwaaNLaqezIc+ZeidZjDdg
l6aAt6i0Vgb8d8m1ahvI73n+1vejgg2039WSHuB5zr56Gvu79vdbn5GvbitZ
Ik74ebI812F+zZgyfu3cIprLfsFyzG9jVZuKfEy77Rsn7Nv7Xxp5j7PQOV0N
fUplCBRez/tCBc0eSMR6a7SvxSBfGtigRt5bbyf4kv7lT01vNgL/T8dW7ZHn
YFIRYjglYzzPeRVSDybr5fYS+VVE1wpZ6P/6iZuNn+flf/DW/6D7uTgq7s8b
HnI/bHVJHuutNYpJxnpFDKQJn4DN9q5MyPMmXGWq3jicfhkRWQD7lime0IS9
5tzVOzD+dlmhF/Ap7eb4A3iLvv5ENT12iFqiwm2D8c2XnUPgX1XZHp2wb4Fu
4zHIE2WjVAG+CP27gxukZ+eojdFnEhF/3k+3iyL/8dM4TfjiPj89ex/5Qx7D
URDvm5stslfcUqqh2jZXTCK/Ki3tPYl63W36vUngo7CuDPYAfnSD7Lshj4nX
nxFDnkm69tOpIOAhcLDHG/qnh4qjIP+FOUtO2Mu4+Drhm/rcFf7tv0Vd9Jsr
xwgfl8ll0x7E5yXZwa3Ih2X35thhfreqIy6YX7mtaG7Z0kl6IGmcA/r8LTPJ
i/llWypJv8yxFv270I+i4J1W4OEWW8T6lZ876J6lqmXwrzNx/ik47zip6H7D
e+uP14Xa5P8Xjh5yXpOnez4bBHbTS6xKl2C9aUm6kqgHaLa0nATe1ngp20A/
hcXxMTi/R+gOHTNwHaEcd60m92+Lkm1eYH//mvxCAfjv0z3dgP0lwOZbeef8
ePWzG0Z8TAaoyfiAJOB54/NjbfD3VWpqm3F+Mcy/Qt77NMfj2l/Ojzf8+p9v
enk9bbTKjdwXBT/6RvSzbsLyBPR5402VPOlf4Ir+BH3eOKuiJNY0v99pCppg
/9Ju7c6Hv4zY5glj/yoOOrYX8aTrMIsYxl9+36DPqZ9ESfYm+mK9VvJPonC+
+2EkfgHvayU3H94n/YNnTy0g/FFyznqqwp10MuekMul//KVD3ncSmYSagbdF
9UU+pD8xejvhu7awjrk9v8lSr0XEW3D/5qE2HoB8b8Bnny3OC1rpc+S/GDHH
sirYKzjI7NCWvjKaJdyXvGct3SixHuvd8UI9C/p8YPfoGOLn230bqrnm86W4
mSXnegOZVDbuU6kmfIxhpUyIhxyXdaOxvxzSnSH1sRL+barAzxrPNIVjdDM9
aJ8gBTykSLVo4j5Bp2NCA/a9MfbxFOLPnIGdzcd5/ZvvCfVQShilEsxkyHvB
jetHxeEvrxUDPODvbbZXTmG9zms1SH9iym9eppnVCdTaN1dyoM9PygcXgR97
BfuqcvTTBTGlhMMfWV9e0+aZl3+n3lGhcZM2+pWFIeEz6TJ0qCD/m2hdVcD+
Mh7x9wj0z35tbS2pj1LMXVr++B1Vtec6F+ThWGTSh3i1S825BucXwaonNxBP
gr4n7yH8ul68jtsu9tIjS+3Vka9uswptQr60yyTjNvZTX27f9ATyPj7GROol
4g6Yiwl10gP+l/9Dfn5g7aVGjP/vt3Mf7ls0/B9chvzuY0LrwSep0TQXNtfa
QVedGtWFvZ5wGdOIVw8ZJn+Ah6upBdbQf/uvkHDMr8ylL5HPPknleXvsgP7f
1FQeQ/7w/cNzfpxflp4+HQP7+u9MKQA/SaJ3aeAimT7K6d8Xcl+tU8E0inir
sbNcDfctbxjmK8n9/9QyBvD2/ILJwSa937TXaiZrxOdalo+OsNfvMfoR7BVA
c5L6w9tvDnkD/+U+TRap+lN0QkiYGPT/dvCwBuGXKJu+B/yoGY8chPxGymtI
/qzNIyEcaFVDSdTO3IE+s0z0luJ+KTXE4zjwE9Fl9gr+/qLtUPbwvPx3XXbs
yl7bR9XzOGpBn0GPzWXATzuSxxYO/b/JP0r4h6fqAwh/3Vpt3ZXbxcrpG0p6
zVhvf+9fP8i/5QPzRdh3Z9198v5lu+BTNPB8PrTWfTgkm76/SzcU8faRYe9v
8t5nKF4Nf/ky289H7mMV7rRh/sFH8sZRvMM0TVNHML5iPJb8V7J71eMV2B8t
/S5kQv4xgSZ9cdyfLxVzDpGvplXLo9wQr4bZMrVgLx6xZ/mQ35lJMJD0i7lk
HYM8hi6bIwx5BuhKFvlQ5GNea4WicD7dLVoUhP8RJsOEZBDf7B/w8oNfLqX5
15yU1QjFXLAyA/G/dN2l64gn8X553cCP28TxFMSH9ckchpD/X+TavCNqU/Qy
uyXRON/xWNqR96DrYueCgYfpL8WkX09Gg18R9mKbWlk7sLuZ5vJRGoI8w26F
CvDH3VourniPUOFwVSf97AErmIg+eQwFBr/OUHpLv9wEfgLcGE7If7LWzcpg
ftVwt+vAf7nC971f5uWnRsW45BzBYxU/hPhzgkfnGfajtLeHApHvWax7qQj8
7OMv1IQ8p+R2aBmdmN+3djfoYv7we1of4b8myUbHST25f1M49NPz2+4P+CQZ
i+8zMhgtdJiR/jL4F6v1/oOIbzeiNrcAn61X3BLh76e7360B/hmCF+2DnDop
w86ieOiz5zObA+IJJyejAfLwy8R+hfw7S6+8PTsvv/fQE92aD93U/oMMTsQr
C/3I58ifuc09zcGHXGArQ/gDXQQNq6GfXZJ3kh/MddCtvIGED2TxxWOEP63m
4uVX2H8fip88QeL/BjZtyJNkwXE2pjSO6stJaiF8rU2PLwBvTtlX6yHP+VSp
zYS/zk1MBfdFqystHaauzNBn+5wjMP8BKlQT8f8zr+8dxMPyNfmzpP5kvUJy
9vz4gGvVwuGPZ6jkhdRbxMMfZ1YWwl/aQy3zYK+OmWgv6OdCm9QcqX+ozzo8
UjVHr//JPgk8WNc8NQee7QvK4oDn7+rL0iG/mb8g8cengsEngkTL6VuapaTe
O4N5dTTwufz0Mk+sV2jK+DHwz+dEE36bsEPXC11sYihGUrIS5JHscBeGPBcl
3Mj7wj7JLFLPkKJxmG/bvPyKXkZH5Yq6qcfffj2APxqlMYoQf7QF7JVhXzPX
TYQv/YHC7iHIs7zwZP/V0no6Rtr0H+p/Mp+OzWL+1m1j5PzYXL38C+KnrNZv
c/TvdC9eQXs2/KCjra1Nof+xlpeVwGfp/Wgh+LuJwH5S7xdfFMIK+a3C0oz6
9f5SkZvkbBB/ruW4f0G8vROryYv5FbtESb9wQ6mqBv6zkzuT5FutkUmz6I6F
YX75wigJ2GsFu34Z7MXDus6K8Kc5bPpJ6nXNzDyap3OoWbNnoph/kN3PG/J/
W1DuhvmrfvycAT7jsz+MTM7P7+4eqRs71UBrShschH9Jtw1LkX72djFJcn/V
sUuL8FVuGV/kiXo2YZUxD/UB6qFE9BHMfzLtgh7ig/cS5Uz4V+tmJtI/vnlv
yjVy3vR8HVl4tIsOW2ywCvMvfeQtCzxPR8u/hH3LX+83J/cVzCzkfNfbsLnN
c2yQ3iJSkYf1vvaYUMJ5kK44fh/x9qPrpnRS/7/58gqMV6w543iNp4v2MXhH
9G857Uj4ipveJ+UD/wyx0+T9YqaHmfDJNAdE6rB/aaAXX49ZC/mZ98nKQP7B
K2afEP/19HQaYd/HcboxHTjftfYvth5kVfGXXXAP+FHxNfeHfkSMNNQh//Gh
1zGQnzVKk4b+B0RPrc6zXaxS7bGA9BvG8P0i92Nf2PlqCP+DkKs8xu/glLlD
+nfa/zXmzufn27bfqAb+JVXW2AGfnpa+EriPcgxk+Qt7cQ+waYEf+OkvlqGb
EswqcVcke4D/0bQndpD/ZIF/J953/hro34F+WlkYi7He0aPlHA6K1bTI3nuJ
5L+P1DHy/9Rvu5FJyL9Vdxk5n8qu+GOA8SfiyrcsCu6luVmEKcx/tMqhpZTU
lzovx/4+1a9Dzo/G+8188P7Lt2ehgKp8LdWldzAL+3XU1oQSvBck5og4gb9F
Re+SC/k/q9XjBdbrlbUn7/jjfrp/9FII9FNypzke8bkrMtQB98+yWvUamL/9
4SXWMvBNSbOtfh3QTK+dttVBvv2WdbIG+W2XqX8S7qNyetLJ/af7kLIM5PfY
zZ8/ZdlNV171/o78Z0L6egniT9jU6inkV+fYLpH8UF6zXhv1Ian2zerCTJ20
4YQ46bf1besPAt4ahPs+A/97L9wTQXwINyg8B/nlslfYbeCaP1+6J14j/B7n
DP7Bf9OsysvIf1sB6iHAm6FTUzj5v4MrKt7CdYDS8W7ajfjPImRqjf7fK+ns
y1EPqbbz32KMF6oVPUj23xgdawuFSsp2bKkf7mdsXP71IX8Oqj7LhvPFr1b7
Qein57n3Ipx3bomK+z1P66C1Ek9rkH6Nfnoa9mWtDLlB4v+UD+HrPmO75gjh
j1pRK1Ji+oT6vNE9B/lG3YCoMO7f+FXtHmA/eqomTuqpTkicZkB+VeqLqWwV
s4q/gQ7xX+6GNUbIP2fZzi0Dfv4JypB4vrb2YR/07y3Vp320oIX663SKi9TT
vkgRhz/+iU1cBTy/Fj5sTP7L66EEIf+Bq3X7Htb00i05nEPAz/CS562oN2iS
2FqF9/cCkQofjE8VlmjtAv6lAhsWNw/SvZU9N4AfhWsDXuR/QBvBb4hvvLwH
yfliUMFRDverD2e/2ikcaaE/9mpMQH62vY1SiM/F79cNI/7PxX0i+b+vZsJ1
rLfkFnew5+Fquj+Gm9TTXhU4exHrTedozwUefiT5KEI/wu+MWMh9QnFIx1BC
Ef0qWagB5y/aJv8y7Lv5xPtQvP+K8+4n/6/lG0aS/ev6+3/vSmK76SSzu1WE
Py245D3mv2RJEz4BpgrHSsSftN9zfy/My9/P6x2XnN1FrYjWJ/fJDKcTeyG/
rrvfB4wvr0wfgv41RRV6YF+qRm2399oKepz/fgTwFq9XyYd6yIWjDvdQn+N1
r4+V9DPmy9eS8+Og4Nq61m7K4g1zG+RJDFp0GPIw/fu3DvmhX+9FJ8w/ZHRS
CvZNFZkqHTTIpp8rVSoivzoinHkT+pfm/28v/HfLovPrSH44ZBOA9X5Zn5Yq
F9tLj5aOtUD/AvGnzgMPHAP/hZD/+FRPHMd4YQGBh8D/+taFhvSLaWrUwkUD
8WeZlksv/OtV0AFS/7bPUIYV+nlU5DroOK+fnT3FqYFthbTBBZMvGM+66upR
jI/MPDKCetFbTaLkf42IioukfvJO5N+foUlMKiIjUcbAT9TqwkOQv9g+6gL2
L3qgrAjxIVQ7Jhf9d7bLjgdV5yVRaSZjC4Hn0y2rTkL/9h7K8tjfn+WUZyDe
Hr4RwoD8BalGqqr1vfSlqDjCT2h14lUR/DFqDRMn8N9uc5HwH+YGhahnzM8f
9d3F53tXB13wt5L0S7aLOhog/mRFaJH/CySWcawBfn4d9CX/gQp5a3/qeD5D
+XxIDUA83NfLKoH7jdndOrM472fdUHcC/j38mksK5udPT/4aZLwhhL7StXgD
8LOzvs4I8ku354YBP3VlIqGYX79pgvQP7s1h2efDwfTxasRywk9uzybgCnka
c9KfY71VGtYkPzk5Lipzan7+BA3lnw763XS3XOYn7F9xNA+pT9t68MkZxJ8u
2VDyv1vQjpE24G1NheiuaIsG2sm6xwL4iXbM7oa9lqx1LoW9LFp9b0H/nids
T+J+ZsLWrMl7roj6YlRC/iP4O2ZbT/4reVzXCPmP/vggSvp9/F7M4b8qQ93S
r/2yzCoJzVyhwENDK98G2NfgJncI4kNHs9oHwu8hYaSC+pyDYXs28Hl3UsaP
qkSAh+oKVcJHUfeoMg3jP1WuJPXVHD9XegH/r8uVj8TIFdG72aNdsd5mDn5N
5DNl+yTkoB/z6zUMyL+yaJ9lAupXXbce+SvMrLLhfaIc7FWd5zqC+PbtrKMV
9se76V3cmN+nRjaM8Dmc3PW0ILKNPqO+2QzyrPa0XAf91DBEyX/KWV7u6Zh/
2ZvY4/T8/ElbUhu+nOmiF68xNib/Vf1dMQG8dSyOEYd/BXRQ5Dxe06E6jPmn
Be+89OEupF02VJD/FMJFRNhhr9+xbuPQp3Ym2znEB8EwUz/CP3yv2XP44jtq
W8aehxgffG8tO/AwV64lC/vOqXSS+8AAF1M23F9pPzNMYw4po2ejKsn/gLoT
Wl+R/7iqVJrBfx8/f+oI/Pw4bOsOvqZPB3SK7MwHKFF5TdJPoVPvPQR56nW0
ogg/YfIzwi/dpdRTCfwnevrtj7hVRueq6S4DHmLFVvNhvRNRSZ1Y73b2GHvM
zyH3ugf9BYvP2ezfJtFJT5w30cR+d0bTQBD3CRe+tY7i/dpBSv4k5A/hlFxG
+I4kx85fWsX08UDfdgbW+97BYQjnkaFDzZWEf6bzOQP60ciwfILxGnkXNgZm
dlPlLJKEn/br8XZd4M3tVks48r1wxSfkv90/3w61Q5+dswv/sC/rpGV+pFDI
H9Yt2PKR8Df2S3qQeu/gOQvIrxY3Ib5zXv4XWubMJetb6CIp2TScp9bcvv0I
/ewuDLWHeM/lXDdO5Fnz0JHUR+1M8TjFo/ae2p6tQurbp6cXdcNfFD8JrSf7
y+lt9wlfUPALOfRPzbCw7mb90EuJJv7hJfrPZGLGendWeBdj/NnuFXwYzz1i
fBr85DrqqY0639rou551KdD/SJuaEPLVIXWhV9B/wR97Uj9zQo0pn+wvrzYF
THM30Moa0inQ/7JMxzLcVwxdVP6E+l67B76N5P55RqyO9HeUfhtXjGuhvv7V
EAT+De6EOkI/B+zOfQb+7aKStYH/M9uKY6yxvw/f2Hf8VBdVzP6yifAVxx72
wXp3Ou/5gP1L4u1rK8jf9YxPG/0Ow5lWoQuZ3lGcVtobMf7a29Rt8F/G4t8W
yGdozek30L/KvZYaxBP64pW8lWHddJ02czX075StaI1+NB3fm4G4TwufiGYm
9djttX/J+8Wz1Z3HEkcpb8rlOOyb6370KPCw8ZxlKezbxL89FfHqkPXTFtz/
7zF2D2wM+UZp+WXlQz8ieWVuyJ+rX+68jPPygp21VYTf70ajAOYPymT/devY
CGX+sUUA8kvetU3Hfno/c8wV8vumZpH+qZu5jf2x8/OHeWbls/f9oLUstm7F
eLGgR17wF/Gi0H7sL7G/4kKgT+l/xeq88/qZ/SF98FlmF/VmnS3pb61r9CV8
5pZURjvG6/dkOMNfdkUsOUv4FlS4ku5JTFA8oncFcP/GfUvlEN5DN/+37gPk
L2AyOEj4u1I/k/tqyih3xpB1ki5Q2UD4SPVNvm6Hvy+xHHsJ/2IyjST8mTmO
YqRfuNkv67fBnhqam33LKORXW7RyAex758t20u9sfvUF4TeIuusgB3+0aHf+
GRE5Q7enSpH7itoraoKIn0561eT/btZ/Vl2E38zZOJj0o/H2qfCunKRG27fe
A95kzFLcgLfW2zfS4L+9/7IJv+WngBcdmL+mriBp/dUGyvOc9jrYl8OQoUX+
R/j5qJL0L5QY2wBvtcHDh1Af9eDFNkZpdxyV0dB6B/qMuB5F6nufvDysDvlT
mBWkCV/Q8d58+fnxd1SMn91/NELt31K8BngLDc14jPyfSdrvPeoNHsT0/8P8
hZ2MlejfvFdx843p8zZ6pjWXnB+9dgcJQz9WCoPk/4XG3evJ/02bpP74QZ/u
c7dzmyfnKP4l5wlfwYHb58n7lNt2XXXkb0N6ds3Az2HxN/xJuH/LExVYtmuY
Wlwp04X8NjRy+gTqeweCtA4h38ho2nER9ordeZzcl+42v75LQ2qAvtT4nLyv
pV2ocgV+FkupmyM+/PlPTBv+tWBNuzL6yzROxp+/NtNAqySNR5J6jDC1Duin
wC07E/IXupVdhPzszR95Ya/WXL2WmdQuqt6w9yH2lx/FP9gh/+GESgb261Lu
4BLI7/w7bhT8Tpqziz81PC+nS8d732F+TvOXWyHPQqeIbcjHHtrkE/6cQf09
V8h/B7xvA2WvjVBm2QqEL7ouXp7c/7QL5clj/7p1xIHk/0G5ub3QZ6nDP36r
jX3U1osCT2Df1xYmBYiHl95n22O9x3edIv3RurM8vzF/Qva+a0uvjFAP3DV3
Qv89zS8IfzhL8NMbiA8Dl8TJ/6fP0i9t7QceeIUY22920wkcb+Ihvw5nXQ/h
26TKkhGfo+1DcjG/t9x7Ul9dVHR364zYH2qTPS/pH+F6ZFoKPIeW6BpC/tts
AoT/1syy+A/4ELJEQhuOFzTQpxIUT8Efa53jSX2yzaYVATjvqHnKkfPshPlT
wqe0pu/Mveb4UXpmrJHUK5r51YdhP61zEmsDPguDNcMQT8SoS/JH5uWfkzzU
azPeTIn7HfInfLA2M9/hjyo9q9vgL8VNH65B/9eExIwx/4/zy9cq/Bmk3bfF
dkJ+ByW7y4QPsKX5F6lnHhA2Bf6XX+3URT/1PoHu6V/yLdT+csfb0D/v74fR
yE+2FDokIV5db7KzJP+r6nBrY/5394ODn4/G0m3N2lPAc9up63x4bw1gy3PF
e9zRy2HRkL/0qUob3o9OOnznfLqmhs7aXfYc8ZnnRPgc3hfCQt1csf9+X210
Bvoff0yReq3YqqPPtGWK6ED1AF/o84xqqQj2l0mdNZawVwKTNE34gpR6woBn
Gb6FRz//+UcV5WrWQ58a+j4TiJ/Sh35Z4b2Da86Z/E+t4P2A8FHrDsk8G03s
pXknVbJwP2Bm1MaK+3YnyaxB3G9wcM4lQP5ZOSk91F+NZMUe6PaNpRXCvaQJ
P9X6i4Tfhl/i2znY13ztJU/Mz/fbXw7yc73dxvxr2QS1uk9WifwPUnLRiuDf
+XwN7MVQcIpCPJxiK74JeU6OKD6/x/+HWnH4Wx/85dvzWmHYS0zajYH92vIa
Xw65j1pFryb9a3fUezcuYvr4U1P6BPQpdX3deeDns/qZDagnCUzTJXwg+cJr
2XC/evlXN/N+kfn9R/W2O+lvZXcPIv1ff6ZvEj40EaEI+OOwhZs35L8qeE80
8VgFLV7VE4f9SOOmmCDO42YXlSZgr8n968n75iS/3Wbkn8eHN309X9hAf1d9
S+qv2hWfGsF/KxP3d2D+KF7xaXK+++5L7FW+oHGLoWkLpZ808x36OWebZIXz
gkiN9HHEn/rcEYJ/5jPmM9vw330YdeDmi176RXFMDeKz/IzOSuj/UXwPqe+K
SM0j70f73yxJh35kvmb0bXnXQE+lTs4Cn6UPRGfxvjzBZWSAegA+WxXCt6+T
a9YG/vzP70WutteOUo1ba52hH8l8+xzETzG5FerAW/7+H1OQv27gPvnvUqS9
MPu/r7M0ixzfY6z38cKAEvjLZw+1z1jv2qAwHeAz2dHMEvJE+/967SjZQi/a
v5/YK5nXlQn2elAjKYHzS/otoyDIf1MmkNz/B8nOjm1d1Ek1vojfQeqv9iiY
Ib5ZPj7hif3Fvec46fd/oHeZ8NdtUb7Wvb1qgh4J3nIB+jm6V7KD9L8HSg9B
ngf27eGI57ODBq74f3boRYNLKm8ttejhZ0PY91cL8xb852UkpJYGfzm3R6sV
41OsAyc34P/W70f59ntPU1yx+ezYT3+0d/Sgfq9p5QkN1Cf0Gx4j/+cunXhM
/psYN16lKu/ZSTmuDtoI+Ut4Y4YRP30ruGORPwhkSKZh/sTma6vqUb+Rv+SS
2vY4yvG8nhrk73sdtQv4FGHvHkf82Xklk+wvfhKNhN9M7eaXpKzhNlok3JX8
z6Uf+E+P9Iud7iL37cE7HMn/EWpcb3fg/atL1FxL7GkLFZtssgHyuN0zsgbe
qkWcFOCPrpk1KeR+8uevJaQ+6j2768rZbEopjdsL+IyM/r4Q/rsw2UEM8XM7
z8xtUo+kkKyM9d6Oj3z1rPUfdbUxOQf6PLVcoBDx0O7TsvV4T69qW2mM+FmT
mKYH/EuEC8a8Ux2gbv7W1sD8eqJ3ZTD/+kTxasiTHawXAHx2R0Zm4z/N8clH
rHlfJ2idhIFd5P5tZJkZ8j0FxXdXsT96l6/1JHy/QZk38T9pofrlrLyYBmqr
pCn5X+ZqtsEzrDfS1eM75F+svesC/Hd3h+LBrfPj3zqsNzpf2kaL7TGkEG+v
0E+boM8jUjp68C+x2h9tmL9l1apt6M9q2LXOeOB9F7VoOGU35l+SNv4O9rVm
8JgCn8ezj/Eh/giO1BuhvrEuXODbkjULVebubyH81ZOPl6fAvr8L3hwCPhvG
1xgBzw6SLvHQp8DfrjLn1d+o8hCHFfCXey45wog/PqdtCd+Ia6NyNuT/oJOd
zZjH5//dcclc
                "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
          20, "ClassPriors" -> {0.5831062670299727, 0.41689373297002724`}, 
          "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UPAOUC0jI9Mooh8ahXSEAMRWEUU=
           "], "DistributionSmoothing" -> 0.5, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Calibrator" -> None, "Method" -> 
          "NearestNeighbors", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "NeighborsNumber" -> <|"Value" -> 20, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>,
         "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "NearestNeighbors", 
               "Options" -> <|
                "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "NearestMethod" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "NearestNeighbors", "NeighborsNumber" -> Automatic, 
               "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
             "ModelUtility" -> Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType}], 
              TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
          "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
        "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.095217, 
          "MaxTrainingMemory" -> 2671872, "DataMemory" -> 178408, 
          "FunctionMemory" -> 186160, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 42, 5.495974`7.492619657320165}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"2", "\<\"RandomForest\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"], 
                   ImageSizeCache -> {
                    12.344414062500002`, {0., 12.344414062500002`}}], 
                  Appearance -> None, BaseStyle -> {}, 
                  ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, AutoDelete -> 
                 False, BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
            GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], Appearance -> None, 
                  BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False),
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, AutoDelete -> False, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 732, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.048344, "MaxTrainingMemory" -> 319016,
                     "DataMemory" -> 81824, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 42, 5.548523`7.496752378429027}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.41643893442623}, 
                 "StandardDeviation" -> {14.237916921543757`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                   RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                 "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5831062670299727, "survived" -> 
            0.41689373297002724`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 3, 1, 3, 3, 1, 1, 2, 3, 2, 1, 4, 1, 
                1, 4, 1, 1, 4, 3, 3, 2, 3, 3, 2, 1, 2, 4, 1, 1, 1, 2, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6228830986978648, -0.4336592816997582, 
               0.46750790621094884`, -1.4346334434421664`, 
               0.20129029519276642`, 0.5408698691061025, 0.20332261936805485`,
                0.18171705770000934`, -0.7328496628247887, 
               0.46750784838914594`, -0.7328496925882373, \
-0.30448084672452946`, 
               0.2769350751067958, -0.34593385897134254`, -0.8043373148160047,
                0.2769346715100989, -0.035998589009425985`, \
-0.4843605622648024, 
               0.07084955168727425, -0.06492717433479145, \
-0.06492689955433528, -0.7328490534401428, -0.06492742629400816, \
-0.06492741395006119, -0.7328495928009149, 
               1.0179142539829797`, -0.19707647984039878`, 
               0.17389226323590123`, 
               2.3205863728167504`, -0.34564114997236883`, 
               0.034630456047436475`, -0.9759031182065794, \
-1.2285367794278201`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {28, 29}, {5, 
                6}, {-2, -20}, {7, -21}, {8, 9}, {10, -22}, {-3, 24}, {
                11, -23}, {12, 13}, {14, -24}, {15, -25}, {-4, -26}, {16, 
                17}, {-5, -27}, {18, 19}, {20, -28}, {-6, 23}, {-7, 21}, {-8, 
                22}, {-9, -29}, {-10, -30}, {-11, 25}, {-12, 26}, {-13, 
                27}, {-14, -31}, {-15, 30}, {32, -32}, {-16, 
                31}, {-17, -33}, {-18, 33}, {-19, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
                 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 
                1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 6, 1, 2, 4, 1, 4, 1, 1, 3, 1, 3, 1, 1, 
                2, 1, 6, 1, 2, 2, 1, 4, 5, 2, 2, 2, 1, 1, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.010044494981569035`, -0.8533632735877497, 
               
               1.297152260775185, -0.9759047610444265, -0.4336592403967834, \
-1.3490888567279953`, 0.07084879674583688, 0.8793604192369937, 
               0.9937058695253853, -0.06492702012219964, -1.1494113215297954`,
                0.46750619401336646`, 
               0.1844540067925351, -1.8858692746296128`, -0.7328489418669948, 
               0.9181084575759799, -0.8533619664430248, -0.06167417891410748, \
-0.7328506680865576, -0.7328502074841374, -0.024140929165330338`, 
               0.2769359272104581, 
               0.8048294295382883, -0.9759037643786321, -0.7328488616145208, \
-0.9759034207468291, 1.195778758014324, 0.599841898222536, 
               0.07084951160376085, 1.0886153829828924`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {28, -18}, {-1, 6}, {-2, 
                10}, {-3, 7}, {8, -19}, {-4, 9}, {-5, -20}, {-6, 11}, {12, 
                13}, {-7, 14}, {15, 16}, {-8, -21}, {17, -22}, {24, 25}, {18, 
                19}, {20, 21}, {22, 
                23}, {-9, -23}, {-10, -24}, {-11, -25}, {-12, -26}, {-13, \
-27}, {26, -28}, {27, -29}, {-14, -30}, {-15, 29}, {-16, 30}, {-17, -31}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
                 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 4, 1, 1, 4, 1, 1, 4, 1, 3, 5, 3, 1, 
                1, 4, 6, 1, 2, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.010044451976783941`, -0.9759037406186106, 
               0.17389225860979396`, -0.13546155211800226`, \
-1.4346334434421664`, 
               0.1738923710070306, -0.5839298191908044, -0.8079900245339298, 
               0.27693479882155536`, -0.838563582601072, 0.4675069957233089, 
               0.6228811758778567, -0.0649274279947879, 
               0.07437171414293653, -0.4848150138390763, -0.4336595953096918, \
-0.8533622618861907, -0.2005325646626548, 0.33869754383855577`, 
               0.0708487643552922, -0.2730622044387463, -0.2043780411692251}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {19, -11}, {-1, -12}, {6, 
                7}, {-2, -13}, {8, 9}, {10, -14}, {12, -15}, {
                11, -16}, {-3, -17}, {-4, 13}, {14, 15}, {-5, -18}, {-6, 
                16}, {17, -19}, {18, -20}, {-7, -21}, {20, -22}, {-8, 
                21}, {-9, 22}, {-10, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1,
                 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 4, 2, 1, 1, 1, 1, 4, 1, 1, 2, 4, 3, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.8048291391952356, 
               0.07084975414040007, 
               0.07084861947524301, -0.7328505562660776, -1.9258676532906076`,
                1.6880999199325224`, 2.1786040684737547`, 
               0.21833717356973992`, 0.2769351011569934, 
               1.6867657105831455`, -0.4161085977867578, -0.7328490230007771, 
               0.07084987246483054, 0.20129005710386916`, 
               0.04029952939961362}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {8, 9}, {-2, 
                7}, {-3, -11}, {-4, -12}, {-5, -13}, {10, 11}, {12, -14}, {-6,
                 15}, {-7, 13}, {-8, 14}, {-9, -15}, {-10, -16}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2,
                 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 6, 4, 1, 4, 4, 5, 4, 1, 6, 4, 6, 6, 1, 
                6, 1, 6, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.07085010413485926, 
               0.010044451976783941`, 
               0.2769346227280267, -1.2197521880385054`, 
               0.07084865017542119, -0.4336591071148046, 0.6228822551943409, 
               0.07084988335678977, 
               0.18076740780557188`, -0.8533617915510003, \
-0.4336586462315082, -0.8533632442478822, 
               0.010044557649022276`, -0.5931577604418878, \
-0.8533633877111724, -0.30778523180258066`, -0.8533617740732975, \
-0.4778446466223465}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {-1, 
                6}, {-2, -11}, {7, 8}, {-3, -12}, {9, 10}, {-4, 
                11}, {-5, -13}, {-6, -14}, {-7, -15}, {14, -16}, {-8, 15}, {
                16, 17}, {18, -17}, {-9, -18}, {-10, -19}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,
                 2, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 2, 3, 1, 4, 1, 1, 1, 6, 3, 1, 6, 2, 
                5, 2, 6, 1, 2, 4, 1, 4, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.010044494981569035`, -0.7328495515790916, \
-0.7328508067489592, 0.6142328438917017, -1.81824657045399, 
               0.2769360363119384, -1.4055035965028804`, -0.7319070136687786, \
-1.5070573729369894`, -0.8533620295322057, 
               0.46750656852313943`, -1.019558093640315, -0.8533617915010385, \
-0.7328506267387631, 0.6228830390236508, 0.3386967045756979, 
               0.010044477134995289`, 1.1702543352116113`, -0.732849040612189,
                0.07084955567614548, 0.5313885437832324, 0.0708495891201576, 
               0.46750635051370937`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 18}, {6, -16}, {-2, 
                15}, {7, 8}, {9, 10}, {-3, -17}, {11, -18}, {-4, 
                12}, {-5, -19}, {-6, 13}, {-7, 14}, {-8, -20}, {-9, 16}, {-10,
                 17}, {-11, -21}, {19, -22}, {-12, 20}, {-13, 21}, {
                22, -23}, {-14, 23}, {-15, -24}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2,
                 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 1, 5, 3, 2, 2, 2, 1, 1, 1, 1, 2, 4, 
                5, 5, 1, 3, 1, 3, 2, 1, 4, 3, 5, 1, 1, 1, 1, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6142318713580366, 
               0.9867751866936878, 1.9372724683928855`, 0.6228814774673568, 
               0.46750655130242436`, 
               0.3386974225040289, -0.7328501985047415, -0.7328490373625964, \
-1.0862136438665608`, -0.3057496280595977, -1.0830280661314227`, \
-2.0064000448763792`, -0.7328496999001448, 0.17389170326659764`, 
               0.6228820940893769, 
               0.6228829249084527, -0.3013095331206732, -0.0649274279947879, \
-0.3456858097462061, 0.4675062399910619, -0.7328500369303201, 
               0.005430029268180786, 0.2769361925252074, 0.46750690991476196`,
                0.6228830900071785, -0.9734275903298224, -1.5040184939732928`,
                1.827509357185539, 0.5365341461853186, 0.29936794723562654`}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -17}, {25, -18}, {5, 6}, {7, 
                8}, {11, -19}, {-1, -20}, {9, -21}, {-2, 10}, {-3, -22}, {12, 
                13}, {-4, 14}, {17, 18}, {-5, 15}, {-6, 16}, {-7, -23}, {19, 
                20}, {-8, 23}, {-9, -24}, {-10, 21}, {-11, 22}, {-12, -25}, {
                24, -26}, {-13, -27}, {26, 27}, {-14, 28}, {-15, -28}, {
                29, -29}, {30, -30}, {-16, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1,
                 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 2, 3, 6, 6, 1, 5, 5, 1, 6, 6, 2, 4, 
                2, 4, 1, 6, 3, 2, 1, 3, 1, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 3, 6,
                 1, 2, 5, 1, 1, 4, 4, 1, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBdQGK/iFib1JlAQAAAC0AAACIB73rqZPvPwBZOLzKp+M/cIEeY5k677+g
vWz5CZ+wv0AGGwO+Tuu/INJIhu+ShD94PtZW8Xz2vzh2Kfuk7uM/2K+vyafu
4z+Ak1rsYiPHP6gaBQTATuu/0LeiJb9O679wdB3ngHPnv8DImdhRudE/+JUD
xsc5yb8QXmITTLnRPzD/sTxaHf2/SKwo6r1O67/IMFbapevdP2DZK7aCc+e/
MGfcpf+0078wrjf7yafjP5DtSXpkyOC/YL+HS1O50T+IC/9v8FDbP3CAtdlN
udE/wC3XL5hc5r9IbD9qDOLev8BtnICP5uS/cIani/dv2r9I20+/5BnSvzBV
DNImi8+/MIXm5/HG07/IpTnIoevdPwCwU/68Tuu/QOarcrAjpj84a4usf3Pn
v1ghSP6l7uM/0OK8YJD18T/gAdHVMzPzP+B+4wAaQsY/UPf7+xbB278Y2+BM
3ofpv9goD0E2rdU/aB7CtA+fsL+Arc1E
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 40}, {6, 7}, {-2, 
                39}, {8, -24}, {12, 13}, {-3, 9}, {10, 
                11}, {-4, -25}, {-5, -26}, {14, 15}, {18, 19}, {
                16, -27}, {-6, -28}, {-7, 17}, {-8, -29}, {20, 21}, {
                37, -30}, {22, 23}, {33, 34}, {24, 25}, {27, 28}, {
                26, -31}, {-9, -32}, {-10, -33}, {-11, 29}, {-12, 
                30}, {-13, -34}, {-14, 31}, {-15, 32}, {-16, -35}, {
                35, -36}, {36, -37}, {-17, -38}, {-18, -39}, {
                38, -40}, {-19, -41}, {-20, -42}, {41, -43}, {42, 43}, {-21, 
                44}, {-22, -44}, {45, -45}, {-23, -46}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,
                 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 
                1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 1, 4, 4, 4, 4, 1, 6, 3, 6, 3, 4, 2, 2, 
                1, 4, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.010044494981569035`, -1.4055035965028804`, 
               0.07084975414040007, 
               0.17389237539856484`, -0.43365925843037223`, 
               0.276935062954065, -1.1116357837862303`, -0.8533617123231467, 
               0.46750759555079346`, -0.8533617025280131, \
-0.06492704751718037, 0.2769347825092803, 0.3386973056894065, 
               0.33869735408081114`, -0.09585282610121126, 
               0.07084934172575907, -1.9258676532906076`, 1.339254037244208, 
               0.17389225860979396`, 
               0.276935234767012, -0.34564114997236883`, -0.5285914585223157, \
-0.20845594119445798`, -0.7320311765443934, -0.44776406568420635`, \
-1.2652234837287342`, 0.17389214535267983`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {14, 15}, {-1, -15}, {-2, 
                6}, {7, -16}, {-3, 8}, {9, 10}, {11, 12}, {-4, 
                13}, {-5, -17}, {-6, -18}, {-7, -19}, {16, -20}, {19, 20}, {
                17, 18}, {-8, -21}, {-9, -22}, {-10, 21}, {27, -23}, {22, 
                23}, {24, 25}, {-11, -24}, {
                26, -25}, {-12, -26}, {-13, -27}, {-14, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2,
                 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 4, 2, 4, 4, 3, 1, 3, 1, 1, 4, 2, 4, 
                2, 2, 4, 1, 4, 4, 6, 1, 3, 1, 3, 5, 5, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6228830390236508, -1.0830280661314227`, 
               0.17389225860979396`, -0.19707649332150323`, \
-0.43365987612974655`, 0.27693480820880456`, 0.5408701745757751, 
               0.5354951630159759, 0.467506908340261, -0.38055509871363524`, 
               0.8858947614933266, 0.07084828291384038, -0.7328488616145208, 
               0.07084877404456846, 
               0.33869675295454327`, -0.7328507017085082, -0.4336591071148046,
                0.007768593795381154, -0.4336586279157202, \
-0.43365856963319294`, -0.8533617598935681, -1.2652234837287342`, \
-0.06492616390165618, 1.6910857049490104`, 0.6142325823565438, 
               0.9867760302902662, 0.9867758623845351, -0.7320311765443934}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {6, -16}, {8, 
                9}, {7, -17}, {-1, -18}, {10, 11}, {12, 
                13}, {-2, -19}, {-3, -20}, {-4, 14}, {16, -21}, {-5, 
                15}, {-6, -22}, {17, 18}, {-7, 19}, {-8, -23}, {-9, 
                20}, {-10, -24}, {-11, 23}, {-12, 28}, {24, 25}, {
                26, -25}, {-13, -26}, {27, -27}, {-14, -28}, {-15, -29}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
                 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 6, 1, 2, 3, 2, 1, 3, 3, 1, 1, 1, 2, 
                1, 4, 1, 3, 4, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.46750790022135824`, -0.4216585768292216, 
               0.0100444971718016, -1.1494113215297954`, -0.7328490891626567, 
               0.20128964156646423`, -0.7328495847291672, \
-1.4700567577118608`, -0.06492704751718037, 
               0.46750690991476196`, -0.7681291690655341, -0.6247463634327959,
                1.6910857049490104`, 0.3386976498819423, -0.2730622044387463, 
               0.27693565243614415`, -0.1402611078755831, 
               0.6142331215565013, -0.07836123285211072, 
               1.5108831729115693`, -0.37572862906067206`, \
-0.13225084146351862`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {18, -14}, {6, 7}, {-1, 
                13}, {-2, 8}, {-3, 9}, {-4, -15}, {-5, 10}, {-6, 11}, {-7, 
                12}, {-8, -16}, {14, -17}, {15, -18}, {16, 
                17}, {-9, -19}, {-10, -20}, {19, 20}, {-11, -21}, {
                21, -22}, {-12, 22}, {-13, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
                 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 6, 3, 2, 6, 1, 1, 4, 4, 3, 3, 6, 3, 4, 
                1, 4, 2, 2, 3, 1, 4, 1, 3, 1, 1, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.986775205687116, -0.8533632735877497, 
               0.46750757075033356`, -0.7328499454524655, -0.8533631319388624,
                0.8495507383067524, -1.1535767628045672`, \
-0.43365925843037223`, -0.4336590372950746, 0.4675076031114611, 
               0.4675071175515937, -0.8533616596623794, 0.4675071568573723, 
               0.070848283935245, -1.3256225255867733`, 0.07084990502601318, 
               0.33869587412716484`, -0.7328492802164588, 0.4675071787217755, 
               1.6910857049490104`, 0.2769357143723603, -1.9289018816919992`, 
               0.467506903950881, -1.2548197497140414`, -1.5434208602281334`, \
-0.4336602799981586}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {6, -15}, {7, 
                8}, {-1, -16}, {-2, 9}, {-3, 11}, {-4, 10}, {-5, -17}, {12, 
                13}, {14, 15}, {-6, -18}, {-7, -19}, {-8, 16}, {-9, -20}, {19,
                 20}, {25, -21}, {21, 22}, {-10, -22}, {
                23, -23}, {-11, -24}, {24, -25}, {-12, -26}, {-13, 
                26}, {-14, -27}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2,
                 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2}], "RootIndex" -> 
              1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 3, 1, 4, 4, 6, 1, 3, 1, 1, 1, 2, 2, 
                4, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.9867752017526996, -0.9759042221453491, 
               0.4675078741512695, -1.5011749472029834`, 0.1738923710070306, 
               0.27693636299135527`, -0.8533626303740167, 0.4947793545097259, 
               0.4675066535657795, 2.352546605277899, 
               1.6910857049490104`, -0.3824194716414673, 0.3386976498819423, 
               0.3386973676533893, 0.07084953198151145, -0.4336604603175318}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {9, 10}, {5, 6}, {-2, 
                7}, {-3, 8}, {-4, -9}, {-5, -10}, {11, 12}, {16, -11}, {
                13, -12}, {-6, -13}, {14, -14}, {
                15, -15}, {-7, -16}, {-8, -17}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
                 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 2, 3, 4, 1, 6, 3, 2, 1, 1, 1, 1, 1, 
                3, 1, 3, 2, 4, 3, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.986775179899686, -1.606546735611115, -0.9759032256349229, 
               0.2012902518504991, -0.4336597746002182, -1.6742188892445604`, \
-0.8533630877058611, 
               0.467506908340261, -0.7328496175070214, -1.0859413490386878`, \
-0.31113863214380233`, -0.30448084672452946`, -0.026772611529284118`, 
               2.352546605277899, 0.4675061528741802, -0.38332709140510923`, 
               0.46750624837485555`, 0.3386974484617653, 0.27693584965463103`,
                0.4675078741512695, -0.3081261907400692, \
-1.2285367794278201`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 14}, {-2, 6}, {-3, 
                8}, {7, -15}, {-4, -16}, {9, -17}, {10, -18}, {-5, 11}, {-6, 
                12}, {-7, 13}, {-8, -19}, {15, -20}, {16, 17}, {-9, 18}, {-10,
                 19}, {-11, -21}, {20, 21}, {-12, 
                22}, {-13, -22}, {-14, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2,
                 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 6, 6, 1, 4, 2, 3, 4, 3, 4, 3, 1, 4, 1, 
                2, 1, 4, 5, 1, 2, 2, 2, 1, 6, 5, 1, 6}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.6142328462657192, -0.8533615811161654, 
               0.0100444971718016, -0.5009729631638615, 
               0.17389225860979396`, -0.7328495950002685, 0.4675060146696923, 
               0.07084879412342293, 0.4675077336809914, 0.276934710661235, 
               0.6142320582849949, 
               0.26245753554787754`, -0.43366025355839755`, 
               1.3051130525180437`, 0.338697403486822, 0.9837421660213064, 
               0.27693514228767135`, 0.8048288538220243, -1.9950402279585742`,
                0.3386976454587445, 0.3386973676533893, 
               0.3386962165636529, -0.2043780411692251, 0.010045585985197752`,
                0.986775587246461, -1.218510705619133, 0.010045229335744185`},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -17}, {-2, 6}, {18, 
                19}, {7, 8}, {-3, 9}, {-4, 15}, {-5, 10}, {11, 12}, {13, 
                14}, {-6, -18}, {-7, -19}, {-8, -20}, {16, -21}, {-9, 
                17}, {-10, -22}, {-11, 20}, {-12, 24}, {21, -23}, {
                22, -24}, {-13, 23}, {-14, -25}, {25, 26}, {
                27, -26}, {-15, -27}, {-16, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2,
                 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 1, 6, 2, 1, 4, 5, 4, 2, 2, 3, 3, 1, 6, 
                2, 2, 2, 3, 4, 3, 3, 1, 1, 3, 4, 3, 1, 3, 5, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.07084856597955591, 
               0.5020966846260402, -0.8533615864194539, -0.9759037406186106, 
               0.8879288442722402, -0.43366030640300535`, 
               0.804829278675566, -0.43365969888176803`, 0.33869664291263346`,
                0.33869650662819906`, 0.6142329066517718, 0.6142318854425799, 
               1.112877686393766, -0.42165854763433197`, -0.9759042316782782, \
-0.9759036743029741, -0.9759035712798303, 
               0.6142325797007633, -0.43365962340231246`, 
               0.46750653612682713`, 
               0.4675059683149252, -1.777664665376161, -1.3700906805485946`, 
               0.2012902518504991, 
               0.2769357173802236, -0.06492725612925421, \
-1.6429489379778577`, -0.06492756817706224, 0.9867756339599119, 
               0.0708498477263686, -1.9625841237354429`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {-1, 6}, {12, 
                13}, {-2, 7}, {8, -18}, {-3, 9}, {10, -19}, {
                11, -20}, {-4, -21}, {-5, -22}, {-6, 14}, {15, -23}, {-7, 
                16}, {-8, 17}, {-9, 18}, {19, -24}, {-10, -25}, {22, 23}, {28,
                 29}, {24, 25}, {27, -26}, {-11, -27}, {
                26, -28}, {-12, -29}, {-13, -30}, {-14, 30}, {-15, 
                31}, {-16, -31}, {-17, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1,
                 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 1, 1, 2, 6, 3, 4, 2, 3, 5, 6, 2, 3, 
                4, 1, 4, 3, 1, 3, 4, 2, 1, 3, 2, 2, 3, 2, 4, 4, 1, 2, 4, 3, 2,
                 3, 4, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA+IFqXb5M63e79ewWNu+4t1je4Zf3uue8n7fX6DJveN4
4Qr7Ao3l5Q3Fz/cv6PugVPLn1v4PEiu/zHt9195A5/01v50X7TvcVus0AuV/
rNJ9Mx8o/mCv5MNlQHNmRG3ctt/v9f4Fs/Keg/R/+LcrgWn+hv0Fgtu2+gP1
zZBx7jVlv7//ARvLHh8gX2D7tqsLgPo1VsycmNr4fD+D3zZJfqD6FV7qNrLK
m+wTlrx7WQ80R8N8YYvu1uf7VzC2si0B2cf/+ZTJ2qv2AhGzNJuA8gWHm1ct
Aplz6cFskLs+RGnuAblTYeG2fJA9Bh4BfLvvX90f4MYcCZK/cIClPwjkHv59
C5cC9TkUtn4EuTdiddppkHsW1PdUmQLtf6EbXQTiAwCWfahJ
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -22}, {5, 6}, {-1, -23}, {7, 
                8}, {13, 14}, {-2, 9}, {-3, -24}, {10, -25}, {-4, 11}, {-5, 
                12}, {-6, -26}, {15, 16}, {-7, 26}, {17, -27}, {20, 21}, {18, 
                19}, {-8, -28}, {-9, -29}, {-10, 22}, {-11, 24}, {
                23, -30}, {-12, -31}, {25, -32}, {-13, -33}, {27, 28}, {-14, 
                29}, {-15, 31}, {30, -34}, {-16, -35}, {32, 33}, {-17, 34}, {
                37, -36}, {35, -37}, {-18, 36}, {-19, -38}, {-20, 
                38}, {-21, -39}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
                 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 
                1, 1, 2, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 3, 5, 3, 2, 4, 2, 4, 2, 2, 1, 4, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.9867752040476727, -1.0655378597224878`, 0.5408698550199924, 
               0.6228829867174159, 0.4675076723471454, -0.7328507252952363, 
               0.2769352014736115, -0.9759045152506136, 
               0.07084993713861765, -0.7328497602110344, 
               0.3386973917838354, -0.802804155467066, 
               0.17389225860979396`, -0.9059545758697984}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, -8}, {6, -9}, {7, 
                8}, {-1, -10}, {9, -11}, {-2, -12}, {-3, 10}, {-4, 11}, {
                12, -13}, {-5, -14}, {-6, 14}, {-7, -15}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1,
                 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 3, 4, 4, 6, 1, 4, 6, 1, 6, 3, 2, 
                1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.9867751866936878, -1.4060242769639348`, 0.5408698493759978, 
               0.17389243336126015`, -0.4336593645622373, -0.8533625171852899,
                1.7257480265398204`, 
               0.27693636299135527`, -0.8533623783985842, 
               0.5027904934313678, -0.42165821790463154`, 
               0.467506908340261, -0.19707655698674942`, \
-0.38338379980928217`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {13, -9}, {-1, 6}, {7, 
                8}, {-2, -10}, {9, -11}, {12, -12}, {-3, 10}, {-4, 
                11}, {-5, -13}, {-6, -14}, {-7, 14}, {-8, -15}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2,
                 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 4, 1, 2, 2, 1, 6, 3, 3, 2, 2, 1, 4, 
                1, 3, 1, 2, 4, 2, 3, 2, 1, 4, 1, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.986775179899686, -0.9759042316782782, 
               0.17389225860979396`, -1.81824657045399, \
-0.19707649332150323`, -0.7328496869900949, -1.88675548046435, \
-0.8533631519872173, 0.6142333546741527, 
               0.46750784838914594`, -0.7328497066564292, \
-0.7328501573323658, -0.6884975312303752, -0.4336602611111622, \
-0.6203790916475631, 0.46750597349233525`, 
               0.1899925375929601, -0.732850407276433, -0.4336590557443669, \
-0.7328504427084885, 
               0.46750765899221136`, -0.9759031138392373, \
-0.24272800679925854`, -0.07836246368361677, 1.1000961173062258`, 
               1.5523934734396398`, 0.07084865017542119}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {27, -15}, {5, 6}, {
                7, -16}, {9, 10}, {8, -17}, {-2, -18}, {11, -19}, {-3, -20}, {
                12, -21}, {13, -22}, {-4, 14}, {-5, 15}, {-6, 16}, {-7, 17}, {
                18, 19}, {20, -23}, {25, -24}, {21, -25}, {-8, 22}, {-9, 
                23}, {-10, 24}, {-11, -26}, {-12, 
                26}, {-13, -27}, {-14, -28}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1,
                 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 3, 1, 3, 2, 1, 1, 3, 4, 4, 1, 1, 1, 
                1, 1, 6, 1, 1, 5, 2, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8533615811161654, \
-0.732849629649448, 0.46750790621094884`, 1.40759647990763, 
               0.46750784838914594`, 0.3386966987166735, -1.8196661349210892`,
                0.98007626456097, -0.06492689955433528, 0.27693514228767135`, 
               0.17389225860979396`, 2.3205863728167504`, 
               0.5353923991796581, -0.34564114997236883`, \
-0.27458778342503365`, -0.2043780411692251, 
               0.010045702450304908`, -1.2652234837287342`, \
-1.9625841237354429`, 
               0.986776949568549, -0.9759031182065794, -0.4336599227890532}, 
              "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, -11}, {
                6, -12}, {7, -13}, {-2, 8}, {9, 10}, {-3, -14}, {-4, -15}, {
                13, 14}, {21, -16}, {15, -17}, {17, -18}, {-5, 
                16}, {-6, -19}, {18, -20}, {19, 
                20}, {-7, -21}, {-8, -22}, {-9, 22}, {-10, -23}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2,
                 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 3, 4, 4, 1, 4, 4, 2, 1, 2, 4, 1, 1, 4, 
                2, 4, 2, 4, 1, 4, 1, 4, 1, 1, 1, 1, 1, 2, 5, 2, 2, 3, 6, 5}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.8533615811161654, 
               0.6142331703271982, 
               0.17389225860979396`, -0.43365987612974655`, 
               1.9382626013038387`, 0.27693569579190314`, 
               0.27693522322883624`, 
               0.338697328720698, -1.7493351674775237`, -0.7328495863253588, 
               0.2769352014736115, 
               0.0034644322092326797`, -0.03342573938030602, \
-0.4336593641434612, -0.7328497668550726, 0.2769348244952785, 
               0.3386960573620419, 
               0.27693479233363805`, -0.34237683899516913`, 
               0.2769347619243061, -0.4848150138390763, 
               0.0708489004152324, -0.7681291690655341, -0.838563582601072, 
               1.3796349095829843`, 0.8830263206973292, 
               0.9195200674061841, -0.9759032188340324, 
               0.9867756339599119, -0.9759030790187895, 
               0.3386973676533893, -0.06492620164507612, 
               0.010045892284229613`, 0.6228817576062742}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {28, 29}, {-1, 
                6}, {-2, -14}, {7, -15}, {8, -16}, {9, -17}, {10, 
                11}, {-3, -18}, {12, -19}, {13, 14}, {15, -20}, {25, 26}, {16,
                 17}, {18, -21}, {21, -22}, {19, -23}, {20, -24}, {-4, -25}, {
                22, -26}, {-5, 23}, {24, -27}, {-6, -28}, {-7, -29}, {-8, 
                27}, {-9, -30}, {-10, 30}, {33, -31}, {-11, 31}, {
                32, -32}, {-12, -33}, {34, -34}, {-13, -35}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2,
                 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 
                2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 2, 2, 1, 3, 1, 3, 2, 1, 1, 2, 1, 3, 
                1, 4, 2, 4, 3, 1, 1, 1, 2, 1, 3, 1, 2, 5, 2, 1, 5, 2, 2, 4, 6,
                 1, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA2INi7XtK949trfgPFjUWPx8v8HUBqZmIP1jo0sdiP/C
8ah67v/v+xcw3PGa//qu/QfJRJ0zqe/3Cxx0YlsK5DscetQ02+r9/gXHt6hx
Sfzd3zBl0S6Pd//sOwSX/wDpb5DafuS48rX9K9J2yi4Aqjd4s+j9irJz+yPY
Dn8XO3h7v0fhWutZQP0RS9U2B+y8aO8hnvB9IVCdQvVMf5bVp+0fpD65/Hr/
b3sNlWsTTh0/ZG+xROHOTKD6F1MXbj+47bs9R0lYwb3DJ+0nVKw+tdDg3/4F
hRMDQPIKUzkOr5n83n6GkbIgiC/w8/p/Oc+39j/mibSAxD1mVO4Hue/Esb7J
hmuv2ies81vuC7S/gnWe7ttJLfYZPR+K7SP/77/gbeaskvJpf0H9KY4GoHoA
TlqqBA==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {27, 28}, {6, -20}, {
                25, -21}, {-1, 7}, {8, 9}, {10, -22}, {11, 
                12}, {-2, -23}, {-3, -24}, {13, -25}, {14, 
                15}, {-4, -26}, {-5, 16}, {-6, 17}, {-7, 18}, {19, -27}, {20, 
                21}, {22, -28}, {23, -29}, {-8, -30}, {-9, 
                24}, {-10, -31}, {-11, 26}, {-12, -32}, {-13, 29}, {31, 
                32}, {-14, 30}, {-15, -33}, {33, -34}, {37, 38}, {34, -35}, {
                35, 36}, {-16, -36}, {-17, -37}, {-18, -38}, {-19, -39}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
                 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
                1, 1, 2, 2, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 6, 4, 1, 4, 4, 3, 2, 1, 4, 2, 1, 1, 1, 
                1, 2, 3, 3, 1, 1, 3, 2, 4, 4, 1, 3, 4, 2, 3, 1, 1, 1, 1, 2, 4,
                 1, 1, 3, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBZQGa/iFib1JlAQAAACsAAACwjsWKqZPvP9DO5Nu9Tuu/kNng/RlCxj/A
T5UyQvT2vwjspeY5I7I/oHHrFk650T9AVbgjzafjP+jWnU6Bc+e/eFkBQziD
978YqGGgTLnRP2hzlwaDc+e/KISVBHhB/78QiYo11G37v0irIvn6KPg/8M0k
9R6twj+gmm7ngHPnv3Bm1H6e690/GDovGqLr3T+QLNyJ/urVv1Bz+Z6Sd8k/
+OLmVKXr3T/wqEA0mzrvv4BmCJFNudE/iOcnlxHB278YAK6qfJbxP6hgm5PK
p+M/+KmXr0650T9YDQePgnPnvwDXCncVn7C/gGg6IaQ3xb9gkZlxw//ev4BN
jMm3muG/4JYz27TF6L+QEok+g3PnvwiSo0AqI7I/+CDDIy9l5r+YmKqOQDf9
vygezA3Np+M/gPZK+yvZ6b/wt2CtS6n5vyhMrENGhum/QG/71vqF8L9oXOcU
BX/zv+zcwY8=
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {35, 36}, {6, 7}, {-1, 
                34}, {8, 9}, {14, 15}, {10, -20}, {12, -21}, {
                11, -22}, {-2, -23}, {-3, 13}, {-4, -24}, {
                16, -25}, {-5, -26}, {17, 18}, {19, 20}, {29, 
                30}, {-6, -27}, {21, 22}, {-7, 23}, {25, 26}, {
                24, -28}, {-8, -29}, {-9, -30}, {27, -31}, {
                28, -32}, {-10, -33}, {-11, 31}, {33, -34}, {
                32, -35}, {-12, -36}, {-13, -37}, {-14, -38}, {37, -39}, {
                39, -40}, {-15, 38}, {-16, -41}, {40, 41}, {-17, 
                42}, {-18, -42}, {43, -43}, {-19, -44}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1,
                 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 
                2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 1, 3, 2, 4, 3, 1, 3, 1, 2, 2, 1, 
                2, 1, 3, 4, 1, 2, 4, 1, 2, 4, 5, 1, 5, 4, 6, 4, 3, 4, 1, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.62288309573501, 0.467507663455494, 
               0.17389225860979396`, -1.777664665376161, 
               0.46750770106877404`, -0.1970762018256933, 0.070848283935245, 
               0.46750691606840356`, -0.049199010816161404`, \
-0.06492697961232685, 
               0.1899925375929601, -0.7328504702393168, -0.7328495896790761, 
               0.008633888438776827, -0.9759042849109569, 1.1000961173062258`,
                0.6142321323993487, -0.43366030792422317`, 
               0.1437892577939237, -0.9759038937056559, 0.2769347680671781, 
               0.10685464264667954`, -0.9759031719481754, \
-0.43365932528972717`, 0.9867760606256164, -1.963390695158914, 
               0.9867759753359131, -0.4336602435142831, 
               0.010045837194723795`, -0.18140488731113735`, \
-0.06492650696669411, 0.0708496934219478, -0.1367296882067066, 
               0.07084942732241672}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {25, 26}, {6, 7}, {-1, 
                15}, {-2, -20}, {-3, 8}, {9, -21}, {-4, 10}, {-5, 11}, {12, 
                13}, {-6, 14}, {-7, -22}, {-8, -23}, {-9, 16}, {17, 18}, {
                19, -24}, {-10, 23}, {20, -25}, {-11, 21}, {
                22, -26}, {-12, -27}, {-13, 24}, {-14, -28}, {27, 
                28}, {-15, -29}, {29, 30}, {-16, -30}, {31, 
                32}, {-17, -31}, {-18, -32}, {33, -33}, {
                34, -34}, {-19, -35}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1,
                 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 
                1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 2, 6, 3, 1, 3, 3, 2, 3, 3, 2, 4, 4, 1, 
                4, 5, 4, 2, 1, 6, 5, 2, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.853361593183509, \
-0.975903443302232, 0.010044567654957662`, 
               0.46750653612682713`, -0.5966275826963665, 0.4675066841926787, 
               0.4675065531306344, -0.7328502247434381, 0.4675073971977697, 
               0.4675065857583891, -0.732848985930687, 
               0.27693631033018873`, -0.43365958044737285`, \
-0.30901763578920605`, 0.2769348295373999, 0.9867758765415493, 
               0.1738922612288012, 0.3386967368207321, 0.2470591303727654, 
               0.010044518942367242`, 
               0.6228817576062742, -0.31860359783446235`, \
-0.34564114997236883`, -0.3067627133851767, -0.2043780411692251}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {16, 17}, {-2, 5}, {6, 
                7}, {-3, 8}, {-4, 10}, {9, -16}, {-5, -17}, {-6, 11}, {
                12, -18}, {13, -19}, {-7, 14}, {-8, 15}, {-9, -20}, {18, 
                19}, {22, 23}, {20, -21}, {-10, -22}, {
                21, -23}, {-11, -24}, {-12, 24}, {-13, -25}, {-14, 
                25}, {-15, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
                 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 3, 6, 3, 1, 2, 3, 2, 3, 6, 1, 6, 3, 
                3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.62288309573501, 
               0.46750787029152185`, 0.4675066535657795, 
               0.010044496948824352`, -0.06492621393340559, \
-0.35158058360858035`, -0.7328503621929157, -0.06492620164507612, \
-0.7328497600669337, 0.4675061528741802, 0.010045084832430773`, 
               0.03774329084542216, 0.0100445645256632, 0.6142325881315935, 
               0.6142325770620634}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {-2, 14}, {-3, 
                7}, {11, 12}, {-4, 8}, {-5, 9}, {-6, 10}, {-7, -11}, {
                13, -12}, {-8, -13}, {-9, -14}, {15, -15}, {-10, -16}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1,
                 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 2, 6, 5, 3, 4, 6, 4, 4, 4}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.9759037406186106, \
-0.20624407350715357`, 0.3386959415636377, -0.8533619209764023, 
               0.9867752352094845, 0.46750675135493047`, 
               0.07084859672366628, -0.8533632437065437, 
               0.27693580766351156`, -0.4336602435142831, 
               0.27693447366868407`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {5, -6}, {-2, -7}, {6, 
                7}, {8, -8}, {10, 11}, {
                9, -9}, {-3, -10}, {-4, -11}, {-5, -12}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 
                2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 6, 5, 2, 3, 1, 5, 4, 5, 1, 6, 4, 3, 
                1, 3, 2, 2, 2, 4, 2, 1, 4, 1, 5, 2, 2, 1, 1, 3, 1, 3, 2, 1, 2,
                 4, 4, 1, 2, 4, 3, 1, 2, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAWKHQ4+aZlu93x9wZEX68neP7W/4yi+0m9RiLyBgJ7MC
yF8wK+95Q/Hz/Qmmt9geHD5pX2F3Lexjzbf9AcIB9iD5iPlP3f12XrR3uHxg
Kki/R/KzS3M+37C32PBQr+TPrf0G1uw/g4DyC6rn3D+5/LH9jPvTsy9H7bb/
cVCMc+nru/YL1AOvNAHNN9DRUQXRDQ12N2cB3dPg+vSCD1DfhaMPT84E8j0c
L7Au0zpu3xBV2hAAFDeQbGBTLP+zn+PpxgCQOxhqp6SC3Llg7e+ieiB9obFg
8zT1L/sdGP13Tt193D4jQtVObP6G/RYbNlzaOufefga/bZL8QP6EIL0o07VX
7RMuhz9az/fbfkO8hC7IPoftIpNB9ggs/WgIoh20I3YsVru/vyPn9juQ+R+0
T7eKHLy93+Pa+cglQH9s8J5Rabjjir3AcT+fRpB/tk2u++R2Yz8Ae9W/4A==

               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {5, 6}, {-2, -25}, {7, 
                8}, {34, 35}, {9, 10}, {24, 25}, {-3, -26}, {11, 12}, {13, 
                14}, {23, -27}, {15, -28}, {-4, -29}, {16, 17}, {-5, 18}, {-6,
                 22}, {19, -30}, {-7, 20}, {
                21, -31}, {-8, -32}, {-9, -33}, {-10, -34}, {26, 27}, {-11, 
                33}, {-12, -35}, {-13, 28}, {-14, 29}, {30, -36}, {-15, 31}, {
                32, -37}, {-16, -38}, {-17, -39}, {-18, -40}, {-19, 36}, {37, 
                38}, {39, -41}, {-20, 44}, {40, -42}, {-21, 41}, {42, 
                43}, {-22, -43}, {-23, -44}, {-24, -45}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
                 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 
                1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 4, 4, 1, 2, 1, 4, 4, 1, 2, 4, 3, 2, 
                2, 1, 4, 5, 1, 3, 2, 2, 3, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6228830843932878, 
               0.6142330139110204, 0.2769346687088521, -0.4336593897247929, 
               1.1000961173062258`, -0.7328499548560945, 1.3727715103056095`, 
               0.2769347619243061, 
               0.2769362595836573, -1.8196661349210892`, \
-0.19707643427206079`, 0.07084828291384038, 0.4675066731307549, 
               0.3386974225040289, 
               0.33869601962439333`, -0.035998589009425985`, 
               0.0708484432248766, 0.9867763632065465, 0.640594913007285, 
               0.46750745075428357`, 0.33869700154734383`, 
               0.33869587412716484`, 
               0.20129036561054892`, -1.6084420752163684`, \
-1.8264375835266815`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -10}, {18, 19}, {5, 6}, {-1, 
                7}, {8, 9}, {-2, -11}, {-3, -12}, {10, -13}, {11, 
                12}, {-4, -14}, {-5, 13}, {14, -15}, {15, 16}, {
                17, -16}, {-6, -17}, {-7, -18}, {20, -19}, {24, -20}, {
                21, -21}, {22, -22}, {23, -23}, {-8, -24}, {
                25, -25}, {-9, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
                 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 3, 1, 4, 3, 1, 4, 3, 6, 4, 3, 1, 4, 
                4, 4, 1, 1, 3, 5, 1, 2, 1, 5, 6, 1, 5, 5, 3, 4, 2, 3, 1, 1, 1,
                 2, 4, 4, 3, 1, 3, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAuIDdev220xqsX9h9/2h2MHb+wNiNXSXvb5rX2F3Lexj
zbf9DDXqpdJOx+w90nUlFgHFOfSkbKJav+832C3+SUZ5k/0DtxYvkPiJtVYR
JX9u7X/x3+Gcz86L9h3CTmd55m/Yr3BfJuuA4xv7C1MvTlEFqvfY+/plEFB+
RfYyE2GgfQKN0o8vRO7cf+DxskxmjUD7BzYT1y0F2W9k+2Ppu8f2GR5rjzjW
rNjf8e6ke0Px8/0MWY8CjlXc2l8hN6MZLN+b0bvf7/X+Gy6XDq47eG+/Q9Wu
BSDxB5yeWsuB9AtGhj1nlj+2TygJP+8HtDdA2+z6TKv3+xfsmcoD8meBp8GK
OU2f7F+4PF9xUOOtfcXBi/HOX87bV4Q5nQLZd6Lyt1cAUJ/Ag3vTQO7X2D7F
ih/or4Yd67hV4xbslzgaW8UE5H8QmqalDpQHANvVtCM=
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {36, -23}, {5, 6}, {-2, 
                7}, {8, 9}, {-3, -24}, {-4, 10}, {-5, 15}, {11, 12}, {
                13, -25}, {-6, -26}, {-7, 14}, {-8, -27}, {16, -28}, {17, 
                18}, {-9, -29}, {19, 20}, {21, 22}, {33, -30}, {23, -31}, {
                29, -32}, {24, -33}, {-10, 25}, {-11, 26}, {27, -34}, {-12, 
                28}, {-13, -35}, {30, -36}, {31, -37}, {-14, 
                32}, {-15, -38}, {34, -39}, {35, -40}, {-16, -41}, {-17, 
                37}, {38, -42}, {-18, 39}, {-19, 40}, {-20, 41}, {-21, 
                42}, {-22, -43}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2,
                 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 
                1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 1, 2, 3, 3, 1, 4, 1, 2, 3, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.9759029880622148, 
               0.9867751866936878, -1.4346334434421664`, -0.1970767253518717, 
               0.46750784838914594`, 
               0.4675068917807308, -0.20901004628106135`, 0.070848283935245, 
               1.0519060593790375`, -0.7328503447299122, -0.06492697720108065,
                0.27693545250623375`, 0.9523834130010309}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, -9}, {4, 5}, {-2, -10}, {6, 
                7}, {8, 9}, {-3, -11}, {-4, 10}, {13, -12}, {-5, 11}, {-6, 
                12}, {-7, -13}, {-8, -14}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1,
                 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 6, 5, 1, 1, 1, 1, 2, 4, 1, 2, 1, 1, 
                4, 3, 4, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.97590424708602, 
               0.499305094991521, -0.4216585768292216, 0.6228828730551328, 
               1.3386586058884937`, 1.2056877502592762`, 
               0.9888106139615003, -1.0830280661314227`, -0.7328505562660776, 
               0.1738924523355363, 0.1899925375929601, -0.9759034442296359, 
               0.8793604192369937, 0.8864523154905193, 0.2769351933075237, 
               0.46750681251770576`, 0.17389225860979396`, 
               1.2000626739751397`, -0.8543769438054394}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {8, 9}, {5, -13}, {
                6, -14}, {7, -15}, {-2, -16}, {10, 11}, {16, 
                17}, {-3, -17}, {-4, 12}, {-5, 13}, {-6, 14}, {-7, 
                15}, {-8, -18}, {-9, 18}, {-10, -19}, {-11, 19}, {-12, -20}}],
               "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2,
                 2, 1, 2, 1, 1, 1, 1, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 1, 2, 1, 6, 5, 1, 4, 5, 1, 6, 1, 3, 5, 
                2, 1, 2, 5, 1, 3, 1, 6, 6, 1, 6, 1, 6, 6, 3, 3, 1, 3, 4, 3, 1,
                 1, 6, 6, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOIL8bdOzLR6vz/D1um9w7r79hfOzdtuuPaqvYSbDNfc
5vv7b9xrKi75c2v/g+amLxoHX9r/+Hroj+eqW/sNrNl/Bu28aH8jhMtgxbvH
9g0r15Yc339u/4E0hhP7/F7vXyClVaa65OL+BdVz7p9c/tj+BIPu4pWT39tP
ML6g31j8fL/E7Qc+99pf7uc4sMkGxI9wCjy7DGhOwuucDxPeXt1vcWynzvzX
d+05hN/7C9d/2+/xTNNtP9DcF4FdTCDaw9/79Tu1a/sneC5NBdk3oTtzkcWr
B/sdItmVrSa12Hskz/YMBtIPnvUnLQCac2CBTyyIVtDiNzrF+ch+hs2MNSD+
DPGaAj+gPzZ47jRZBORLzMw909t/yL5hx9t1It5z93+4GOkHss8hsHmLLdC8
DTeO85cy/bYv0E6endj2zj5DrU3wwqsP9gBVN7Vh
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {8, 9}, {-1, 
                6}, {-2, -21}, {7, -22}, {-3, -23}, {10, 11}, {-4, 38}, {12, 
                13}, {-5, -24}, {14, -25}, {27, 28}, {15, 16}, {17, -26}, {-6,
                 26}, {18, -27}, {19, 20}, {21, -28}, {-7, 
                22}, {-8, -29}, {-9, 23}, {-10, 24}, {
                25, -30}, {-11, -31}, {-12, -32}, {29, 30}, {37, -33}, {31, 
                32}, {-13, -34}, {-14, -35}, {-15, 33}, {34, -36}, {
                35, -37}, {36, -38}, {-16, -39}, {-17, -40}, {-18, 39}, {
                40, -41}, {-19, 41}, {-20, -42}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1,
                 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 
                2, 2, 1, 1, 1, 1, 2, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 2, 1, 2, 1, 1, 4, 4, 1, 1, 1, 3, 1, 
                2, 1, 2, 4, 1, 1, 4, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.8048291468621684, -0.9759037406186106, -0.7328505590149685, 
               0.5027904934313678, 0.33869651774233, 0.19887817473019576`, 
               1.3761044966627551`, 
               0.27693479882155536`, -0.4336595953096918, \
-1.5055136396380604`, -1.8301166551554946`, -0.3113780603318008, \
-0.06492689955433528, -0.3140545398845811, -0.7328491463530371, \
-0.838563582601072, -0.7328508067489592, 0.0708490760621957, 
               0.4302460427562953, -0.10547192397822958`, 0.07084917005498381,
                0.005230582134583023}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {6, 7}, {
                8, -14}, {-1, -15}, {-2, -16}, {9, 10}, {-3, 
                11}, {-4, -17}, {-5, 12}, {13, -18}, {-6, 14}, {15, -19}, {-7,
                 16}, {-8, -20}, {-9, 19}, {20, 21}, {-10, -21}, {-11, 
                22}, {-12, -22}, {-13, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1,
                 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 5, 1, 6, 4, 2, 2, 2, 3, 2, 4, 4, 1, 2, 
                3, 3, 3, 2, 3, 5, 1, 3, 1, 1, 2, 1, 3, 1, 4, 2, 1, 6}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6142319429716538, 
               0.9867752187796093, 0.5020966846260402, -0.8533620161819844, 
               0.2769346848827272, -0.7328495847291672, -0.7328506680865576, \
-0.7328501707023465, 0.46750784838914594`, -0.7328503233418466, 
               0.27693632440004246`, -0.4336600038366716, \
-1.0475597144040378`, 0.33869654994070864`, 0.46750716081127974`, 
               0.4675071192988245, -0.06492613245124268, \
-0.19707643839793398`, 0.5408697405508942, 
               0.6228830365481643, -0.06661690706174661, \
-0.06492705931161968, -0.761932853538406, -0.09585282610121126, 
               0.3386976454587445, -0.029355449690584484`, 
               0.20129048297736207`, -0.5268306959492239, \
-0.07836223319941538, 0.3386963504410945, 
               0.21780491828118742`, -0.4216583476026736}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 32}, {6, 7}, {22, 
                23}, {8, 9}, {19, 20}, {10, -15}, {14, -16}, {11, -17}, {
                12, -18}, {-2, 13}, {-3, -19}, {15, -20}, {16, -21}, {
                17, -22}, {-4, 18}, {-5, -23}, {
                21, -24}, {-6, -25}, {-7, -26}, {-8, 24}, {-9, -27}, {25, 
                26}, {27, -28}, {-10, 30}, {-11, 28}, {29, -29}, {-12, -30}, {
                31, -31}, {-13, -32}, {-14, -33}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2,
                 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 
                2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 6, 1, 1, 6, 1, 1, 1, 3, 4, 3, 1, 3, 3, 
                1, 3, 3, 1, 1, 1, 1, 4, 1, 2, 6, 1, 1, 2, 1, 1, 6, 6, 6, 1, 1,
                 5, 6, 5, 1, 3, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBXQGi/iFib1JlAQAAACoAAAD41DCAOyOyPwBtAhG9Tuu/IMGyDf3u/7+o
OMIVi6zwv4Dk+IUvkoQ/AN8N6o2cob+wykQ5GOnBv2iZ9EQVd7w/YFNHS8un
4z9g/j4EICOyP5gOVpkDn7C/mN+Xa9Nauz9o41qky6fjP4igPVbMp+M/cCkL
uMdxqD+Azg0aFJ+wv1BQhS7Kp+M/SOCWpV2T3T8ItGGoSSvhPxiMnjnhNOs/
SBK9sxiF3r9g0S/LF8HbvwDWiqW1Jcu/sAniLoBz579ggcmhYpKEP7jwj4yU
Rf+/CASlBLSDwL+gmm7ngHPnvyh07UHIa+e/+HHa2Nte8T94t8vuwE7rv8jh
pOjATuu/OIjr371O67+YmMHKMtXhv4jOq4AmJrQ/4MIOtaTu4z+AlRYedPza
v6hCF++m7uM/cAtL4qEvpj+QWcIgoevdP5B7R+Xc1dG/UIFvR2cm/b/jlbjq

               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {24, 25}, {-1, 6}, {21, 
                22}, {7, 8}, {9, -22}, {12, 13}, {10, -23}, {
                11, -24}, {-2, -25}, {14, -26}, {17, -27}, {15, -28}, {
                16, -29}, {-3, -30}, {-4, 18}, {-5, 19}, {-6, 
                20}, {-7, -31}, {-8, -32}, {-9, 23}, {-10, -33}, {-11, -34}, {
                26, 27}, {-12, 28}, {42, -35}, {29, 30}, {-13, 31}, {
                38, -36}, {-14, 32}, {-15, 33}, {34, 35}, {-16, -37}, {36, 
                37}, {-17, -38}, {-18, -39}, {39, -40}, {40, -41}, {-19, 
                41}, {-20, -42}, {-21, -43}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2,
                 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
                2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 3, 3, 3, 5, 2, 3, 2, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6228830986978648, 
               0.5408698498447784, 0.4675059683149252, -0.06492712296450631, 
               0.9867756286479414, 0.3386973676533893, -0.06492704670753624, 
               0.33869587412716484`, 0.07084859672366628, 
               1.6880999199325224`}, "Children" -> 
              RawArray["Integer16",{{-1, 2}, {3, -7}, {4, 5}, {-2, 
                6}, {-3, -8}, {7, -9}, {-4, 8}, {9, 
                10}, {-5, -10}, {-6, -11}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{3, 2, 6, 1, 2, 4, 1, 6, 2, 1, 3, 3, 1, 1, 
                2, 2, 1, 3, 4, 3, 1, 1, 5, 4, 1, 2, 1, 4, 4, 4, 1, 4, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.6142321486252005, 
               0.3386959415636377, 0.010044523126883462`, 
               0.1844540067925351, -0.7328501633523876, -0.43366023367622564`,
                0.9888239628898381, -0.8533625893527503, -0.7328495783696871, 
               0.07870712891945619, 0.46750767985535857`, 
               0.46750784838914594`, -0.689615367832233, -1.087517007345097, \
-0.732849232023546, -0.7328491873052574, -0.06580669263948458, 
               0.4675071069982697, 0.2769354137460134, 
               0.4675071413921339, -0.4794565778060722, -0.2752712206865464, 
               0.6228827512111819, 
               0.2769357277389686, -0.30901763578920605`, \
-0.7328506306314635, -0.2704861346667293, 0.2769350283130043, 
               0.27693600645999394`, 0.2769351894661427, 
               0.6361113049878648, -0.4336595272876438, 1.377360989137232}, 
              "Children" -> 
              RawArray["Integer16",{{2, -18}, {3, -19}, {4, 5}, {6, 
                7}, {-1, -20}, {-2, 8}, {29, 30}, {9, 10}, {11, 12}, {
                18, -21}, {-3, 13}, {15, -22}, {14, -23}, {-4, -24}, {-5, 
                16}, {-6, 17}, {-7, -25}, {19, 20}, {-8, 21}, {-9, 23}, {-10, 
                22}, {-11, -26}, {24, -27}, {25, -28}, {-12, 26}, {
                27, -29}, {-13, 28}, {-14, -30}, {-15, 31}, {
                32, -31}, {-16, -32}, {33, -33}, {-17, -34}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
                 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 
                1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 4, 1, 3, 1, 4, 3, 1, 1, 1, 4, 2, 1, 
                1, 1, 4, 3, 2, 3, 1, 3, 3, 3, 1, 2, 1, 4, 4, 2, 1, 2, 1, 1, 3,
                 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBPQHC/iFib1JlAQAAACYAAABYbkSJqO7jP3g+1lbxfPa/IET09hlCxj9Y
/+Ah9TAAwHAL10yl690/6C44wALO/r/AyJnYUbnRPyDXaVXew8k/CC4aPFqF
979oe0Cencf5vxCgSh2QVfq/CMd69hwjsj8wLCwlgnPnv/DmQcz0fee/YOal
38wY478opOcV7P3jv1i339JMudE/uP7mjqHr3T/o3H4nNa3VP6BvN54Mn7C/
wOjdhNYE6j8YOi8aouvdP0BVuCPNp+M/4M0kZ6Xr3T+Qvm1bnfTfP/gUlkyb
Ou+/IP/uK7ms6r+g1MiiFcHbv2Ca56NMudE/0MXhyZk6778gDfQTnH/+P0g0
wao3rdU/OOu0mVrQ/r9YEc8rU5Xgv4htXkwPn7C/UN/110Hy17+QgcJuIzHY
v7hzpVZ3z9G/S52uHQ==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {31, -20}, {-1, 6}, {12, 
                13}, {7, 8}, {-2, -21}, {-3, 9}, {10, -22}, {
                11, -23}, {-4, -24}, {-5, 14}, {23, -25}, {-6, 15}, {16, 
                17}, {18, -26}, {19, -27}, {-7, -28}, {20, -29}, {21, 
                22}, {-8, -30}, {-9, -31}, {24, -32}, {-10, 25}, {
                26, -33}, {-11, 27}, {-12, 28}, {-13, 29}, {
                30, -34}, {-14, -35}, {32, -36}, {33, 34}, {-15, 35}, {-16, 
                37}, {36, -37}, {-17, -38}, {-18, 38}, {-19, -39}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2,
                 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 
                1, 1, 1, 2, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 5, 5, 1, 5, 2, 1, 1, 4, 1, 1, 2, 2, 3, 
                1, 5, 6, 1, 4, 3, 1, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {0.07084848598665705, 
               0.6228829607483037, 0.9867753286989256, 1.097000989923389, 
               0.6228830900071785, -0.9759042157489377, 
               1.3031795733150684`, -0.31834849538340215`, 
               0.07084839582606572, -0.833584390456938, 0.916966723154637, 
               0.33869684899201724`, -0.9759036176528202, 0.6142329554606203, 
               1.40759647990763, 0.9867760183627521, 
               0.010045751591475444`, -1.4060242769639348`, 
               0.17389237539856484`, 
               0.46750784838914594`, -1.4700567577118608`, 
               0.4675060101810966}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {18, -12}, {6, 7}, {-1, 
                16}, {8, 9}, {-2, 15}, {-3, -13}, {10, -14}, {-4, 11}, {
                12, -15}, {13, -16}, {-5, 14}, {-6, -17}, {-7, -18}, {
                17, -19}, {-8, -20}, {19, 20}, {-9, 21}, {
                22, -21}, {-10, -22}, {-11, -23}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2,
                 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 3, 2, 1, 3, 3, 1, 3, 1, 4, 4, 2, 1, 
                4, 3, 2, 1, 4, 1, 1, 3, 4, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.4216585768292216, \
-0.4336602584527922, 
               0.4675078741512695, -0.9759042316782782, -1.4346334434421664`, 
               0.20129006206705924`, 0.4675069448441578, -1.6458893913459214`,
                0.46750656852313943`, -1.5117449381027548`, 
               0.2769350995930049, 
               0.07084840676504334, -0.7328501662295706, \
-0.44500896543395996`, 0.27693583305072256`, 0.4675061284036852, 
               0.33869741658243413`, 0.8500716586581589, 0.2769362774372497, 
               1.086690807192502, -0.8350732083275494, 
               0.4675073108786756, -0.43365958044737285`, 
               1.05687479879969, -1.366878935722788}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 25}, {-3, 5}, {6, 
                7}, {-4, 8}, {12, 13}, {-5, 9}, {-6, 10}, {
                11, -15}, {-7, -16}, {14, 15}, {19, 20}, {-8, -17}, {
                16, -18}, {17, -19}, {18, -20}, {-9, -21}, {21, -22}, {
                24, -23}, {-10, 22}, {-11, 
                23}, {-12, -24}, {-13, -25}, {-14, -26}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1,
                 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1,
               "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 5, 2, 3, 6, 5, 6, 1, 3, 3, 1, 6, 1, 1, 
                1, 1, 4, 2, 1, 4, 2, 1, 6, 6, 6, 5, 1, 3}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.9759033299387037, 
               0.6228830269664387, 0.33869593555139677`, 0.467507595993951, 
               0.010044507609295872`, 0.9867753491004976, 
               0.010044642445215815`, -0.03330335591082573, 
               0.46750704709118507`, 0.46750642294252254`, 
               0.03574030396368788, -0.8533634448596032, -0.4778446466223465, \
-1.8183690559348875`, -0.43219289077766687`, -0.026772611529284118`, 
               0.2769351894661427, -0.7328494081350607, -1.9625841237354429`, 
               0.2769357489778548, -0.7328500442038708, -1.5019368165454754`, \
-0.8533633737185831, -0.8533632881623197, -0.8533627884390533, 
               0.8048294279594534, -0.20901004628106135`, 0.4675076254671735},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, -18}, {4, 5}, {6, 
                7}, {-2, -19}, {8, 9}, {21, 22}, {10, 11}, {18, 19}, {-3, 
                12}, {16, 17}, {13, 14}, {-4, -20}, {-5, 
                15}, {-6, -21}, {-7, -22}, {-8, -23}, {-9, 
                20}, {-10, -24}, {-11, -25}, {23, 24}, {-12, 28}, {-13, 
                25}, {-14, 26}, {-15, -26}, {
                27, -27}, {-16, -28}, {-17, -29}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1,
                 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 1, 6, 6, 6, 1, 2, 5, 4, 2, 6, 4, 4, 6, 
                2, 1, 1, 1, 1, 4, 4, 6, 1, 2, 3, 1, 6, 6, 1, 3, 1, 1, 3, 3, 6,
                 2, 1, 3, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQB2KDM55qNsqb7F8cOR7WpPZhf0LjyYVJk1rsN8xJ+XIX
SN+YFXzVDEh3GB7ryX6+zN7D5OAq87VX7SusxMyWvnts/+D1KgWhg7f3T/gT
EG8MFFdQWLf/gN/r/RqFp3aIAMUtujnnguQX9H1QKvlza7+A7zXJ2Vbv91ds
Yjy+Yt5H+x9M8fwaS+7a95yYMD8hmMHBwivK6f63r/Yb5BnUZYHu2qFt6qoI
pDkOb3gCMrcht9j6TPQF+wWdlw0ai5/vX8HYyrbk9V17j5BtwSH8J+w94h77
7gequ7DsQu9eIP1AadLONUxv959433x/KVDdgl03d+2K/L+/YcfbdSLec/df
UEs6zDV/w/6ActFri4DyDwK+eu8D6Z/8bFcT0Pwfhbdu3I77aK/wP2fNPJA9
3b9m3j980h4AxyGrxQ==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {22, -20}, {-1, -21}, {6, 
                7}, {8, 9}, {21, -22}, {10, 11}, {16, 17}, {12, -23}, {-2, 
                14}, {-3, 13}, {-4, -24}, {15, -25}, {-5, -26}, {-6, 18}, {
                20, -27}, {19, -28}, {-7, -29}, {-8, -30}, {-9, -31}, {-10, 
                23}, {24, 25}, {26, 27}, {36, 37}, {28, -32}, {30, 31}, {-11, 
                29}, {-12, -33}, {32, -34}, {-13, 35}, {33, -35}, {-14, 
                34}, {-15, -36}, {-16, -37}, {-17, 38}, {-18, -38}, {
                39, -39}, {-19, -40}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2,
                 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 
                1, 2, 2, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 2, 3, 1, 3, 2, 1, 1, 3, 1, 3, 4, 1, 2, 
                1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 3, 1, 2, 4, 1,
                 1, 1, 4, 3, 1, 1, 1}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBXQGi/iFib1JlAQAAACoAAABwsJ+VqZPvPzAIQHuaOu+/mAnzR6br3T/o
QcUnbf/3v0gWaxngw8k/oJpu54Bz57/IHgAEzu//v3AQueusUcg/wGBnCKLr
3T8QvH02eBnUv9Ai7Fie690/WP4hbxPB278AU9GaeMzOv1DH1QaBc+e/cNzG
22TU4L8IEIKGh5Tov8gx5FdSseK/IOZ3NKLr3T9AJ27f/dHzvyhJ79tBYu+/
+Hgw4wks8L+AUIQKSOzjv2AS8szzgee/uEl0Pp7t07+g1MiiFcHbv7AC4xlT
udE/wJN1VFG50T+QuvD+ULnRP+AqZs5s57Q/MHjw/Sauxb+wFhFqo+vdPygn
LbaqmJ6/OKQg3Jk677+okQcGHyOyP0DNPeIGe9y/IN8casBB7D/wRiR6sFnt
PyBE9PYZQsY/yHyrFsun4z8w0HK/imfTv2j55l6jBKY/qHStXU+fdD+TnLoO

               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {38, 39}, {5, 6}, {-2, 
                7}, {8, 9}, {-3, -23}, {10, 11}, {34, -24}, {12, 13}, {-4, 
                33}, {-5, 14}, {24, 25}, {15, 16}, {17, -25}, {-6, -26}, {
                18, -27}, {19, 20}, {-7, 21}, {-8, 22}, {-9, -28}, {
                23, -29}, {-10, -30}, {-11, -31}, {-12, 26}, {27, -32}, {
                28, -33}, {29, -34}, {30, -35}, {-13, 31}, {-14, 
                32}, {-15, -36}, {-16, -37}, {35, 36}, {-17, -38}, {-18, 
                37}, {-19, -39}, {40, -40}, {-20, -41}, {-21, 41}, {
                42, -42}, {-22, -43}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2,
                 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 
                1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{4, 3, 1, 5, 4, 2, 1, 2, 1, 3, 2, 1, 3, 4, 
                1, 2, 3, 1, 5, 6, 1, 1, 1, 5, 5, 3, 2, 1, 1, 1, 1, 1, 5, 2, 1,
                 1, 3, 1, 1, 2, 3}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAABoDPf5MSOyP1gEKcwXn7C/wCXKpyqe079Y
bkSJqO7jPzBM6PQWwdu/MDesuzit1T+AgxhdOhzwv3Dlko6bOu+/mHUxOfjG
xb8IV7pCy6fjP3CBHmOZOu+/YNNX4q8O+z+IlxJ4D5+wvxgceBsjI7I/WHyw
AgKV0b/4Wf9GgXPnv2DyRgam690/AAVMqsNG7r/g/9fFqZPvPxjSip0Ak4Q/
CG1rGFYX1L9whn0oWPn6v0Anbt/90fO/MEAgRqXu4z+gMuXkpu7jP6iFF42h
690/iIfO+n9z578wGYAGIXf8v4iTFzCkluC/wPUwOMjc/r8ILJ3Ob5Tzv9ji
mMZoXOW/OMWEDCnB6T/YWbvUgnPnv1jeNsdUDc6/cBC566xRyD/4URpUnuvd
P9Cxmpl637w/mHeSyHcksL+YEjLMf3Pnv4hFwOgMn7C/fpWyBw==
               "], "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {16, 17}, {5, 6}, {-2, 
                7}, {11, -23}, {-3, 8}, {-4, 9}, {10, -24}, {-5, -25}, {-6, 
                12}, {13, -26}, {-7, 14}, {-8, 15}, {-9, -27}, {18, 19}, {
                33, -28}, {20, 21}, {25, 26}, {22, -29}, {-10, -30}, {-11, 
                23}, {24, -31}, {-12, -32}, {27, -33}, {29, 30}, {
                28, -34}, {-13, -35}, {-14, -36}, {-15, 31}, {-16, 
                32}, {-17, -37}, {34, 35}, {36, 37}, {-18, 40}, {
                38, -38}, {-19, -39}, {39, -40}, {-20, -41}, {-21, 
                41}, {-22, -42}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1,
                 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 
                1, 1, 1, 2, 1, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 4, 2, 1, 2, 3, 1, 1, 1, 4, 1, 4, 2, 1, 
                1, 4, 3, 4}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.9867752040476727, -0.4336591071148046, -0.7328508168270131, \
-1.1116357837862303`, -0.1970762018256933, 
               0.20129013492718362`, -1.2521326494660627`, \
-1.8858692746296128`, 0.18076740780557188`, -0.4336586451345079, 
               0.18541213558456526`, -0.4336585737025418, -0.7328507389584118,
                0.21615651976295513`, 0.6361113049878648, -0.4336603117129214,
                0.46750726633413864`, 0.17389225227947303`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {16, 17}, {5, 6}, {
                7, -12}, {9, 10}, {8, -13}, {-2, -14}, {-3, 11}, {-4, 
                12}, {-5, -15}, {-6, 13}, {-7, 14}, {-8, 
                15}, {-9, -16}, {-10, -17}, {18, -18}, {-11, -19}}], 
              "LeafValues" -> 
              RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2,
                 2, 1, 1, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
              0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{6, 4, 2, 3, 2, 4, 4, 1, 1, 1, 1, 3, 3, 2, 
                3, 2, 3, 1, 1, 2}], "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.010044451976783941`, -0.43365925843037223`, \
-0.7328508170246399, 0.46750653612682713`, 0.33869596051895456`, 
               0.27693576427902933`, 0.2769357173802236, -1.2197521880385054`,
                0.5626697342086455, -0.5512579939129232, \
-0.24272800679925854`, 0.46750769973002715`, 
               0.46750656901343035`, -0.7328489801484546, 
               0.6142333469999874, -0.7328502329492652, 
               0.4675060559516009, -0.2760937979941027, -0.1759030576343641, 
               0.33869587412716484`}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 17}, {5, 6}, {7, 
                8}, {11, -12}, {-3, 9}, {-4, -13}, {10, -14}, {-5, -15}, {12, 
                13}, {-6, -16}, {-7, 14}, {15, -17}, {16, -18}, {-8, -19}, {
                18, -20}, {-9, 19}, {-10, 20}, {-11, -21}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
                 1, 2, 1, 2, 2, 2, 1, 1, 2}], "RootIndex" -> 1, 
              "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{2, 6, 4, 1, 1, 6, 4, 1, 1, 3, 3, 1, 1, 1, 
                3, 1, 4, 6, 6, 6, 4, 1, 4, 3, 2, 2, 4, 3, 1, 5, 1}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {-0.9759034350730449, \
-0.4216586224022847, 0.070850104137964, 0.499305094991521, 
               0.7153662697150986, -0.4216585768292216, 
               0.2769351894661427, -1.394164628241949, 1.8651054623799137`, 
               0.6142319961931779, -0.06492725612925421, \
-1.9258676532906076`, -0.27458778342503365`, -0.2043780411692251, \
-0.06492703106648079, 0.07804115737564576, 0.07084887493989, 
               0.010044930859128262`, 
               0.010044682770731575`, -0.8533625157560154, 
               0.2769350725585529, -0.06395511900248108, 0.2769350301596072, 
               0.4675076272728673, -0.7328499228543128, -0.7328497668550726, 
               0.2769346203775811, -0.06492678899862914, 
               0.0038440468072533547`, 0.9867766777725073, 0.640594913007285},
               "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, -18}, {6, 7}, {-1, 
                5}, {-2, -19}, {8, 9}, {18, 19}, {-3, 10}, {12, -20}, {
                11, -21}, {-4, -22}, {-5, 13}, {-6, 14}, {-7, 15}, {-8, 16}, {
                17, -23}, {-9, -24}, {20, -25}, {-10, 31}, {21, 22}, {
                23, -26}, {-11, 29}, {24, -27}, {25, -28}, {-12, 26}, {-13, 
                27}, {28, -29}, {-14, -30}, {-15, 
                30}, {-16, -31}, {-17, -32}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1,
                 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1}],
               "RootIndex" -> 1, "NominalDimension" -> 0|>], 
            
            MachineLearning`DecisionTree[<|
             "FeatureIndices" -> 
              RawArray["Integer16",{5, 1, 4, 4, 4, 1, 4, 1, 2, 4, 1, 1, 3, 5, 
                1, 1, 5, 1, 1, 2, 4, 4, 1, 1, 1, 2, 1, 4, 1, 2}], 
              "NominalSplits" -> {}, 
              "NumericalThresholds" -> {
               0.9867751866936878, -0.17696861204941317`, 
               0.17389226323590123`, -0.43365968061530413`, \
-0.43366024081204424`, -0.178514165626674, 
               0.07084891505402346, -1.0068915974190702`, -0.7328496869900949,
                0.07084839582606572, -0.7947408894768984, -0.764248410115826, 
               0.46750785285866625`, 
               0.6228815381913932, -0.5572751960833271, -1.3700906805485946`, 
               0.6228828639768729, -1.6112343007768803`, -0.5859338832301386, 
               0.3386975686102516, 0.276935080286806, 
               0.276935061024961, -1.9638931330783667`, \
-0.034275156452344524`, -0.025863449138790823`, -0.7328500174479382, 
               1.5515152722089596`, 0.2769344283646853, 
               1.5203401889289765`, -0.9759042534489435}, "Children" -> 
              RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -14}, {-2, 6}, {-3, 
                24}, {7, -15}, {8, 9}, {-4, 10}, {12, 13}, {
                11, -16}, {-5, -17}, {14, 15}, {20, -18}, {-6, 16}, {
                19, -19}, {17, -20}, {18, -21}, {-7, -22}, {-8, -23}, {
                21, -24}, {22, -25}, {23, -26}, {-9, -27}, {-10, 25}, {26, 
                27}, {-11, 28}, {29, -28}, {-12, -29}, {
                30, -30}, {-13, -31}}], "LeafValues" -> 
              RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1,
                 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1}], 
              "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
               "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], 
          "OOBConfusionMatrix" -> {{0.7188009583855796, 0.3389624593838786}, {
           0.28119904161442055`, 0.6610375406161214}}, "Calibrator" -> 
          MachineLearning`CalibratorFunction[
           "TemperatureScaling", <|"Theta" -> 2.225750776192231|>], "Method" -> 
          "RandomForest", "PostProcessor" -> 
          MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "FeatureFraction" -> <|
             "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
            "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
            "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
            "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
            "Implementation" -> <|
             "Value" -> "Default", "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Configurations" -> 
          Dataset[<|<|
              "Value" -> "RandomForest", 
               "Options" -> <|
                "FeatureFraction" -> <|"Value" -> Automatic|>, 
                 "LeafSize" -> <|"Value" -> Automatic|>, 
                 "TreeNumber" -> <|"Value" -> Automatic|>, 
                 "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                 "Implementation" -> <|"Value" -> Automatic|>|>, 
               "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
               "EMIterations" -> 
               Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
            TypeSystem`Assoc[
             
             TypeSystem`Struct[{
              "Value", "Options", "NaiveImputer", "EMIterations"}, {
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
               TypeSystem`UnknownType, TypeSystem`UnknownType}], 
             TypeSystem`Assoc[
             TypeSystem`UnknownType, TypeSystem`UnknownType, 
              TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
          Dataset[<|
            "Configuration" -> {
              "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
               Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
               0.5, "Implementation" -> Automatic}, "ModelUtility" -> 
             Missing[]|>, 
            TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
              TypeSystem`Tuple[{
                TypeSystem`Atom[String], TypeSystem`AnyType, 
                TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
          "InputDimension" -> 6, "OutputDimension" -> 1|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 0.115655, 
          "MaxTrainingMemory" -> 540112, "DataMemory" -> 178408, 
          "FunctionMemory" -> 268440, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 42, 5.612374`7.50172159183537}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]},
    {"3", "\<\"LogisticRegression\"\>", 
     InterpretationBox[
      RowBox[{
       TagBox["ClassifierFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"], 
                   ImageSizeCache -> {
                    12.344414062500002`, {0., 12.344414062500002`}}], 
                  Appearance -> None, BaseStyle -> {}, 
                  ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, AutoDelete -> 
                 False, BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
            GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], Appearance -> None, 
                  BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False),
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{
                   GrayLevel[0.45], 
                   PointSize[0.13], 
                   
                   PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], {
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
                   GrayLevel[0.55], 
                   AbsoluteThickness[1.5], 
                   LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
                 BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["732", "SummaryItem"]}]}}, AutoDelete -> False, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
              False, BaselinePosition -> {1, 1}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      ClassifierFunction[<|
       "ExampleNumber" -> 732, "ClassNumber" -> 2, 
        "Input" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal"|>, 
               "f2" -> <|"Type" -> "Numerical"|>, 
               "f3" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor[
                  "Transpose", <|"FeatureNumber" -> 3|>], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Processors" -> {
               MachineLearning`MLProcessor[
               "SynthesizeMissingValues", <|
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Distribution" -> 
                 LearnedDistribution[<|
                   "ExampleNumber" -> 732, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.237916921543757`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9929407073989074, 
                    0.06618767214523082, -0.09842735212405547}, \
{-0.11800712372882005`, 0.6349382682185503, -0.7634970296608097}, {
                    0.011961201419937973`, 0.7697224094487725, 
                    0.6382666700157292}}, 
                    "Precisions" -> {0.9868363645925948, 11.359292283793128`, 
                    15.85303535201871}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039134542`, 0.06806652928504821, 
                    0.06328266457493764}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5074485324316086278|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00020209763039135537`, 0.06806652928504825, 
                    0.06328266457493766}, 
                    "StandardDeviation" -> {1.000039788454547, 
                    0.29389222436507445`, 0.2792849193312356}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.04878, "MaxTrainingMemory" -> 319192, 
                    "DataMemory" -> 81824, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 10, 12, 42, 5.665202`7.50579038759513}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                    "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3411625350800267`, \
-2.3411625350800267`, -2.2491919607949065`, -2.202374576612312, \
-1.9619269342170333`, -1.8271926595177932`, -1.813790795399923, \
-1.8040940687800027`, -1.798965383820795, -1.7914136012625184`, \
-1.6910356211057256`}, "LeftBoundary" -> -2.2491919607949065`, "LeftScale" -> 
                    0.045985287142560116`, "LeftTailNorm" -> 0.2|>], 
                    "Entropy" -> 
                    Around[5.844344440977312, 0.21823619759414228`], 
                    "EntropySampleSize" -> 10|>], 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "EvaluationStrategy" -> "ModeFinding", 
                 "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
               MachineLearning`MLProcessor[
               "Threads", <|
                "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                   "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>,
                  "Processors" -> {
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                   MachineLearning`MLProcessor[
                   "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                 "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                 "Missing" -> "Allowed"|>], 
               MachineLearning`MLProcessor[
               "Standardize", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Mean" -> {29.41643893442623}, 
                 "StandardDeviation" -> {14.237916921543757`}, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
               MachineLearning`MLProcessor[
               "EmbedNominalVector", <|
                "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                   "female" -> 1, "male" -> 2|>}, 
                 "Output" -> <|
                  "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                 "EmbeddingVectors" -> {
                  RawArray["Real32",{{0., 0., 0.}, {-0.9759039282798767, 
                    0.6142327189445496, -0.43365949392318726`}, {
                    0.33869668841362, -0.06492665410041809, 
                    0.07084924727678299}, {-0.7328498363494873, 
                    0.46750691533088684`, 0.2769353985786438}}], 
                   RawArray["Real32",{{0., 0.}, {0.9867761731147766, 
                    0.010045409202575684`}, {
                    0.6228821277618408, -0.8533625602722168}}]}, 
                 "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
               MachineLearning`MLProcessor[
               "MergeVectors", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                   "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                   Span[1, 1], 
                   Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                 "Output" -> <|
                  "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 7619735631186802745|>]}, "Invertibility" -> "Impossible", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
        "Output" -> <|
         "Preprocessor" -> 
          MachineLearning`MLProcessor[
           "ToMLDataset", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Preprocessor" -> 
             MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                  MachineLearning`MLProcessor["List"], 
                  MachineLearning`MLProcessor[
                  "WrapMLDataset", <|
                   "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "Sequence", <|
            "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
               MachineLearning`MLProcessor[
               "IntegerEncodeNominalVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                 "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                 0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
               MachineLearning`MLProcessor[
               "FromVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                 "Output" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
               MachineLearning`MLProcessor[
               "FirstValues", <|
                "Info" -> <|
                  "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                 "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                 False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
          "class", 
          "Marginal" -> <|
           "died" -> 0.5831062670299727, "survived" -> 
            0.41689373297002724`|>|>, "LabelSplitter" -> 
        MachineLearning`MLProcessor[
         "FeatureLabelSplit", <|
          "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
           "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
        "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
        "Prior" -> Automatic, "Utility" -> 
        SparseArray[
         Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
        "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
        Automatic, "BatchProcessing" -> Automatic, 
        "Model" -> <|
         "LogProbabilitiesFunction" -> 
          LinearLayer[<|
            "Type" -> "Linear", 
             "Arrays" -> <|
              "Weights" -> 
               RawArray["Real32",{{
                 0.5046892166137695, -0.1692856401205063, \
-0.03163857385516167, 
                 2.950413227081299, -1.1390047073364258`, \
-2.362849473953247}}], "Biases" -> 
               RawArray["Real32",{-0.14568713307380676`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               6, "$InputDimensions" -> {6}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
            "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
          MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Weight" -> {0.3333333333333333, 0.9444444444444444, 
                0.34444444444444444`, 0.34444444444444444`, 
                0.34444444444444444`, 0.34444444444444444`, 
                0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
             "(f2(f1f3))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
          "Calibrator" -> None, "Method" -> "LogisticRegression", 
          "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
          "Options" -> <|
           "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
            "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
            "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>,
             MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
        "TrainingInformation" -> <|
         "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
          Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
          "PreprocessingTime" -> 0.103761`5.467579142119307, "LossName" -> 
          "MeanCrossEntropy", "BestModelInformation" -> 
          Dataset[<|
            "MeanCrossEntropy" -> 
             Around[0.4962574708858271, 0.03472977693960391], "Accuracy" -> 
             Around[0.7787074631898112, 0.026855798295200097`], 
             "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 146., 
             "ModelMemory" -> 8968., "ModelUtility" -> -0.006389519384783604, 
             "Round" -> 4, "Iteration" -> 48, 
             "Time" -> {1.070997`6.48133324781497, 1.09175`6.489668194089348},
              "TrainingSize" -> 586, "TrainingTime" -> 0.019952623149688785`, 
             "TrainingMemory" -> 205680., "ExperimentCount" -> 2, 
             "MeanCrossEntropyHistory" -> {
               Around[0.4872201516311726, 0.045838047353706654`], 
               Around[0.5052947901404816, 0.04918526678853702]}, 
             "AccuracyHistory" -> {
               Around[0.7906225159324907, 0.033349111182852886`], 
               Around[0.7667924104471318, 0.034769712787511786`]}, 
             "IterationHistory" -> {32, 48}, 
             "TimeHistory" -> {{
               0.582457`6.21680886250384, 0.603127`6.2319537643289555}, {
               1.070997`6.48133324781497, 1.09175`6.489668194089348}}, 
             "Configuration" -> {
              "LogisticRegression", "L1Regularization" -> 0, 
               "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
               MaxIterations -> 30}, "FinalTrainingSize" -> 732|>, 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
          "Configurations" -> 
          Dataset[<|<|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 100.|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6907679345569548, 0.0038866938919860775`], 
                  "Accuracy" -> 
                  Around[0.5125373425074518, 0.03522317662985747], 
                  "EvaluationTime" -> 2.8370820458389792`*^-6, "TestSize" -> 
                  400, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.32432362496410605`, "Round" -> 1, 
                  "Iteration" -> 1, 
                  "Time" -> {
                   0.121489`5.536081950808349, 0.131685`5.571081301576684}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                  "TrainingMemory" -> 71536, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6907679345569548, 0.00274830760741969]}, 
                  "AccuracyHistory" -> {
                    Around[0.5125373425074518, 0.024906547049903735`]}, 
                  "IterationHistory" -> {1}, 
                  "TimeHistory" -> {{
                    0.121489`5.536081950808349, 
                    0.131685`5.571081301576684}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6828862951560299, 0.006046025102719747], 
                  "Accuracy" -> 
                  Around[0.5467511435240389, 0.031117594413358925`], 
                  "EvaluationTime" -> 2.5118864315095793`*^-6, "TestSize" -> 
                  500, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.3134925324942004, "Round" -> 2, 
                  "Iteration" -> 9, 
                  "Time" -> {
                   0.231885`5.816817649732392, 0.242542`5.836331947934644}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.007943282347242814, "TrainingMemory" -> 75424, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6828862951560299, 0.004275185349357225]}, 
                  "AccuracyHistory" -> {
                    Around[0.5467511435240389, 0.02200346202389872]}, 
                  "IterationHistory" -> {9}, 
                  "TimeHistory" -> {{
                    0.231885`5.816817649732392, 
                    0.242542`5.836331947934644}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6610294220402555, 0.013147598023831314`], 
                  "Accuracy" -> 
                  Around[0.5653902968835008, 0.02864221583915503], 
                  "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.28316337997040275`, "Round" -> 3, 
                  "Iteration" -> 33, 
                  "Time" -> {
                   0.604177`6.232709181889026, 0.617605`6.242255796794537}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 96280, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6610294220402555, 0.009296755718965972]}, 
                  "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                  "IterationHistory" -> {33}, 
                  "TimeHistory" -> {{
                    0.604177`6.232709181889026, 
                    0.617605`6.242255796794537}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5917078903312463, 0.022214393176938116`], 
                  "Accuracy" -> 
                  Around[0.7668052279343548, 0.03198998598357118], 
                  "EvaluationTime" -> 3.5894314652320265`*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.1758886086931356, "Round" -> 4, 
                  "Iteration" -> 50, 
                  "Time" -> {
                   1.160939`6.516354394406485, 1.186163`6.525689366450373}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.016765790850326374`, "TrainingMemory" -> 
                  205701.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6096098572484931, 0.02031691458081154], 
                    Around[0.5738059234139993, 0.017257366896755243`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7462470361593463, 0.035780668221151085`], 
                    Around[0.7873634197093633, 0.03364171729308311]}, 
                  "IterationHistory" -> {38, 50}, 
                  "TimeHistory" -> {{
                    0.877717`6.394899503536159, 0.893084`6.402437302351828}, {
                    1.160939`6.516354394406485, 
                    1.186163`6.525689366450373}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.5894314652320265`*^-6, 
                 "MeanCrossEntropy" -> 
                 Around[0.5917078903312463, 0.022214393176938116`], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 
                 205701.3333333333, "TrainingTime" -> 0.027252506725414398`|>,
                "Index" -> 1|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 0.00001|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[3.1770521447346085`, 0.3079208203711115], "Accuracy" -> 
                  Around[0.702149566553167, 0.02378083713448513], 
                  "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -1.8683026325121443`, "Round" -> 1, 
                  "Iteration" -> 11, 
                  "Time" -> {
                   0.26118`5.868484911037015, 0.280488`5.899459279247645}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 77312, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[3.1770521447346085`, 0.21773290015293775`]}, 
                  "AccuracyHistory" -> {
                    Around[0.702149566553167, 0.0168155912000873]}, 
                  "IterationHistory" -> {11}, 
                  "TimeHistory" -> {{
                    0.26118`5.868484911037015, 
                    0.280488`5.899459279247645}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5432474902401185, 0.04247326531742843], "Accuracy" -> 
                  Around[0.7852232554532458, 0.02178985167845728], 
                  "EvaluationTime" -> 2.6840641641540205`*^-6, "TestSize" -> 
                  702, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.09847581008934803, "Round" -> 2, 
                  "Iteration" -> 20, 
                  "Time" -> {
                   0.392707`6.0456136361320105, 0.412033`6.06647699385913}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 80560, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5432474902401185, 0.03003313392508904]}, 
                  "AccuracyHistory" -> {
                    Around[0.7852232554532458, 0.015407751882886215`]}, 
                  "IterationHistory" -> {20}, 
                  "TimeHistory" -> {{
                    0.392707`6.0456136361320105, 
                    0.412033`6.06647699385913}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.49669689169369424`, 0.036903325135733904`], 
                  "Accuracy" -> 
                  Around[0.7825904593549557, 0.025232258357673697`], 
                  "EvaluationTime" -> 5.505807772239305*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.008125146085676382, "Round" -> 4, 
                  "Iteration" -> 49, 
                  "Time" -> {
                   1.093235`6.490258520709372, 1.159399`6.515777914945019}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.026571987784909094`, "TrainingMemory" -> 215384., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.48534325958903407`, 0.04771205773901349], 
                    Around[0.5080505237983544, 0.051862901538539244`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                  "IterationHistory" -> {40, 49}, 
                  "TimeHistory" -> {{
                    0.915756`6.413324766323523, 0.935659`6.422662592873516}, {
                    1.093235`6.490258520709372, 
                    1.159399`6.515777914945019}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 5.505807772239305*^-6, "MeanCrossEntropy" -> 
                 Around[0.49669689169369424`, 0.036903325135733904`], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 215384., 
                 "TrainingTime" -> 0.04904124431122113|>, "Index" -> 2|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 10000.|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6929113683883205, 0.0018407910240849604`], 
                  "Accuracy" -> 
                  Around[0.5875401755535886, 0.02550140616636422], 
                  "EvaluationTime" -> 2.5946465757742493`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.32682827969968453`, "Round" -> 1, 
                  "Iteration" -> 5, 
                  "Time" -> {
                   0.185035`5.718798877948612, 0.19466`5.740821712535333}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719,
                   "TrainingMemory" -> 69488, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6929113683883205, 0.0013016358158778048`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                  "IterationHistory" -> {5}, 
                  "TimeHistory" -> {{
                    0.185035`5.718798877948612, 
                    0.19466`5.740821712535333}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6929117545256189, 0.0010943328370959576`], 
                  "Accuracy" -> 
                  Around[0.6032181919629668, 0.10418853752793451`], 
                  "EvaluationTime" -> 2.5692790090577267`*^-6, "TestSize" -> 
                  434., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.32661347238814664`, "Round" -> 2, 
                  "Iteration" -> 26, 
                  "Time" -> {
                   0.497282`6.148147732957128, 0.508136`6.1575249580333145}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.0054444393724491225`, "TrainingMemory" -> 
                  72666.66666666666, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.69295341998091, 0.001997486336027948], 
                    Around[0.6928700890703279, 0.0013067588645704609`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000691800013414, 0.028795271671777638`], 
                    Around[0.7063672039245922, 0.017065644390913688`]}, 
                  "IterationHistory" -> {7, 26}, 
                  "TimeHistory" -> {{
                    0.214169`5.782301602366898, 0.221882`5.79766706536407}, {
                    0.497282`6.148147732957128, 
                    0.508136`6.1575249580333145}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6920933486071874, 0.002085865076545491], 
                  "Accuracy" -> 
                  Around[0.5653902968835008, 0.02864221583915503], 
                  "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.32571843617889806`, "Round" -> 3, 
                  "Iteration" -> 22, 
                  "Time" -> {
                   0.433303`6.0883366894053434, 0.443654`6.09858939498284}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.00630957344480193, "TrainingMemory" -> 91984, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6920933486071874, 0.0014749293402655137`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                  "IterationHistory" -> {22}, 
                  "TimeHistory" -> {{
                    0.433303`6.0883366894053434, 
                    0.443654`6.09858939498284}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6902722542733355, 0.0028716714432324318`], 
                  "Accuracy" -> 
                  Around[0.5847059897625333, 0.08920405560464958], 
                  "EvaluationTime" -> 3.532561626806341*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.3233127909576172, "Round" -> 4, 
                  "Iteration" -> 47, 
                  "Time" -> {
                   1.059824`6.4767787435011845, 1.069544`6.480743649223658}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.007943282347242814, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6919355980073342, 0.003392526174752993], 
                    Around[0.6886089105393368, 0.003234194404814914]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`], 
                    Around[0.669317655270652, 0.038785869930437866`]}, 
                  "IterationHistory" -> {31, 47}, 
                  "TimeHistory" -> {{
                    0.571828`6.208810410603584, 0.581416`6.21603197245446}, {
                    1.059824`6.4767787435011845, 
                    1.069544`6.480743649223658}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.532561626806341*^-6, "MeanCrossEntropy" -> 
                 Around[0.6902722542733355, 0.0028716714432324318`], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.014934197725661354`|>, "Index" -> 3|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 1.|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6225133446900297, 0.028919096319404102`], 
                  "Accuracy" -> 
                  Around[0.6958473199147355, 0.023920511178018536`], 
                  "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.2284082502268161, "Round" -> 1, 
                  "Iteration" -> 6, 
                  "Time" -> {
                   0.195686`5.743104749454242, 0.213121`5.7801712387745745}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 
                  0.012589254117941668`, "TrainingMemory" -> 77424, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6225133446900297, 0.020448889113237567`]}, 
                  "AccuracyHistory" -> {
                    Around[0.6958473199147355, 0.016914355663425515`]}, 
                  "IterationHistory" -> {6}, 
                  "TimeHistory" -> {{
                    0.195686`5.743104749454242, 
                    0.213121`5.7801712387745745}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5475941257045043, 0.012796660996985272`], 
                  "Accuracy" -> 
                  Around[0.7818826416999964, 0.012287210886823198`], 
                  "EvaluationTime" -> 2.600161783447983*^-6, "TestSize" -> 
                  634., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.09559225824469575, "Round" -> 2, 
                  "Iteration" -> 27, 
                  "Time" -> {
                   0.509541`6.158724128565324, 0.529068`6.175056488077175}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.013675813386831489`, "TrainingMemory" -> 
                  80362.66666666666, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5459072796666431, 0.02076479870430777], 
                    Around[0.5492809717423656, 0.016022152704283876`]}, 
                  "AccuracyHistory" -> {
                    Around[0.786487199004934, 0.016624533220907244`], 
                    Around[0.7772780843950589, 0.015641321144826872`]}, 
                  "IterationHistory" -> {10, 27}, 
                  "TimeHistory" -> {{
                    0.243593`5.838209797551007, 0.260136`5.866745451495263}, {
                    0.509541`6.158724128565324, 
                    0.529068`6.175056488077175}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.538153294073969, 0.03768339957874066], "Accuracy" -> 
                  Around[0.776205310563106, 0.024317132497594384`], 
                  "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.08744600582642315, "Round" -> 3, 
                  "Iteration" -> 17, 
                  "Time" -> {
                   0.340746`5.983975759871724, 0.361029`6.009087081922759}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 98880, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.538153294073969, 0.02664618738028981]}, 
                  "AccuracyHistory" -> {
                    Around[0.776205310563106, 0.017194809288060754`]}, 
                  "IterationHistory" -> {17}, 
                  "TimeHistory" -> {{
                    0.340746`5.983975759871724, 
                    0.361029`6.009087081922759}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4962574708858271, 0.03472977693960391], "Accuracy" -> 
                  Around[0.7787074631898112, 0.026855798295200097`], 
                  "EvaluationTime" -> 3.087088182519492*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.006389519384783604, "Round" -> 4, 
                  "Iteration" -> 48, 
                  "Time" -> {
                   1.070997`6.48133324781497, 1.09175`6.489668194089348}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.4872201516311726, 0.045838047353706654`], 
                    Around[0.5052947901404816, 0.04918526678853702]}, 
                  "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7667924104471318, 0.034769712787511786`]}, 
                  "IterationHistory" -> {32, 48}, 
                  "TimeHistory" -> {{
                    0.582457`6.21680886250384, 0.603127`6.2319537643289555}, {
                    1.070997`6.48133324781497, 1.09175`6.489668194089348}}|>},
                "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.087088182519492*^-6, "MeanCrossEntropy" -> 
                 Around[0.4962574708858271, 0.03472977693960391], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.03751300863256998|>, "Index" -> 4|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 100000.|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6929901562474444, 0.0018406411619976205`], 
                  "Accuracy" -> 
                  Around[0.5875401755535886, 0.02550140616636422], 
                  "EvaluationTime" -> 2.6328512733418832`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.3269418752076829, "Round" -> 1, 
                  "Iteration" -> 12, 
                  "Time" -> {
                   0.281537`5.901080472043499, 0.290888`5.9152707991662785}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719,
                   "TrainingMemory" -> 68880, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6929901562474444, 0.0013015298473796038`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                  "IterationHistory" -> {12}, 
                  "TimeHistory" -> {{
                    0.281537`5.901080472043499, 
                    0.290888`5.9152707991662785}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6929850900381973, 0.0009589039434430027], 
                  "Accuracy" -> 
                  Around[0.637507129866528, 0.07006928922010075], 
                  "EvaluationTime" -> 2.5692790090577267`*^-6, "TestSize" -> 
                  634., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.32668019601783826`, "Round" -> 2, 
                  "Iteration" -> 28, 
                  "Time" -> {
                   0.530441`6.176182078624187, 0.540253`6.18414218067518}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.005011872336272719, "TrainingMemory" -> 71973.33333333333,
                   "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6929813684300211, 0.0014115122755944788`], 
                    Around[0.6929888116463736, 0.0013067127014937461`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5686470558084638, 0.019924818887401375`], 
                    Around[0.7063672039245922, 0.017065644390913688`]}, 
                  "IterationHistory" -> {14, 28}, 
                  "TimeHistory" -> {{
                    0.306184`5.937527485889357, 0.315089`5.949978235379309}, {
                    0.530441`6.176182078624187, 
                    0.540253`6.18414218067518}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6929816357409117, 0.002823464968303088], 
                  "Accuracy" -> 
                  Around[0.5000691800013414, 0.040722663730445724`], 
                  "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                  300, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.3272130462315668, "Round" -> 3, 
                  "Iteration" -> 16, 
                  "Time" -> {
                   0.331673`5.972255112503313, 0.33969`5.9826277555301335}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.005011872336272719, "TrainingMemory" -> 90864, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929816357409117, 0.0019964912255297737`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000691800013414, 0.028795271671777638`]}, 
                  "IterationHistory" -> {16}, 
                  "TimeHistory" -> {{
                    0.331673`5.972255112503313, 
                    0.33969`5.9826277555301335}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6928633646500545, 0.004450569370250793], 
                  "Accuracy" -> 
                  Around[0.5000943242544146, 0.058319662590869015`], 
                  "EvaluationTime" -> 3.532561626806341*^-6, "TestSize" -> 
                  146, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.32751168463399316`, "Round" -> 4, 
                  "Iteration" -> 35, 
                  "Time" -> {
                   0.822963`6.36692530348704, 0.832335`6.37184315075931}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.007943282347242814, "TrainingMemory" -> 205712, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6928633646500545, 0.003147027781845478]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`]}, 
                  "IterationHistory" -> {35}, 
                  "TimeHistory" -> {{
                    0.822963`6.36692530348704, 0.832335`6.37184315075931}}|>},
                "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.532561626806341*^-6, "MeanCrossEntropy" -> 
                 Around[0.6928633646500545, 0.004450569370250793], 
                 "ModelMemory" -> 8968, "TrainingMemory" -> 205712, 
                 "TrainingTime" -> 0.014934197725661354`|>, "Index" -> 5|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 10.|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6593524888116868, 0.011660258082438207`], 
                  "Accuracy" -> 
                  Around[0.5849595027289619, 0.025502732184858448`], 
                  "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.28018392199867015`, "Round" -> 1, 
                  "Iteration" -> 13, 
                  "Time" -> {
                   0.291942`5.916841572403509, 0.305133`5.9360341724359555}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814,
                   "TrainingMemory" -> 74616, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6593524888116868, 0.008245047560477305]}, 
                  "AccuracyHistory" -> {
                    Around[0.5849595027289619, 0.018033154866697824`]}, 
                  "IterationHistory" -> {13}, 
                  "TimeHistory" -> {{
                    0.291942`5.916841572403509, 
                    0.305133`5.9360341724359555}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6330893406010143, 0.015415930996666223`], 
                  "Accuracy" -> 
                  Around[0.5686470558084638, 0.02817794909839063], 
                  "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                  600, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.24086479958391083`, "Round" -> 2, 
                  "Iteration" -> 15, 
                  "Time" -> {
                   0.31617`5.951465652727324, 0.330619`5.970872801467187}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 0.01, 
                  "TrainingMemory" -> 80104, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6330893406010143, 0.010900709346046578`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5686470558084638, 0.019924818887401375`]}, 
                  "IterationHistory" -> {15}, 
                  "TimeHistory" -> {{
                    0.31617`5.951465652727324, 
                    0.330619`5.970872801467187}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5075464131424362, 0.02666960196490663], "Accuracy" -> 
                  Around[0.7771100917373819, 0.0243284195531526], 
                  "EvaluationTime" -> 3.4714807536930535`*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.025437555433456716`, "Round" -> 4, 
                  "Iteration" -> 42, 
                  "Time" -> {
                   0.957896`6.432863353223859, 0.978628`6.44216263090756}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.5088848869213959, 0.03741375171820714], 
                    Around[0.5062079393634765, 0.03792951094107905]}, 
                  "AccuracyHistory" -> {
                    Around[0.7745584027774206, 0.03432727344725944], 
                    Around[0.779661780697343, 0.034105428492164934`]}, 
                  "IterationHistory" -> {39, 42}, 
                  "TimeHistory" -> {{
                    0.894166`6.4029631456158675, 
                    0.914664`6.412806579644506}, {
                    0.957896`6.432863353223859, 
                    0.978628`6.44216263090756}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.4714807536930535`*^-6, 
                 "MeanCrossEntropy" -> 
                 Around[0.5075464131424362, 0.02666960196490663], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.032867036861871125`|>, "Index" -> 6|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.6929980506764756, 0.0018406413129028077`], 
                  "Accuracy" -> 
                  Around[0.5875401755535886, 0.02550140616636422], 
                  "EvaluationTime" -> 2.6328512733418832`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.3269532609723689, "Round" -> 1, 
                  "Iteration" -> 3, 
                  "Time" -> {
                   0.153782`5.638450498284147, 0.163449`5.664927261356314}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719,
                   "TrainingMemory" -> 68984, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.6929980506764756, 0.001301529954085685]}, 
                  "AccuracyHistory" -> {
                    Around[0.5875401755535886, 0.018032217230028576`]}, 
                  "IterationHistory" -> {3}, 
                  "TimeHistory" -> {{
                    0.153782`5.638450498284147, 
                    0.163449`5.664927261356314}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6930012336654148, 0.001042422629433769], 
                  "Accuracy" -> 
                  Around[0.6094522732160219, 0.09793208666065568], 
                  "EvaluationTime" -> 2.5602260016563136`*^-6, "TestSize" -> 
                  500.66666666666663`, "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.32672758158605797`, "Round" -> 2, 
                  "Iteration" -> 24, 
                  "Time" -> {
                   0.465007`6.119004484103111, 0.475137`6.1283638447321716}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.005011872336272719, "TrainingMemory" -> 72064., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6930017644789591, 0.0017287356462208025`], 
                    Around[0.6930007028518703, 0.001306714004894459]}, 
                  "AccuracyHistory" -> {
                    Around[0.5125373425074518, 0.024906547049903735`], 
                    Around[0.7063672039245922, 0.017065644390913688`]}, 
                  "IterationHistory" -> {8, 24}, 
                  "TimeHistory" -> {{
                    0.222953`5.79975831397922, 0.230828`5.814833482156139}, {
                    0.465007`6.119004484103111, 
                    0.475137`6.1283638447321716}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6929894233099767, 0.0020553187113957682`], 
                  "Accuracy" -> 
                  Around[0.5653902968835008, 0.02864221583915503], 
                  "EvaluationTime" -> 2.7013247109478137`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.32700274032823495`, "Round" -> 3, 
                  "Iteration" -> 19, 
                  "Time" -> {
                   0.382451`6.034120794311646, 0.391632`6.044423164001}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.005011872336272719, "TrainingMemory" -> 90328, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6929894233099767, 0.0014533297983275442`]}, 
                  "AccuracyHistory" -> {
                    Around[0.5653902968835008, 0.02025310504807526]}, 
                  "IterationHistory" -> {19}, 
                  "TimeHistory" -> {{
                    0.382451`6.034120794311646, 0.391632`6.044423164001}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.6929445306200598, 0.002223313048782563], 
                  "Accuracy" -> 
                  Around[0.5847059897625333, 0.08920405560464958], 
                  "EvaluationTime" -> 3.2050388940584644`*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.32698645310988095`, "Round" -> 4, 
                  "Iteration" -> 43, 
                  "Time" -> {
                   0.98005`6.442793226504963, 0.988741`6.446627536860744}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.00630957344480193, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6929620326679911, 0.0031441585768911605`], 
                    Around[0.6929270285721285, 0.003144125508049724]}, 
                  "AccuracyHistory" -> {
                    Around[0.5000943242544146, 0.041238228894514894`], 
                    Around[0.669317655270652, 0.038785869930437866`]}, 
                  "IterationHistory" -> {30, 43}, 
                  "TimeHistory" -> {{
                    0.562654`6.201786404184384, 0.570744`6.207986348120639}, {
                    0.98005`6.442793226504963, 
                    0.988741`6.446627536860744}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.2050388940584644`*^-6, 
                 "MeanCrossEntropy" -> 
                 Around[0.6929445306200598, 0.002223313048782563], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.012893455547185712`|>, "Index" -> 7|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[3.8671060231190046`, 0.3757910207084266], "Accuracy" -> 
                  Around[0.702149566553167, 0.02378083713448513], 
                  "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -2.0649055188668903`, "Round" -> 1, 
                  "Iteration" -> 2, 
                  "Time" -> {
                   0.13271`5.574448642669295, 0.152725`5.635455127300019}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 77376, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[3.8671060231190046`, 0.26572437905194274`]}, 
                  "AccuracyHistory" -> {
                    Around[0.702149566553167, 0.0168155912000873]}, 
                  "IterationHistory" -> {2}, 
                  "TimeHistory" -> {{
                    0.13271`5.574448642669295, 
                    0.152725`5.635455127300019}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5432401781510674, 0.0424714654426257], "Accuracy" -> 
                  Around[0.7852232554532458, 0.02178985167845728], 
                  "EvaluationTime" -> 2.5368778061652167`*^-6, "TestSize" -> 
                  702, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.098461904683254, "Round" -> 2, 
                  "Iteration" -> 23, 
                  "Time" -> {
                   0.44474`6.099651185229687, 0.463974`6.118038637902358}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 80560, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5432401781510674, 0.030031861221410744`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7852232554532458, 0.015407751882886215`]}, 
                  "IterationHistory" -> {23}, 
                  "TimeHistory" -> {{
                    0.44474`6.099651185229687, 
                    0.463974`6.118038637902358}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5382921785447917, 0.043390189243549114`], 
                  "Accuracy" -> 
                  Around[0.7866783899144293, 0.023897270548369983`], 
                  "EvaluationTime" -> 2.5008066103980715`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.08978935639854935, "Round" -> 3, 
                  "Iteration" -> 25, 
                  "Time" -> {
                   0.476521`6.129627037994254, 0.49624`6.1472367616528825}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 98760, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5382921785447917, 0.03068149705108117]}, 
                  "AccuracyHistory" -> {
                    Around[0.7866783899144293, 0.01689792205660198]}, 
                  "IterationHistory" -> {25}, 
                  "TimeHistory" -> {{
                    0.476521`6.129627037994254, 
                    0.49624`6.1472367616528825}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.4966987792186036, 0.036904467389576104`], 
                  "Accuracy" -> 
                  Around[0.7825904593549557, 0.025232258357673697`], 
                  "EvaluationTime" -> 3.4409403171364096`*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.008129341730483852, "Round" -> 4, 
                  "Iteration" -> 44, 
                  "Time" -> {
                   0.990225`6.447278880170279, 1.011032`6.456309895084485}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.4853428234906329, 0.04771208340134462], 
                    Around[0.5080547349465744, 0.05186431568155738]}, 
                  "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                  "IterationHistory" -> {36, 44}, 
                  "TimeHistory" -> {{
                    0.833439`6.372418812497601, 0.854707`6.383362254315909}, {
                    0.990225`6.447278880170279, 
                    1.011032`6.456309895084485}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.4409403171364096`*^-6, 
                 "MeanCrossEntropy" -> 
                 Around[0.4966987792186036, 0.036904467389576104`], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.040772686439239446`|>, "Index" -> 8|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 0.001|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[1.8611144640903488`, 0.17916520215221085`], 
                  "Accuracy" -> 
                  Around[0.702149566553167, 0.02378083713448513], 
                  "EvaluationTime" -> 2.7042081955160134`*^-6, "TestSize" -> 
                  724, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -1.333396301327253, "Round" -> 1, 
                  "Iteration" -> 4, 
                  "Time" -> {
                   0.164517`5.667755774959631, 0.184004`5.716372257587278}, 
                  "TrainingSize" -> 8, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 77376, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[1.8611144640903488`, 0.1266889293944869]}, 
                  "AccuracyHistory" -> {
                    Around[0.702149566553167, 0.0168155912000873]}, 
                  "IterationHistory" -> {4}, 
                  "TimeHistory" -> {{
                    0.164517`5.667755774959631, 
                    0.184004`5.716372257587278}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5490632825308636, 0.042878614658460726`], 
                  "Accuracy" -> 
                  Around[0.7849955441985281, 0.021838982246278674`], 
                  "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                  700, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.10910681388394317`, "Round" -> 2, 
                  "Iteration" -> 18, 
                  "Time" -> {
                   0.362052`6.01031594439159, 0.381378`6.032900630412108}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 80448, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5490632825308636, 0.030319759192882476`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7849955441985281, 0.015442492440556269`]}, 
                  "IterationHistory" -> {18}, 
                  "TimeHistory" -> {{
                    0.362052`6.01031594439159, 
                    0.381378`6.032900630412108}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5382875401219072, 0.04338159572237159], "Accuracy" -> 
                  Around[0.7866783899144293, 0.023897270548369983`], 
                  "EvaluationTime" -> 2.5895736407315254`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.08977773398233824, "Round" -> 3, 
                  "Iteration" -> 29, 
                  "Time" -> {
                   0.54163`6.185247704700439, 0.561563`6.20094347896888}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 98936, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5382875401219072, 0.03067542051398227]}, 
                  "AccuracyHistory" -> {
                    Around[0.7866783899144293, 0.01689792205660198]}, 
                  "IterationHistory" -> {29}, 
                  "TimeHistory" -> {{
                    0.54163`6.185247704700439, 
                    0.561563`6.20094347896888}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.49669375334240723`, 0.036899219656684024`], 
                  "Accuracy" -> 
                  Around[0.7825904593549557, 0.025232258357673697`], 
                  "EvaluationTime" -> 3.532561626806341*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.008117289244474524, "Round" -> 4, 
                  "Iteration" -> 45, 
                  "Time" -> {
                   1.012457`6.456921580879684, 1.036083`6.466939541374424}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 
                  205637.3333333333, "ExperimentCount" -> 2, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.48534539948875965`, 0.04770987979158447], 
                    Around[0.5080421071960548, 0.05185729440658871]}, 
                  "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                  "IterationHistory" -> {37, 45}, 
                  "TimeHistory" -> {{
                    0.855773`6.383903573685498, 0.876573`6.394333082981151}, {
                    1.012457`6.456921580879684, 
                    1.036083`6.466939541374424}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.532561626806341*^-6, "MeanCrossEntropy" -> 
                 Around[0.49669375334240723`, 0.036899219656684024`], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 
                 205637.3333333333, "TrainingTime" -> 0.040772686439239446`|>,
                "Index" -> 9|>, <|
              "Value" -> "LogisticRegression", 
               "Options" -> <|
                "L1Regularization" -> <|"Value" -> 0|>, 
                 "L2Regularization" -> <|"Value" -> 0.1|>, 
                 "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                 MaxIterations -> <|"Value" -> 30|>|>|> -> <|
              "Experiments" -> {<|
                 "MeanCrossEntropy" -> 
                  Around[0.5346465575134847, 0.03819787334789356], "Accuracy" -> 
                  Around[0.7853235753258875, 0.02178360333889455], 
                  "EvaluationTime" -> 2.610470985159619*^-6, "TestSize" -> 
                  702, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.08118878587132505, "Round" -> 2, 
                  "Iteration" -> 21, 
                  "Time" -> {
                   0.413065`6.0675633912059705, 0.432215`6.0872448284730565}, 
                  "TrainingSize" -> 30, "TrainingTime" -> 
                  0.015848931924611134`, "TrainingMemory" -> 80384, 
                  "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5346465575134847, 0.027009975271200425`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7853235753258875, 0.015403333639610254`]}, 
                  "IterationHistory" -> {21}, 
                  "TimeHistory" -> {{
                    0.413065`6.0675633912059705, 
                    0.432215`6.0872448284730565}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.5377080361083254, 0.042556200156489546`], 
                  "Accuracy" -> 
                  Around[0.7879941972340441, 0.0238522760514124], 
                  "EvaluationTime" -> 2.8130757811641024`*^-6, "TestSize" -> 
                  582, "ModelMemory" -> 8968, 
                  "ModelUtility" -> -0.08841550455230052, "Round" -> 3, 
                  "Iteration" -> 34, 
                  "Time" -> {
                   0.61865`6.242990010757972, 0.685338`6.2874498063476265}, 
                  "TrainingSize" -> 150, "TrainingTime" -> 0.0630957344480193,
                   "TrainingMemory" -> 279312, "ExperimentCount" -> 1, 
                  "MeanCrossEntropyHistory" -> {
                    Around[0.5377080361083254, 0.030091777712185772`]}, 
                  "AccuracyHistory" -> {
                    Around[0.7879941972340441, 0.016866106142687194`]}, 
                  "IterationHistory" -> {34}, 
                  "TimeHistory" -> {{
                    0.61865`6.242990010757972, 
                    0.685338`6.2874498063476265}}|>, <|
                 "MeanCrossEntropy" -> 
                  Around[0.49659421155666605`, 0.03665359166417166], 
                  "Accuracy" -> 
                  Around[0.7825904593549557, 0.025232258357673697`], 
                  "EvaluationTime" -> 3.2050388940584644`*^-6, "TestSize" -> 
                  146., "ModelMemory" -> 8968., 
                  "ModelUtility" -> -0.007822313515073231, "Round" -> 4, 
                  "Iteration" -> 46, 
                  "Time" -> {
                   1.037528`6.467544819440493, 1.058371`6.476182924909237}, 
                  "TrainingSize" -> 586, "TrainingTime" -> 
                  0.019952623149688785`, "TrainingMemory" -> 205680., 
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.48550214151878435`, 0.04750226414725013], 
                    Around[0.5076862815945478, 0.05155751150482349]}, 
                  "AccuracyHistory" -> {
                    Around[0.7906225159324907, 0.033349111182852886`], 
                    Around[0.7745584027774207, 0.03432727344725944]}, 
                  "IterationHistory" -> {41, 46}, 
                  "TimeHistory" -> {{
                    0.936721`6.423155250121771, 0.956847`6.432387493061847}, {
                    1.037528`6.467544819440493, 
                    1.058371`6.476182924909237}}|>}, 
               "PredictedPerformances" -> <|
                "EvaluationTime" -> 3.2050388940584644`*^-6, 
                 "MeanCrossEntropy" -> 
                 Around[0.49659421155666605`, 0.03665359166417166], 
                 "ModelMemory" -> 8968., "TrainingMemory" -> 205680., 
                 "TrainingTime" -> 0.040772686439239446`|>, "Index" -> 10|>|>, 
            TypeSystem`Assoc[
             TypeSystem`Struct[{"Value", "Options"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["LogisticRegression"]], 
               TypeSystem`Assoc[TypeSystem`AnyType, 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
             
             TypeSystem`Struct[{
              "Experiments", "PredictedPerformances", "Index"}, {
               TypeSystem`Vector[
                
                TypeSystem`Struct[{
                 "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize",
                   "ModelMemory", "ModelUtility", "Round", "Iteration", 
                  "Time", "TrainingSize", "TrainingTime", "TrainingMemory", 
                  "ExperimentCount", "MeanCrossEntropyHistory", 
                  "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                 TypeSystem`AnyType, TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                  TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                  TypeSystem`Vector[
                   TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                  TypeSystem`Vector[
                   TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
                TypeSystem`AnyLength], 
               
               TypeSystem`Struct[{
                "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                 "TrainingMemory", "TrainingTime"}, {
                 TypeSystem`Atom[Real], TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real]}], 
               TypeSystem`Atom[Integer]}], 10], <||>], 
          "TrainingSizes" -> {8, 30, 150, 586}, "MaxTrainingSize" -> 732, 
          "PreprocessorEvaluationTime" -> 2.109375*^-6, "PreprocessorMemory" -> 
          97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
          "BaselineLogProbability" -> -0.6792695614395325, "VariableBudget" -> 
          True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
          "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
          "RoundPartitioning" -> 
          Dataset[{<|
             "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
              "ElapsedTimes" -> 0.13014699999999998`, "ExperimentCounts" -> 
              9|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 0.196, 
              "ElapsedTimes" -> 0.19777699999999998`, "ExperimentCounts" -> 
              14|>, <|"TrainingSizes" -> 150, "TimeBudgets" -> 
              0.27999999999999997`, "ElapsedTimes" -> 0.305831, 
              "ExperimentCounts" -> 8|>, <|
             "TrainingSizes" -> 586, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
              0.38992, "ExperimentCounts" -> 19|>}, 
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
               "ExperimentCounts"}, {
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
        None, "Log" -> <|
         "Example" -> 
          MachineLearning`MLDataset[<|
            "f1" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
               7168142382301173801|>, 
             "f2" -> <|
              "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
               1978735388468315165|>, 
             "f3" -> <|
              "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
               9071588231046195481|>|>, <|
            "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
             0, "RawExample" -> False|>], "TrainingTime" -> 1.240814, 
          "MaxTrainingMemory" -> 1218464, "DataMemory" -> 178408, 
          "FunctionMemory" -> 343824, "LanguageVersion" -> {14.1, 0}, "Date" -> 
          DateObject[{2024, 8, 10, 12, 42, 6.853928`7.588514525410261}, 
            "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
          "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
          "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{Automatic}}, "Rows" -> {
       GrayLevel[1], 
       GrayLevel[0.96], 
       GrayLevel[1], 
       GrayLevel[0.96]}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {
      1 -> GrayLevel[0], 2 -> GrayLevel[0], 3 -> GrayLevel[0.8], 4 -> 
       GrayLevel[0.8], 4 -> GrayLevel[0]}, 
     "Rows" -> {True, True, {False}, True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.932296397571745*^9, {3.9322964848201323`*^9, 3.932296495785227*^9}, 
   3.93229663719835*^9, 3.932296824614953*^9, 3.932296926917347*^9},
 CellLabel->"Out[9]=",
 CellID->1078018864,ExpressionUUID->"34cddf62-22de-49ae-a31f-1d15cda6ff6f"]
}, Open  ]],

Cell["Compute classifier measurements:", "ExampleText",
 CellChangeTimes->{{3.9322965793226213`*^9, 3.9322965868969803`*^9}, {
  3.932296697730775*^9, 3.932296700600655*^9}, {3.932296814936654*^9, 
  3.932296815623439*^9}},
 CellID->1356887892,ExpressionUUID->"575db386-b1ae-4ad3-b4fc-95cf350e407a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"measures", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EnsembleClassifierMeasurements", "[", 
   RowBox[{"aCLs", ",", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"testData", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", 
        RowBox[{"1", ";;", 
         RowBox[{"-", "2"}]}]}], "\[RightDoubleBracket]"}], "\[Rule]", 
      RowBox[{"testData", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "\[RightDoubleBracket]"}]}], "]"}], ",", 
    "measures"}], "]"}], "//", 
  RowBox[{
   RowBox[{"AssociationThread", "[", 
    RowBox[{"measures", ",", "#"}], "]"}], "&"}]}]}], "Input",
 CellChangeTimes->{{3.7066572643935966`*^9, 3.706657287592332*^9}, {
  3.706657318429618*^9, 3.706657333931768*^9}, {3.9322967258817463`*^9, 
  3.93229679007598*^9}},
 CellLabel->"In[10]:=",
 CellID->1139785810,ExpressionUUID->"1f1ffd61-9197-4e5d-b5c3-f7e7dc07ec0d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8121019108280255`"}], ",", 
   RowBox[{"\<\"Precision\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.8122065727699531`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.8118811881188119`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Recall\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.9010416666666666`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6721311475409837`"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.9322968164263353`*^9, 3.932296824717558*^9}, 
   3.932296926968446*^9},
 CellLabel->"Out[11]=",
 CellID->2091001156,ExpressionUUID->"2b08967d-9173-44ac-a97a-c74ca0e62b2c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "More Examples",
 Cell[BoxData[
  TemplateBox[{"MoreExamples", 
    Cell[
     BoxData[
      FrameBox[
       Cell["Extended examples in standardized sections.", "MoreInfoText"], 
       BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "37388c63-23d1-492c-8ebb-83ca264b079f"]
}], "ExtendedExamplesSection",
 CellTags->"ExtendedExamples",
 CellID->1510482887,ExpressionUUID->"06bea754-c833-40d3-9b21-f42e05911248"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Scope", "ExampleSection",ExpressionUUID->
   "cbbbfa6a-227e-4930-93d2-380bf54d4b2f"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1281690622,ExpressionUUID->"dfa1cb2e-c0e6-4c59-a5a9-e6cb83b92d07"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Generalizations & Extensions", "ExampleSection",ExpressionUUID->
   "a73d89b3-cd01-404e-9416-5f86764e66a9"],
  $Line = 0; Null]], "ExampleSection",
 CellID->2113304544,ExpressionUUID->"479958de-f8dc-4633-8cda-060ee95dff66"],

Cell[TextData[{
 "The function ",
 Cell[BoxData[
  ButtonBox["ResamplingEnsembleClassifier",
   BaseStyle->"Link",
   ButtonData->
    "paclet:AntonAntonov/ClassifierEnsembles/ref/\
ResamplingEnsembleClassifier"]], "InlineFormula",ExpressionUUID->
  "de6e170e-fb66-4fca-ab6f-8f9b0d62bff8"],
 " is makes ensemble classifiers using data resampling specifications."
}], "ExampleText",
 CellChangeTimes->{{3.932297020187077*^9, 3.93229708661905*^9}},
 CellID->572546072,ExpressionUUID->"d30dd223-1e1c-4d57-8465-9f2c0a095cdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "Options", "ExampleSection",ExpressionUUID->
   "e9f72d22-28f5-4e02-9315-ea7853667964"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1077433275,ExpressionUUID->"c91ee2a3-3741-477d-ba87-2cde53e15862"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "ad24a26e-6630-42bc-8de9-e6d1f5469572"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->838941421,ExpressionUUID->"375848c4-ef1f-487c-8597-37e6114a9b01"],

Cell[BoxData[
 InterpretationBox[Cell[
  "XXXX", "ExampleSubsection",ExpressionUUID->
   "830a8e5e-5ed5-4f9a-b694-007e020da660"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->1858320192,ExpressionUUID->"5b12da77-9717-47db-93da-be1f6fcbadbb"]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell[
  "Applications", "ExampleSection",ExpressionUUID->
   "57ad1287-d4f5-4546-bf61-14e80307e872"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1932788623,ExpressionUUID->"243b9991-f2b4-4959-b985-3e17d916bb7b"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Properties & Relations", "ExampleSection",ExpressionUUID->
   "b58c2d62-9279-4af7-a8f2-b16c4cde5c45"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1540742239,ExpressionUUID->"7be553aa-fb51-4e2e-be22-ae9abc54b5d4"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Possible Issues", "ExampleSection",ExpressionUUID->
   "cf3380d7-be38-4c25-9126-d18cbc1ff1fb"],
  $Line = 0; Null]], "ExampleSection",
 CellID->896995347,ExpressionUUID->"474c2078-f203-4eea-957e-71b538fb230b"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Interactive Examples", "ExampleSection",ExpressionUUID->
   "4fdb7bdd-5163-41bf-9b6f-931b4ed00861"],
  $Line = 0; Null]], "ExampleSection",
 CellID->465595089,ExpressionUUID->"fe125b8d-f0f9-4d3f-bf59-3d4aabccf4c2"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Neat Examples", "ExampleSection",ExpressionUUID->
   "3222033d-5832-48a6-bd67-2cdcf19e4a62"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1973734802,ExpressionUUID->"75bfec37-31e8-4525-8493-604a3de55a62"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->380922005,ExpressionUUID->"33ca4508-4d63-474f-92a1-3cc1d587e6df"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"3b65e67f-7083-40ab-8636-8b4c35b6569b"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"51af905b-3848-4980-8b55-6d685cebbca6"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "f83865fb-0795-4aa0-b44a-41b91c6bf47e"]
}], "History",
 CellChangeTimes->{{3.864923683926749*^9, 3.864923685610183*^9}, {
  3.9322969346501293`*^9, 3.932296937387597*^9}},
 CellID->507386328,ExpressionUUID->"15091edf-de43-4187-9a0d-8b7bef5fc63b"],

Cell[CellGroupData[{

Cell[TextData[{
 "Categorization",
 Cell[BoxData[
  TemplateBox[{"Metadata", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
       "Metadata such as page URI, context, and type of documentation page.", 
        "MoreInfoText"], BaseStyle -> "IFrameBox"]], "MoreInfoTextOuter"]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "9fd31999-a442-4b3f-a156-bdee130bcf82"]
}], "CategorizationSection",
 CellID->2131936106,ExpressionUUID->"feb6d2f9-1e69-46db-aefa-c5175f630092"],

Cell["Symbol", "Categorization",
 CellLabel->"Entity Type",
 CellID->685483347,ExpressionUUID->"50b95da1-bc9b-4368-a532-466a49d6d851"],

Cell["AntonAntonov/ClassifierEnsembles", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1415625991,ExpressionUUID->"fc4450fc-4d19-4fb2-8cd0-fcb9057ae638"],

Cell["AntonAntonov`ClassifierEnsembles`", "Categorization",
 CellLabel->"Context",
 CellID->454705624,ExpressionUUID->"b77d21bf-9836-4a9a-9c5c-a59f1a4f9986"],

Cell["AntonAntonov/ClassifierEnsembles/ref/EnsembleClassifier", \
"Categorization",
 CellLabel->"URI",
 CellID->1490606542,ExpressionUUID->"6621429c-b1ce-4fca-932c-2acd4ee6eb4a"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->1144345857,ExpressionUUID->"c80b8169-daed-42ad-bfbd-0dbc3a635f26"],

Cell["XXXX", "Keywords",
 CellID->157276067,ExpressionUUID->"8facc486-a356-407f-a59a-b7b4356c2448"]
}, Closed]],

Cell[CellGroupData[{

Cell["Syntax Templates", "TemplatesSection",
 CellID->1933972259,ExpressionUUID->"b0785f11-80ae-441c-9f83-33c2a2695028"],

Cell[BoxData[""], "Template",
 CellLabel->"Additional Function Template",
 CellID->2106759668,ExpressionUUID->"7ba18cd1-353e-4de7-a93d-b45cd38c7389"],

Cell[BoxData[""], "Template",
 CellLabel->"Arguments Pattern",
 CellID->599368340,ExpressionUUID->"28416342-983b-4be0-b304-e06af1cb6038"],

Cell[BoxData[""], "Template",
 CellLabel->"Local Variables",
 CellID->1885385950,ExpressionUUID->"fbdf82c5-88a8-4926-a9d5-2d84f5a4f772"],

Cell[BoxData[""], "Template",
 CellLabel->"Color Equal Signs",
 CellID->1560450165,ExpressionUUID->"90155ba4-e8d3-4bc0-8513-eb3fd56decdf"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1477, 992},
WindowMargins->{{939, Automatic}, {Automatic, 0}},
TaggingRules-><|"Paclet" -> "AntonAntonov/ClassifierEnsembles"|>,
CellContext->"Global`",
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "FunctionPageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"79c94cd2-f210-49d4-957b-47a85a2541ec"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ExtendedExamples"->{
  Cell[304673, 5542, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"06bea754-c833-40d3-9b21-f42e05911248",
   CellTags->"ExtendedExamples",
   CellID->1510482887]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ExtendedExamples", 311749, 5751}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 116, 1, 90, "ObjectName",ExpressionUUID->"d2f3fd81-113f-4967-ac8c-fd9efb132990",
 CellID->1287779630],
Cell[695, 25, 1550, 42, 138, "Usage",ExpressionUUID->"0b2a8b35-e90a-434a-85bf-0471e5d9b44f",
 CellID->1372046944],
Cell[2248, 69, 96, 1, 32, "Notes",ExpressionUUID->"cc96ba81-4fd4-41d0-8939-1ec80923ca54",
 CellID->313586322]
}, Open  ]],
Cell[CellGroupData[{
Cell[2381, 75, 458, 13, 48, "SeeAlsoSection",ExpressionUUID->"c6c1e3c1-e025-46e4-8881-394b98a2630e",
 CellID->520444116],
Cell[2842, 90, 1823, 45, 26, "SeeAlso",ExpressionUUID->"6b3a48d2-9bf5-45ac-bf2a-2c7b9cefd96a",
 CellID->403363381]
}, Open  ]],
Cell[CellGroupData[{
Cell[4702, 140, 436, 12, 49, "TechNotesSection",ExpressionUUID->"fdd0d7b0-96da-46b1-bc6a-a6a1008492a7",
 CellID->1869954535],
Cell[5141, 154, 101, 1, 22, "Tutorials",ExpressionUUID->"fbb8b091-20cd-4a56-ba0c-46cb3a730c72",
 CellID->2050179547]
}, Open  ]],
Cell[CellGroupData[{
Cell[5279, 160, 117, 1, 47, "MoreAboutSection",ExpressionUUID->"4cc53708-7947-45dc-899f-9e9c9745a668",
 CellID->992530314],
Cell[5399, 163, 101, 1, 22, "MoreAbout",ExpressionUUID->"a51fa630-d9f1-4173-bd7d-3e67c3f87961",
 CellID->1951501149]
}, Open  ]],
Cell[CellGroupData[{
Cell[5537, 169, 472, 13, 48, "RelatedLinksSection",ExpressionUUID->"18d9c33b-8347-4a9c-84d3-6a99ea91e9e1",
 CellID->362070612],
Cell[6012, 184, 104, 1, 22, "RelatedLinks",ExpressionUUID->"d64dafdf-5782-4fde-bee2-7908a57014ae",
 CellID->1499603933]
}, Open  ]],
Cell[CellGroupData[{
Cell[6153, 190, 530, 14, 86, "ExamplesInitializationSection",ExpressionUUID->"e47559e4-544b-449a-9df5-08573346fbed",
 CellID->975220739],
Cell[6686, 206, 192, 3, 57, "ExampleInitialization",ExpressionUUID->"1acd05f5-207e-4bb0-9797-9918da7e1cb8",
 CellID->939766469]
}, Open  ]],
Cell[CellGroupData[{
Cell[6915, 214, 443, 12, 88, "PrimaryExamplesSection",ExpressionUUID->"c457a434-f2b1-45ea-9203-a22f03f895ad",
 CellID->2060304445],
Cell[7361, 228, 201, 3, 28, "ExampleText",ExpressionUUID->"66e866b6-5be9-4dd5-89a0-2e97883e6c98",
 CellID->657007628],
Cell[7565, 233, 1001, 31, 79, "Input",ExpressionUUID->"06af7db7-5473-4f91-a6c7-3ab7b5759bf7",
 CellID->1250247880],
Cell[8569, 266, 203, 3, 28, "ExampleText",ExpressionUUID->"d0c5a979-d861-45d0-88ef-03770ce41e77",
 CellID->2010608312],
Cell[8775, 271, 1020, 32, 79, "Input",ExpressionUUID->"552fdee3-a267-4adb-8742-9d4860e49e22",
 CellID->231973877],
Cell[9798, 305, 274, 4, 28, "ExampleText",ExpressionUUID->"44fd99d1-ebc7-4167-88c7-141c08460cf8",
 CellID->1282629811],
Cell[CellGroupData[{
Cell[10097, 313, 1381, 29, 103, "Input",ExpressionUUID->"fa0feaf9-10c8-4a30-94e0-b43295c53a52",
 CellID->1824665387],
Cell[11481, 344, 240, 4, 31, "Output",ExpressionUUID->"8227c7a9-2486-47a9-847f-fe13c9e2ba4e",
 CellID->385569074]
}, Open  ]],
Cell[11736, 351, 261, 3, 28, "ExampleText",ExpressionUUID->"aff5aff3-0fe1-4851-b406-13cfe22ef816",
 CellID->876245005],
Cell[CellGroupData[{
Cell[12022, 358, 941, 18, 56, "Input",ExpressionUUID->"770351ce-6ba1-4915-92ad-8233ee314d72",
 CellID->1822858045],
Cell[12966, 378, 289342, 5099, 341, "Output",ExpressionUUID->"34cddf62-22de-49ae-a31f-1d15cda6ff6f",
 CellID->1078018864]
}, Open  ]],
Cell[302323, 5480, 299, 4, 28, "ExampleText",ExpressionUUID->"575db386-b1ae-4ad3-b4fc-95cf350e407a",
 CellID->1356887892],
Cell[CellGroupData[{
Cell[302647, 5488, 1070, 27, 103, "Input",ExpressionUUID->"1f1ffd61-9197-4e5d-b5c3-f7e7dc07ec0d",
 CellID->1139785810],
Cell[303720, 5517, 904, 19, 54, "Output",ExpressionUUID->"2b08967d-9173-44ac-a97a-c74ca0e62b2c",
 CellID->2091001156]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[304673, 5542, 488, 13, 71, "ExtendedExamplesSection",ExpressionUUID->"06bea754-c833-40d3-9b21-f42e05911248",
 CellTags->"ExtendedExamples",
 CellID->1510482887],
Cell[305164, 5557, 242, 5, 40, "ExampleSection",ExpressionUUID->"dfa1cb2e-c0e6-4c59-a5a9-e6cb83b92d07",
 CellID->1281690622],
Cell[CellGroupData[{
Cell[305431, 5566, 265, 5, 24, "ExampleSection",ExpressionUUID->"479958de-f8dc-4633-8cda-060ee95dff66",
 CellID->2113304544],
Cell[305699, 5573, 521, 12, 48, "ExampleText",ExpressionUUID->"d30dd223-1e1c-4d57-8465-9f2c0a095cdf",
 CellID->572546072]
}, Open  ]],
Cell[CellGroupData[{
Cell[306257, 5590, 244, 5, 40, "ExampleSection",ExpressionUUID->"c91ee2a3-3741-477d-ba87-2cde53e15862",
 CellID->1077433275],
Cell[306504, 5597, 246, 5, 28, "ExampleSubsection",ExpressionUUID->"375848c4-ef1f-487c-8597-37e6114a9b01",
 CellID->838941421],
Cell[306753, 5604, 247, 5, 22, "ExampleSubsection",ExpressionUUID->"5b12da77-9717-47db-93da-be1f6fcbadbb",
 CellID->1858320192]
}, Open  ]],
Cell[307015, 5612, 249, 5, 40, "ExampleSection",ExpressionUUID->"243b9991-f2b4-4959-b985-3e17d916bb7b",
 CellID->1932788623],
Cell[307267, 5619, 259, 5, 24, "ExampleSection",ExpressionUUID->"7be553aa-fb51-4e2e-be22-ae9abc54b5d4",
 CellID->1540742239],
Cell[307529, 5626, 251, 5, 24, "ExampleSection",ExpressionUUID->"474c2078-f203-4eea-957e-71b538fb230b",
 CellID->896995347],
Cell[307783, 5633, 256, 5, 24, "ExampleSection",ExpressionUUID->"fe125b8d-f0f9-4d3f-bf59-3d4aabccf4c2",
 CellID->465595089],
Cell[308042, 5640, 250, 5, 24, "ExampleSection",ExpressionUUID->"75bfec37-31e8-4525-8493-604a3de55a62",
 CellID->1973734802]
}, Open  ]],
Cell[CellGroupData[{
Cell[308329, 5650, 110, 1, 88, "MetadataSection",ExpressionUUID->"33ca4508-4d63-474f-92a1-3cc1d587e6df",
 CellID->380922005],
Cell[308442, 5653, 596, 14, 31, "History",ExpressionUUID->"15091edf-de43-4187-9a0d-8b7bef5fc63b",
 CellID->507386328],
Cell[CellGroupData[{
Cell[309063, 5671, 485, 13, 25, "CategorizationSection",ExpressionUUID->"feb6d2f9-1e69-46db-aefa-c5175f630092",
 CellID->2131936106],
Cell[309551, 5686, 134, 2, 42, "Categorization",ExpressionUUID->"50b95da1-bc9b-4368-a532-466a49d6d851",
 CellID->685483347],
Cell[309688, 5690, 161, 2, 42, "Categorization",ExpressionUUID->"fc4450fc-4d19-4fb2-8cd0-fcb9057ae638",
 CellID->1415625991],
Cell[309852, 5694, 157, 2, 42, "Categorization",ExpressionUUID->"b77d21bf-9836-4a9a-9c5c-a59f1a4f9986",
 CellID->454705624],
Cell[310012, 5698, 178, 3, 42, "Categorization",ExpressionUUID->"6621429c-b1ce-4fca-932c-2acd4ee6eb4a",
 CellID->1490606542]
}, Closed]],
Cell[CellGroupData[{
Cell[310227, 5706, 111, 1, 24, "KeywordsSection",ExpressionUUID->"c80b8169-daed-42ad-bfbd-0dbc3a635f26",
 CellID->1144345857],
Cell[310341, 5709, 99, 1, 87, "Keywords",ExpressionUUID->"8facc486-a356-407f-a59a-b7b4356c2448",
 CellID->157276067]
}, Closed]],
Cell[CellGroupData[{
Cell[310477, 5715, 120, 1, 24, "TemplatesSection",ExpressionUUID->"b0785f11-80ae-441c-9f83-33c2a2695028",
 CellID->1933972259],
Cell[310600, 5718, 149, 2, 87, "Template",ExpressionUUID->"7ba18cd1-353e-4de7-a93d-b45cd38c7389",
 CellID->2106759668],
Cell[310752, 5722, 137, 2, 87, "Template",ExpressionUUID->"28416342-983b-4be0-b304-e06af1cb6038",
 CellID->599368340],
Cell[310892, 5726, 136, 2, 87, "Template",ExpressionUUID->"fbdf82c5-88a8-4926-a9d5-2d84f5a4f772",
 CellID->1885385950],
Cell[311031, 5730, 138, 2, 87, "Template",ExpressionUUID->"90155ba4-e8d3-4bc0-8513-eb3fd56decdf",
 CellID->1560450165]
}, Closed]]
}, Open  ]]
}
]
*)

